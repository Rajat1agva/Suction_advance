
SuctionPump(pwm).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00804000  00003a74  00003b08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003a  008040b6  008040b6  00003bbe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003bbe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003bf0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00003c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000066c8  00000000  00000000  00003df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f58  00000000  00000000  0000a4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015db  00000000  00000000  0000d410  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000071c  00000000  00000000  0000e9ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000029de  00000000  00000000  0000f108  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000258b  00000000  00000000  00011ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  00014071  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__ctors_end>
       4:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
       8:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
       c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      10:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      14:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      18:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      1c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      20:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      24:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      28:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      2c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      30:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      34:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      38:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      3c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      40:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      44:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      48:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      4c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      50:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      54:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      58:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      5c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      60:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      64:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      68:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      6c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      70:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      74:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      78:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      7c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      80:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      84:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      88:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      8c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      90:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      94:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      98:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      9c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      a0:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      a4:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      a8:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      ac:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      b0:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      b4:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      b8:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      bc:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      c0:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      c4:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      c8:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      cc:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      d0:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      d4:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      d8:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      dc:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      e0:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      e4:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      e8:	07 63       	ori	r16, 0x37	; 55
      ea:	42 36       	cpi	r20, 0x62	; 98
      ec:	b7 9b       	sbis	0x16, 7	; 22
      ee:	d8 a7       	std	Y+40, r29	; 0x28
      f0:	1a 39       	cpi	r17, 0x9A	; 154
      f2:	68 56       	subi	r22, 0x68	; 104
      f4:	18 ae       	std	Y+56, r1	; 0x38
      f6:	ba ab       	std	Y+50, r27	; 0x32
      f8:	55 8c       	ldd	r5, Z+29	; 0x1d
      fa:	1d 3c       	cpi	r17, 0xCD	; 205
      fc:	b7 cc       	rjmp	.-1682   	; 0xfffffa6c <__eeprom_end+0xff7efa6c>
      fe:	57 63       	ori	r21, 0x37	; 55
     100:	bd 6d       	ori	r27, 0xDD	; 221
     102:	ed fd       	.word	0xfded	; ????
     104:	75 3e       	cpi	r23, 0xE5	; 229
     106:	f6 17       	cp	r31, r22
     108:	72 31       	cpi	r23, 0x12	; 18
     10a:	bf 00       	.word	0x00bf	; ????
     10c:	00 00       	nop
     10e:	80 3f       	cpi	r24, 0xF0	; 240
     110:	08 00       	.word	0x0008	; ????
     112:	00 00       	nop
     114:	be 92       	st	-X, r11
     116:	24 49       	sbci	r18, 0x94	; 148
     118:	12 3e       	cpi	r17, 0xE2	; 226
     11a:	ab aa       	std	Y+51, r10	; 0x33
     11c:	aa 2a       	or	r10, r26
     11e:	be cd       	rjmp	.-1156   	; 0xfffffc9c <__eeprom_end+0xff7efc9c>
     120:	cc cc       	rjmp	.-1640   	; 0xfffffaba <__eeprom_end+0xff7efaba>
     122:	4c 3e       	cpi	r20, 0xEC	; 236
     124:	00 00       	nop
     126:	00 80       	ld	r0, Z
     128:	be ab       	std	Y+54, r27	; 0x36
     12a:	aa aa       	std	Y+50, r10	; 0x32
     12c:	aa 3e       	cpi	r26, 0xEA	; 234
     12e:	00 00       	nop
     130:	00 00       	nop
     132:	bf 00       	.word	0x00bf	; ????
     134:	00 00       	nop
     136:	80 3f       	cpi	r24, 0xF0	; 240
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	00 08       	sbc	r0, r0
     13e:	41 78       	andi	r20, 0x81	; 129
     140:	d3 bb       	out	0x13, r29	; 19
     142:	43 87       	std	Z+11, r20	; 0x0b
     144:	d1 13       	cpse	r29, r17
     146:	3d 19       	sub	r19, r13
     148:	0e 3c       	cpi	r16, 0xCE	; 206
     14a:	c3 bd       	out	0x23, r28	; 35
     14c:	42 82       	std	Z+2, r4	; 0x02
     14e:	ad 2b       	or	r26, r29
     150:	3e 68       	ori	r19, 0x8E	; 142
     152:	ec 82       	std	Y+4, r14	; 0x04
     154:	76 be       	out	0x36, r7	; 54
     156:	d9 8f       	std	Y+25, r29	; 0x19
     158:	e1 a9       	ldd	r30, Z+49	; 0x31
     15a:	3e 4c       	sbci	r19, 0xCE	; 206
     15c:	80 ef       	ldi	r24, 0xF0	; 240
     15e:	ff be       	out	0x3f, r15	; 63
     160:	01 c4       	rjmp	.+2050   	; 0x964 <__LOCK_REGION_LENGTH__+0x564>
     162:	ff 7f       	andi	r31, 0xFF	; 255
     164:	3f 00       	.word	0x003f	; ????
     166:	00 00       	nop
	...

0000016a <__trampolines_end>:
     16a:	00 00       	nop
     16c:	00 0c       	add	r0, r0
     16e:	00 00       	nop
     170:	00 00       	nop
     172:	00 1c       	adc	r0, r0
     174:	00 00       	nop
     176:	00 00       	nop
     178:	00 1c       	adc	r0, r0
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	00 0c       	add	r0, r0
     180:	00 00       	nop
     182:	00 00       	nop
     184:	00 0c       	add	r0, r0
     186:	00 00       	nop
     188:	30 00       	.word	0x0030	; ????
     18a:	00 0c       	add	r0, r0
     18c:	00 00       	nop
     18e:	30 01       	movw	r6, r0
     190:	80 0c       	add	r8, r0
     192:	00 00       	nop
     194:	3e e1       	ldi	r19, 0x1E	; 30
     196:	f7 0c       	add	r15, r7
     198:	00 fe       	sbrs	r0, 0
     19a:	7f f1       	brie	.+94     	; 0x1fa <battery_SOC4_15x32>
     19c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     19e:	e1 fe       	sbrs	r14, 1
     1a0:	73 33       	cpi	r23, 0x33	; 51
     1a2:	99 8f       	std	Y+25, r25	; 0x19
     1a4:	f1 8c       	ldd	r15, Z+25	; 0x19
     1a6:	33 33       	cpi	r19, 0x33	; 51
     1a8:	99 8e       	std	Y+25, r9	; 0x19
     1aa:	31 8c       	ldd	r3, Z+25	; 0x19
     1ac:	33 31       	cpi	r19, 0x13	; 19
     1ae:	99 8c       	ldd	r9, Y+25	; 0x19
     1b0:	31 8c       	ldd	r3, Z+25	; 0x19
     1b2:	33 31       	cpi	r19, 0x13	; 19
     1b4:	99 8c       	ldd	r9, Y+25	; 0x19
     1b6:	31 8c       	ldd	r3, Z+25	; 0x19
     1b8:	33 31       	cpi	r19, 0x13	; 19
     1ba:	99 8c       	ldd	r9, Y+25	; 0x19
     1bc:	31 8c       	ldd	r3, Z+25	; 0x19
     1be:	33 31       	cpi	r19, 0x13	; 19
     1c0:	99 8c       	ldd	r9, Y+25	; 0x19
     1c2:	30 fc       	sbrc	r3, 0
     1c4:	33 31       	cpi	r19, 0x13	; 19
     1c6:	99 8c       	ldd	r9, Y+25	; 0x19
     1c8:	31 f8       	bld	r3, 1
     1ca:	7b bb       	out	0x1b, r23	; 27
     1cc:	dd de       	rcall	.-582    	; 0xffffff88 <__eeprom_end+0xff7eff88>
     1ce:	79 80       	ldd	r7, Y+1	; 0x01
     1d0:	7b bb       	out	0x1b, r23	; 27
     1d2:	dd de       	rcall	.-582    	; 0xffffff8e <__eeprom_end+0xff7eff8e>
     1d4:	79 fc       	.word	0xfc79	; ????
     1d6:	00 00       	nop
     1d8:	00 00       	nop
     1da:	03 fe       	sbrs	r0, 3
     1dc:	00 00       	nop
     1de:	00 00       	nop
     1e0:	03 06       	cpc	r0, r19
     1e2:	00 00       	nop
     1e4:	00 00       	nop
     1e6:	03 06       	cpc	r0, r19
     1e8:	00 00       	nop
     1ea:	00 00       	nop
     1ec:	03 06       	cpc	r0, r19
     1ee:	00 00       	nop
     1f0:	00 00       	nop
     1f2:	03 fe       	sbrs	r0, 3
     1f4:	00 00       	nop
     1f6:	00 00       	nop
     1f8:	01 fc       	sbrc	r0, 1

000001fa <battery_SOC4_15x32>:
     1fa:	7f ff ff c0 80 00 00 20 be fe ff a0 bf 7f 7f a0     ....... ........
     20a:	bf bf bf b8 9f df df a4 af ef ef a4 b7 f7 f7 a4     ................
     21a:	bb fb fb a4 bd fd fd b8 be fe fe a0 bf 7f 7f 20     ............... 
     22a:	bf bf bf a0 80 00 00 20 7f ff ff c0                 ....... ....

00000236 <system24x36>:
	...
     256:	00 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
     266:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
     276:	01 01 00 00 00 00 00 00 00 00 00 00 00 01 01 01     ................
     286:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
     296:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     2a6:	01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01     ................
     2b6:	01 01 00 00 00 00 01 01 01 01 01 01 00 00 00 00     ................
     2c6:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
     2d6:	01 01 01 01 01 00 00 00 00 00 00 01 01 01 01 01     ................
	...
     2ee:	01 01 01 01 01 00 00 00 00 00 01 01 01 01 01 00     ................
	...
     306:	00 01 01 01 01 01 00 00 00 00 01 01 01 01 01 00     ................
	...
     31e:	00 01 01 01 01 01 00 00 00 00 01 01 01 01 01 00     ................
	...
     336:	00 01 01 01 01 01 00 00 00 00 01 01 01 01 00 00     ................
	...
     34e:	00 00 01 01 01 01 00 00 00 01 01 01 01 01 00 00     ................
	...
     366:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     37e:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     396:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     3ae:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     3c6:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     3de:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     3f6:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     40e:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     426:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     43e:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     456:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     46e:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     486:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     49e:	00 00 01 01 01 01 01 00 00 00 01 01 01 01 00 00     ................
	...
     4b6:	00 00 01 01 01 01 00 00 00 00 01 01 01 01 01 00     ................
	...
     4ce:	00 01 01 01 01 01 00 00 00 00 01 01 01 01 01 00     ................
	...
     4e6:	00 01 01 01 01 01 00 00 00 00 01 01 01 01 01 00     ................
	...
     4fe:	00 01 01 01 01 01 00 00 00 00 00 01 01 01 01 01     ................
	...
     516:	01 01 01 01 01 00 00 00 00 00 00 01 01 01 01 01     ................
	...
     52e:	01 01 01 01 01 00 00 00 00 00 00 00 01 01 01 01     ................
     53e:	01 01 00 00 00 00 01 01 01 01 01 01 00 00 00 00     ................
     54e:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     55e:	01 01 01 01 00 00 00 00 00 00 00 00 00 01 01 01     ................
     56e:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
     57e:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
     58e:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     5b6:	00 00 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     5ce:	00 00 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     5e6:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     5fe:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
     60e:	00 00 00 00 00 00 00 01 01 01 01 01 01 01 00 00     ................
	...
     626:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
	...
     63e:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
	...
     656:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
	...
     676:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     68e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     6a6:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     6be:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     6d6:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     6ee:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     706:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     71e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     736:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     74e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     766:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     77e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     796:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     7ae:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     7c6:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     7de:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     7f6:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     80e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     826:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     83e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     856:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     86e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     886:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
     896:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     8a6:	01 01 01 01 00 00 00 00 00 00 00 01 01 01 01 01     ................
     8b6:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     8c6:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     8d6:	01 01 01 01 00 00 00 00 00 00 00 01 01 01 01 01     ................
     8e6:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
     8fe:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
     90e:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     91e:	01 01 00 00 00 00 00 00 00 00 00 01 01 01 01 01     ................
     92e:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
     93e:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     94e:	01 01 01 01 00 00 00 00 00 00 00 01 01 01 01 01     ................
     95e:	00 00 00 00 00 00 01 01 01 01 01 01 01 00 00 00     ................
     96e:	00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 01     ................
     97e:	01 01 01 01 01 00 00 00 00 00 00 01 00 00 00 00     ................
	...
     996:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     9ae:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     9c6:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     9de:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     9f6:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     a0e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     a26:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     a3e:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     a56:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     a6e:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
     a7e:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
	...
     a9a:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
     ab2:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
     aca:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     ae2:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
     af2:	00 00 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
	...
     b0e:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
     b26:	00 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
     b3e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     b56:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
     b66:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
	...
     b82:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
     b9a:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     bb2:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
     bc2:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
	...
     bde:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
     bf6:	00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c06:	01 01 01 01 01 01 01 00 00 00 01 01 01 01 01 01     ................
     c16:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 00     ................
     c26:	00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c36:	01 01 01 01 01 01 01 00 00 00 01 01 01 01 01 01     ................
     c46:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 00     ................
     c56:	00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 00     ................
	...
     c6e:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c7e:	01 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
     c8e:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
     c9e:	00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     cae:	01 01 01 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
     cbe:	00 00 00 00 00 01 01 01 01 01 01 01 00 00 00 00     ................
     cce:	00 00 01 01 01 00 00 00 00 00 00 00 00 00 00 01     ................
     cde:	01 01 01 01 01 00 00 00 00 00 01 00 00 00 00 00     ................
     cee:	00 00 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
	...
     d0e:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d26:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d3e:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d56:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d6e:	01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
     d7e:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
	...
     d9a:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
     db2:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
     dc2:	00 00 00 00 01 01 01 01 01 01 01 01 01 00 00 00     ................
	...
     dde:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
     df6:	01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
     e0e:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
	...
     e2a:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
     e42:	00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
     e5e:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e76:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     e8e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     ea6:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     ebe:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     ed6:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     eee:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     f06:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     f1e:	01 01 01 01 01 00 00 00 00 01 00 00 00 00 00 00     ................
	...
     f36:	01 01 01 01 01 00 00 00 00 01 01 01 00 00 00 00     ................
     f46:	00 00 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
     f56:	00 01 01 01 01 01 01 00 00 00 00 00 00 01 01 01     ................
     f66:	01 01 01 01 00 00 00 00 00 01 01 01 01 01 01 01     ................
     f76:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
     f86:	00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     f96:	01 01 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
     fa6:	01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
     fda:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
     ff2:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    100a:	00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1022:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    1032:	00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01     ................
	...
    104e:	00 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    1066:	00 00 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    107e:	00 01 01 01 01 01 00 01 01 01 01 01 00 00 00 00     ................
	...
    1096:	01 01 01 01 01 00 00 01 01 01 01 01 00 00 00 00     ................
    10a6:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 01     ................
    10b6:	01 01 01 01 00 00 00 00 00 00 00 00 00 00 01 01     ................
    10c6:	01 01 01 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
    10d6:	00 00 00 00 00 01 01 01 01 01 00 00 00 00 00 01     ................
    10e6:	01 01 01 01 00 00 00 00 00 00 00 00 00 01 01 01     ................
    10f6:	01 00 00 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
    1106:	00 00 00 00 01 01 01 01 01 00 00 00 00 00 00 01     ................
    1116:	01 01 01 01 00 00 00 00 00 00 00 01 01 01 01 01     ................
    1126:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
    1136:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 01     ................
    1146:	01 01 01 01 00 00 00 00 00 01 01 01 01 01 00 00     ................
    1156:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
    1166:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 01     ................
    1176:	01 01 01 01 00 00 00 00 01 01 01 01 00 00 00 00     ................
    1186:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
    1196:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    11a6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    11b6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    11c6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    11d6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    11e6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
	...
    1202:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    121a:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1232:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    124a:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1262:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    127a:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1292:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    12aa:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    12c2:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    12da:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    12f2:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    130a:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 01     ................
    131a:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    132a:	01 01 01 00 00 00 00 01 01 01 01 01 01 01 01 01     ................
    133a:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 01     ................
    134a:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    135a:	01 01 01 00 00 00 00 01 01 01 01 01 01 01 01 01     ................
    136a:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 01     ................
    137a:	01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
    138a:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
	...
    13a6:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    13be:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    13d6:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    13ee:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1406:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    141e:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1436:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    144e:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
	...
    1466:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1476:	01 01 00 00 00 00 00 00 00 00 00 01 01 01 01 01     ................
    1486:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
    1496:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    14a6:	01 01 01 01 01 00 00 00 00 00 00 01 01 00 00 00     ................
    14b6:	00 00 00 00 00 00 01 01 01 01 01 01 01 00 00 00     ................
	...
    14d6:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    14ee:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1506:	00 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    151e:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1536:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    154e:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1566:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    157e:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1596:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    15ae:	00 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    15c6:	00 01 01 01 01 01 00 00 00 00 01 00 00 00 00 00     ................
	...
    15de:	01 01 01 01 01 01 00 00 00 00 01 01 01 00 00 00     ................
	...
    15f6:	01 01 01 01 01 00 00 00 00 00 01 01 01 01 01 01     ................
    1606:	00 00 00 00 00 00 01 01 01 01 01 01 01 00 00 00     ................
    1616:	00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1626:	01 01 01 01 00 00 00 00 00 00 01 01 01 01 01 01     ................
    1636:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
    1646:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1656:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    1666:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1682:	00 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
    1692:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
    16a2:	01 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    16b2:	01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
    16c2:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    16d2:	01 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    16e2:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    16f2:	00 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    170a:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1722:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    1732:	00 00 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
	...
    174e:	00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    1766:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    177e:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1796:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    17ae:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    17c6:	00 01 01 01 01 01 00 00 00 00 01 01 01 01 01 01     ................
    17d6:	01 00 00 00 00 00 00 00 00 01 01 01 01 01 00 00     ................
    17e6:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
    17f6:	00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1806:	01 01 01 01 01 00 00 00 00 01 01 01 01 01 01 01     ................
    1816:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
    1826:	00 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
    1836:	01 01 01 01 01 01 00 00 00 01 01 01 01 01 01 00     ................
	...
    184e:	00 01 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
    1866:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
    187e:	00 00 01 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    1896:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    18ae:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    18c6:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    18de:	00 00 00 01 01 01 01 01 00 00 01 01 01 01 00 00     ................
	...
    18f6:	00 00 00 01 01 01 01 01 00 00 01 01 01 01 01 00     ................
	...
    190e:	00 00 00 01 01 01 01 01 00 00 01 01 01 01 01 00     ................
	...
    1926:	00 00 00 01 01 01 01 01 00 00 01 01 01 01 01 00     ................
	...
    193e:	00 00 01 01 01 01 01 00 00 00 00 01 01 01 01 01     ................
	...
    1956:	00 00 01 01 01 01 01 00 00 00 00 01 01 01 01 01     ................
    1966:	01 00 00 00 00 00 00 00 00 01 01 01 01 01 00 00     ................
    1976:	00 00 00 00 01 01 01 01 01 01 00 00 00 00 00 01     ................
    1986:	01 01 01 01 01 01 00 00 00 00 00 00 00 01 01 01     ................
    1996:	01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00     ................
    19a6:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
    19b6:	01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 01     ................
    19c6:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00     ................
	...
    19ee:	00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    19fe:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
    1a0e:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 00     ................
    1a1e:	00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1a2e:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
    1a3e:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 00     ................
	...
    1a5e:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1a76:	00 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1a8e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1aa6:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1abe:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1ace:	00 00 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
	...
    1aea:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1b02:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1b1a:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1b32:	00 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1b4a:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b62:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b7a:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1b8a:	00 00 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
	...
    1ba6:	00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    1bbe:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1bd6:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1bee:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1c06:	00 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1c1e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c36:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c4e:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1c5e:	00 00 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
	...
    1c7a:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1c92:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1caa:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1cc2:	00 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1cda:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1cf2:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d0a:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1d1a:	00 00 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
	...
    1d3e:	00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    1d4e:	00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01     ................
    1d5e:	01 01 01 00 00 00 00 00 00 00 00 00 00 01 01 01     ................
    1d6e:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
    1d7e:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1d8e:	01 01 01 01 01 00 00 00 00 00 00 01 01 01 01 01     ................
    1d9e:	01 01 00 00 00 00 00 01 01 01 01 01 01 01 00 00     ................
    1dae:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    1dbe:	00 01 01 01 01 01 00 00 00 00 01 01 01 01 01 01     ................
	...
    1dd6:	00 01 01 01 01 01 01 00 00 00 01 01 01 01 01 00     ................
	...
    1dee:	00 00 01 01 01 01 01 00 00 00 01 01 01 01 01 00     ................
	...
    1e06:	00 00 01 01 01 01 01 00 00 00 01 01 01 01 01 00     ................
	...
    1e1e:	00 00 01 01 01 01 01 00 00 00 01 01 01 01 01 00     ................
	...
    1e36:	00 00 01 01 01 01 01 00 00 00 01 01 01 01 01 01     ................
	...
    1e4e:	00 00 01 01 01 01 01 00 00 00 00 01 01 01 01 01     ................
	...
    1e66:	00 00 01 01 01 01 00 00 00 00 00 01 01 01 01 01     ................
    1e76:	01 01 00 00 00 00 00 00 00 01 01 01 01 01 00 00     ................
    1e86:	00 00 00 00 01 01 01 01 01 01 01 00 00 00 00 00     ................
    1e96:	00 01 01 01 01 00 00 00 00 00 00 00 00 01 01 01     ................
    1ea6:	01 01 01 01 01 00 00 00 01 01 01 01 00 00 00 00     ................
    1eb6:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
    1ec6:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    1ed6:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00     ................
    1ee6:	00 00 00 00 00 01 01 01 01 01 01 01 01 01 01 01     ................
    1ef6:	01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01     ................
    1f06:	01 00 00 00 01 01 01 01 01 01 01 01 01 00 00 00     ................
    1f16:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 01     ................
    1f26:	01 01 01 01 01 01 00 00 00 00 01 01 01 01 01 00     ................
	...
    1f3e:	01 01 01 01 01 01 01 00 00 00 01 01 01 01 01 00     ................
	...
    1f56:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
    1f6e:	00 00 01 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    1f86:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    1f9e:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    1fb6:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    1fce:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    1fe6:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 01 00     ................
	...
    1ffe:	00 00 01 01 01 01 01 01 00 00 01 01 01 01 01 00     ................
	...
    2016:	00 00 01 01 01 01 01 00 00 00 01 01 01 01 01 01     ................
	...
    202e:	00 01 01 01 01 01 01 00 00 00 00 01 01 01 01 01     ................
    203e:	01 01 00 00 00 00 00 01 01 01 01 01 01 01 00 00     ................
    204e:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
    205e:	01 01 01 01 01 00 00 00 00 00 00 00 00 01 01 01     ................
    206e:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
    207e:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
    208e:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    209e:	00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    20ae:	00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01     ................
    20be:	01 01 00 00 00 00 00 00 00 00 00 00 00 01 01 01     ................
    20ce:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
    20de:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
    20ee:	01 01 01 01 00 00 00 00 00 00 00 01 01 01 01 01     ................
    20fe:	01 01 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
    210e:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    211e:	01 01 01 01 01 01 00 00 00 00 01 01 01 01 01 00     ................
	...
    2136:	00 01 01 01 01 01 00 00 00 00 01 01 01 01 01 00     ................
	...
    214e:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
    2166:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
    217e:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
    2196:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    21ae:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    21c6:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    21de:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    21f6:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 01 00     ................
	...
    220e:	00 00 00 01 01 01 01 01 00 00 01 01 01 01 01 00     ................
	...
    2226:	00 00 00 01 01 01 01 01 00 00 01 01 01 01 01 01     ................
	...
    223e:	00 00 01 01 01 01 01 01 00 00 00 01 01 01 01 01     ................
    224e:	01 01 00 00 00 00 00 00 01 01 01 01 01 01 01 01     ................
    225e:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    226e:	01 01 01 01 01 01 01 01 00 00 00 00 01 01 01 01     ................
    227e:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    228e:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
    229e:	01 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    22ae:	01 01 01 01 01 01 01 00 00 00 00 01 01 01 01 00     ................
	...
    22ce:	00 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    22e6:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    22fe:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    2316:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    232e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    2346:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    235e:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    236e:	00 00 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
	...
    238a:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    23a2:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    23b2:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    23ca:	01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00     ................
	...
    23e2:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
    23f2:	00 00 00 00                                         ....

000023f6 <columnColorToByte>:
    23f6:	00 4a 92 ff                                         .J..

000023fa <__ctors_end>:
    23fa:	11 24       	eor	r1, r1
    23fc:	1f be       	out	0x3f, r1	; 63
    23fe:	cf ef       	ldi	r28, 0xFF	; 255
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	df e7       	ldi	r29, 0x7F	; 127
    2404:	de bf       	out	0x3e, r29	; 62

00002406 <__do_copy_data>:
    2406:	10 e4       	ldi	r17, 0x40	; 64
    2408:	a0 e0       	ldi	r26, 0x00	; 0
    240a:	b0 e4       	ldi	r27, 0x40	; 64
    240c:	e4 e7       	ldi	r30, 0x74	; 116
    240e:	fa e3       	ldi	r31, 0x3A	; 58
    2410:	00 e0       	ldi	r16, 0x00	; 0
    2412:	0b bf       	out	0x3b, r16	; 59
    2414:	02 c0       	rjmp	.+4      	; 0x241a <__do_copy_data+0x14>
    2416:	07 90       	elpm	r0, Z+
    2418:	0d 92       	st	X+, r0
    241a:	a6 3b       	cpi	r26, 0xB6	; 182
    241c:	b1 07       	cpc	r27, r17
    241e:	d9 f7       	brne	.-10     	; 0x2416 <__do_copy_data+0x10>

00002420 <__do_clear_bss>:
    2420:	20 e4       	ldi	r18, 0x40	; 64
    2422:	a6 eb       	ldi	r26, 0xB6	; 182
    2424:	b0 e4       	ldi	r27, 0x40	; 64
    2426:	01 c0       	rjmp	.+2      	; 0x242a <.do_clear_bss_start>

00002428 <.do_clear_bss_loop>:
    2428:	1d 92       	st	X+, r1

0000242a <.do_clear_bss_start>:
    242a:	a0 3f       	cpi	r26, 0xF0	; 240
    242c:	b2 07       	cpc	r27, r18
    242e:	e1 f7       	brne	.-8      	; 0x2428 <.do_clear_bss_loop>
    2430:	0e 94 60 18 	call	0x30c0	; 0x30c0 <main>
    2434:	0c 94 38 1d 	jmp	0x3a70	; 0x3a70 <_exit>

00002438 <__bad_interrupt>:
    2438:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000243c <reverse>:
{
	for (uint8_t i = 0; i < arSize; i++)
	{
		array[i] = c;
	}
}
    243c:	61 50       	subi	r22, 0x01	; 1
    243e:	71 09       	sbc	r23, r1
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	0e c0       	rjmp	.+28     	; 0x2462 <reverse+0x26>
    2446:	dc 01       	movw	r26, r24
    2448:	a2 0f       	add	r26, r18
    244a:	b3 1f       	adc	r27, r19
    244c:	4c 91       	ld	r20, X
    244e:	fc 01       	movw	r30, r24
    2450:	e6 0f       	add	r30, r22
    2452:	f7 1f       	adc	r31, r23
    2454:	50 81       	ld	r21, Z
    2456:	5c 93       	st	X, r21
    2458:	40 83       	st	Z, r20
    245a:	2f 5f       	subi	r18, 0xFF	; 255
    245c:	3f 4f       	sbci	r19, 0xFF	; 255
    245e:	61 50       	subi	r22, 0x01	; 1
    2460:	71 09       	sbc	r23, r1
    2462:	26 17       	cp	r18, r22
    2464:	37 07       	cpc	r19, r23
    2466:	7c f3       	brlt	.-34     	; 0x2446 <reverse+0xa>
    2468:	08 95       	ret

0000246a <intToStr>:
    246a:	cf 92       	push	r12
    246c:	df 92       	push	r13
    246e:	ef 92       	push	r14
    2470:	ff 92       	push	r15
    2472:	0f 93       	push	r16
    2474:	1f 93       	push	r17
    2476:	cf 93       	push	r28
    2478:	df 93       	push	r29
    247a:	8a 01       	movw	r16, r20
    247c:	69 01       	movw	r12, r18
    247e:	c0 e0       	ldi	r28, 0x00	; 0
    2480:	d0 e0       	ldi	r29, 0x00	; 0
    2482:	11 c0       	rjmp	.+34     	; 0x24a6 <intToStr+0x3c>
    2484:	78 01       	movw	r14, r16
    2486:	ec 0e       	add	r14, r28
    2488:	fd 1e       	adc	r15, r29
    248a:	2a e0       	ldi	r18, 0x0A	; 10
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e0       	ldi	r20, 0x00	; 0
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <__divmodsi4>
    2496:	60 5d       	subi	r22, 0xD0	; 208
    2498:	f7 01       	movw	r30, r14
    249a:	60 83       	st	Z, r22
    249c:	62 2f       	mov	r22, r18
    249e:	73 2f       	mov	r23, r19
    24a0:	84 2f       	mov	r24, r20
    24a2:	95 2f       	mov	r25, r21
    24a4:	21 96       	adiw	r28, 0x01	; 1
    24a6:	61 15       	cp	r22, r1
    24a8:	71 05       	cpc	r23, r1
    24aa:	81 05       	cpc	r24, r1
    24ac:	91 05       	cpc	r25, r1
    24ae:	51 f7       	brne	.-44     	; 0x2484 <intToStr+0x1a>
    24b0:	06 c0       	rjmp	.+12     	; 0x24be <intToStr+0x54>
    24b2:	f8 01       	movw	r30, r16
    24b4:	ec 0f       	add	r30, r28
    24b6:	fd 1f       	adc	r31, r29
    24b8:	80 e3       	ldi	r24, 0x30	; 48
    24ba:	80 83       	st	Z, r24
    24bc:	21 96       	adiw	r28, 0x01	; 1
    24be:	cc 15       	cp	r28, r12
    24c0:	dd 05       	cpc	r29, r13
    24c2:	bc f3       	brlt	.-18     	; 0x24b2 <intToStr+0x48>
    24c4:	be 01       	movw	r22, r28
    24c6:	c8 01       	movw	r24, r16
    24c8:	0e 94 1e 12 	call	0x243c	; 0x243c <reverse>
    24cc:	f8 01       	movw	r30, r16
    24ce:	ec 0f       	add	r30, r28
    24d0:	fd 1f       	adc	r31, r29
    24d2:	10 82       	st	Z, r1
    24d4:	ce 01       	movw	r24, r28
    24d6:	df 91       	pop	r29
    24d8:	cf 91       	pop	r28
    24da:	1f 91       	pop	r17
    24dc:	0f 91       	pop	r16
    24de:	ff 90       	pop	r15
    24e0:	ef 90       	pop	r14
    24e2:	df 90       	pop	r13
    24e4:	cf 90       	pop	r12
    24e6:	08 95       	ret

000024e8 <ftoa>:
    24e8:	8f 92       	push	r8
    24ea:	9f 92       	push	r9
    24ec:	af 92       	push	r10
    24ee:	bf 92       	push	r11
    24f0:	cf 92       	push	r12
    24f2:	df 92       	push	r13
    24f4:	ef 92       	push	r14
    24f6:	ff 92       	push	r15
    24f8:	0f 93       	push	r16
    24fa:	1f 93       	push	r17
    24fc:	cf 93       	push	r28
    24fe:	df 93       	push	r29
    2500:	6b 01       	movw	r12, r22
    2502:	7c 01       	movw	r14, r24
    2504:	8a 01       	movw	r16, r20
    2506:	e9 01       	movw	r28, r18
    2508:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__fixsfsi>
    250c:	4b 01       	movw	r8, r22
    250e:	5c 01       	movw	r10, r24
    2510:	07 2e       	mov	r0, r23
    2512:	00 0c       	add	r0, r0
    2514:	88 0b       	sbc	r24, r24
    2516:	99 0b       	sbc	r25, r25
    2518:	0e 94 19 1a 	call	0x3432	; 0x3432 <__floatsisf>
    251c:	9b 01       	movw	r18, r22
    251e:	ac 01       	movw	r20, r24
    2520:	c7 01       	movw	r24, r14
    2522:	b6 01       	movw	r22, r12
    2524:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__subsf3>
    2528:	6b 01       	movw	r12, r22
    252a:	7c 01       	movw	r14, r24
    252c:	b4 01       	movw	r22, r8
    252e:	99 20       	and	r9, r9
    2530:	24 f4       	brge	.+8      	; 0x253a <ftoa+0x52>
    2532:	66 27       	eor	r22, r22
    2534:	77 27       	eor	r23, r23
    2536:	68 19       	sub	r22, r8
    2538:	79 09       	sbc	r23, r9
    253a:	07 2e       	mov	r0, r23
    253c:	00 0c       	add	r0, r0
    253e:	88 0b       	sbc	r24, r24
    2540:	99 0b       	sbc	r25, r25
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	a8 01       	movw	r20, r16
    2548:	0e 94 35 12 	call	0x246a	; 0x246a <intToStr>
    254c:	5c 01       	movw	r10, r24
    254e:	20 97       	sbiw	r28, 0x00	; 0
    2550:	81 f1       	breq	.+96     	; 0x25b2 <ftoa+0xca>
    2552:	f8 01       	movw	r30, r16
    2554:	e8 0f       	add	r30, r24
    2556:	f9 1f       	adc	r31, r25
    2558:	8e e2       	ldi	r24, 0x2E	; 46
    255a:	80 83       	st	Z, r24
    255c:	be 01       	movw	r22, r28
    255e:	0d 2e       	mov	r0, r29
    2560:	00 0c       	add	r0, r0
    2562:	88 0b       	sbc	r24, r24
    2564:	99 0b       	sbc	r25, r25
    2566:	0e 94 19 1a 	call	0x3432	; 0x3432 <__floatsisf>
    256a:	9b 01       	movw	r18, r22
    256c:	ac 01       	movw	r20, r24
    256e:	60 e0       	ldi	r22, 0x00	; 0
    2570:	70 e0       	ldi	r23, 0x00	; 0
    2572:	80 e2       	ldi	r24, 0x20	; 32
    2574:	91 e4       	ldi	r25, 0x41	; 65
    2576:	0e 94 3b 1b 	call	0x3676	; 0x3676 <pow>
    257a:	9b 01       	movw	r18, r22
    257c:	ac 01       	movw	r20, r24
    257e:	c7 01       	movw	r24, r14
    2580:	b6 01       	movw	r22, r12
    2582:	0e 94 ce 1a 	call	0x359c	; 0x359c <__mulsf3>
    2586:	2f ef       	ldi	r18, 0xFF	; 255
    2588:	a2 1a       	sub	r10, r18
    258a:	b2 0a       	sbc	r11, r18
    258c:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__fixsfsi>
    2590:	9b 01       	movw	r18, r22
    2592:	77 23       	and	r23, r23
    2594:	24 f4       	brge	.+8      	; 0x259e <ftoa+0xb6>
    2596:	22 27       	eor	r18, r18
    2598:	33 27       	eor	r19, r19
    259a:	26 1b       	sub	r18, r22
    259c:	37 0b       	sbc	r19, r23
    259e:	a8 01       	movw	r20, r16
    25a0:	4a 0d       	add	r20, r10
    25a2:	5b 1d       	adc	r21, r11
    25a4:	b9 01       	movw	r22, r18
    25a6:	33 0f       	add	r19, r19
    25a8:	88 0b       	sbc	r24, r24
    25aa:	99 0b       	sbc	r25, r25
    25ac:	9e 01       	movw	r18, r28
    25ae:	0e 94 35 12 	call	0x246a	; 0x246a <intToStr>
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	1f 91       	pop	r17
    25b8:	0f 91       	pop	r16
    25ba:	ff 90       	pop	r15
    25bc:	ef 90       	pop	r14
    25be:	df 90       	pop	r13
    25c0:	cf 90       	pop	r12
    25c2:	bf 90       	pop	r11
    25c4:	af 90       	pop	r10
    25c6:	9f 90       	pop	r9
    25c8:	8f 90       	pop	r8
    25ca:	08 95       	ret

000025cc <USART1_init>:
    25cc:	e0 e4       	ldi	r30, 0x40	; 64
    25ce:	f4 e0       	ldi	r31, 0x04	; 4
    25d0:	20 81       	ld	r18, Z
    25d2:	2d 7f       	andi	r18, 0xFD	; 253
    25d4:	20 83       	st	Z, r18
    25d6:	20 81       	ld	r18, Z
    25d8:	21 60       	ori	r18, 0x01	; 1
    25da:	20 83       	st	Z, r18
    25dc:	bc 01       	movw	r22, r24
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	0e 94 17 1a 	call	0x342e	; 0x342e <__floatunsisf>
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e8       	ldi	r20, 0x80	; 128
    25ec:	51 e4       	ldi	r21, 0x41	; 65
    25ee:	0e 94 ce 1a 	call	0x359c	; 0x359c <__mulsf3>
    25f2:	9b 01       	movw	r18, r22
    25f4:	ac 01       	movw	r20, r24
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	7b e1       	ldi	r23, 0x1B	; 27
    25fa:	87 eb       	ldi	r24, 0xB7	; 183
    25fc:	9e e4       	ldi	r25, 0x4E	; 78
    25fe:	0e 94 6f 19 	call	0x32de	; 0x32de <__divsf3>
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	40 e0       	ldi	r20, 0x00	; 0
    2608:	5f e3       	ldi	r21, 0x3F	; 63
    260a:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__addsf3>
    260e:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__fixunssfsi>
    2612:	e0 e2       	ldi	r30, 0x20	; 32
    2614:	f8 e0       	ldi	r31, 0x08	; 8
    2616:	60 87       	std	Z+8, r22	; 0x08
    2618:	71 87       	std	Z+9, r23	; 0x09
    261a:	86 81       	ldd	r24, Z+6	; 0x06
    261c:	80 6c       	ori	r24, 0xC0	; 192
    261e:	86 83       	std	Z+6, r24	; 0x06
    2620:	08 95       	ret

00002622 <USART1_sendChar>:
    2622:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7e0824>
    2626:	95 ff       	sbrs	r25, 5
    2628:	fc cf       	rjmp	.-8      	; 0x2622 <USART1_sendChar>
    262a:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
    262e:	08 95       	ret

00002630 <USART1_sendString>:
    2630:	0f 93       	push	r16
    2632:	1f 93       	push	r17
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	8c 01       	movw	r16, r24
    263a:	c0 e0       	ldi	r28, 0x00	; 0
    263c:	d0 e0       	ldi	r29, 0x00	; 0
    263e:	07 c0       	rjmp	.+14     	; 0x264e <USART1_sendString+0x1e>
    2640:	f8 01       	movw	r30, r16
    2642:	ec 0f       	add	r30, r28
    2644:	fd 1f       	adc	r31, r29
    2646:	80 81       	ld	r24, Z
    2648:	0e 94 11 13 	call	0x2622	; 0x2622 <USART1_sendChar>
    264c:	21 96       	adiw	r28, 0x01	; 1
    264e:	f8 01       	movw	r30, r16
    2650:	01 90       	ld	r0, Z+
    2652:	00 20       	and	r0, r0
    2654:	e9 f7       	brne	.-6      	; 0x2650 <USART1_sendString+0x20>
    2656:	31 97       	sbiw	r30, 0x01	; 1
    2658:	e0 1b       	sub	r30, r16
    265a:	f1 0b       	sbc	r31, r17
    265c:	ce 17       	cp	r28, r30
    265e:	df 07       	cpc	r29, r31
    2660:	78 f3       	brcs	.-34     	; 0x2640 <USART1_sendString+0x10>
    2662:	8a e0       	ldi	r24, 0x0A	; 10
    2664:	0e 94 11 13 	call	0x2622	; 0x2622 <USART1_sendChar>
    2668:	df 91       	pop	r29
    266a:	cf 91       	pop	r28
    266c:	1f 91       	pop	r17
    266e:	0f 91       	pop	r16
    2670:	08 95       	ret

00002672 <USART1_sendInt>:
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	4a eb       	ldi	r20, 0xBA	; 186
    2678:	50 e4       	ldi	r21, 0x40	; 64
    267a:	0e 94 35 12 	call	0x246a	; 0x246a <intToStr>
    267e:	8a eb       	ldi	r24, 0xBA	; 186
    2680:	90 e4       	ldi	r25, 0x40	; 64
    2682:	0e 94 18 13 	call	0x2630	; 0x2630 <USART1_sendString>
    2686:	08 95       	ret

00002688 <USART1_sendFloat>:
    2688:	9a 01       	movw	r18, r20
    268a:	4a eb       	ldi	r20, 0xBA	; 186
    268c:	50 e4       	ldi	r21, 0x40	; 64
    268e:	0e 94 74 12 	call	0x24e8	; 0x24e8 <ftoa>
    2692:	8a eb       	ldi	r24, 0xBA	; 186
    2694:	90 e4       	ldi	r25, 0x40	; 64
    2696:	0e 94 18 13 	call	0x2630	; 0x2630 <USART1_sendString>
    269a:	08 95       	ret

0000269c <SPI_0_init>:
    269c:	e0 e0       	ldi	r30, 0x00	; 0
    269e:	f4 e0       	ldi	r31, 0x04	; 4
    26a0:	80 81       	ld	r24, Z
    26a2:	80 68       	ori	r24, 0x80	; 128
    26a4:	80 83       	st	Z, r24
    26a6:	a4 e0       	ldi	r26, 0x04	; 4
    26a8:	b4 e0       	ldi	r27, 0x04	; 4
    26aa:	8c 91       	ld	r24, X
    26ac:	80 68       	ori	r24, 0x80	; 128
    26ae:	8c 93       	st	X, r24
    26b0:	80 81       	ld	r24, Z
    26b2:	80 61       	ori	r24, 0x10	; 16
    26b4:	80 83       	st	Z, r24
    26b6:	80 81       	ld	r24, Z
    26b8:	8f 7d       	andi	r24, 0xDF	; 223
    26ba:	80 83       	st	Z, r24
    26bc:	80 81       	ld	r24, Z
    26be:	80 64       	ori	r24, 0x40	; 64
    26c0:	80 83       	st	Z, r24
    26c2:	e0 e4       	ldi	r30, 0x40	; 64
    26c4:	f9 e0       	ldi	r31, 0x09	; 9
    26c6:	80 81       	ld	r24, Z
    26c8:	80 63       	ori	r24, 0x30	; 48
    26ca:	80 83       	st	Z, r24
    26cc:	80 81       	ld	r24, Z
    26ce:	81 60       	ori	r24, 0x01	; 1
    26d0:	80 83       	st	Z, r24
    26d2:	8c 91       	ld	r24, X
    26d4:	80 68       	ori	r24, 0x80	; 128
    26d6:	8c 93       	st	X, r24
    26d8:	08 95       	ret

000026da <SPI_0_send_char>:
    26da:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
    26de:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
    26e2:	88 23       	and	r24, r24
    26e4:	e4 f7       	brge	.-8      	; 0x26de <SPI_0_send_char+0x4>
    26e6:	08 95       	ret

000026e8 <I2C_0_stop_transmission>:
    26e8:	e0 e0       	ldi	r30, 0x00	; 0
    26ea:	f9 e0       	ldi	r31, 0x09	; 9
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	85 83       	std	Z+5, r24	; 0x05
    26f0:	83 e0       	ldi	r24, 0x03	; 3
    26f2:	84 83       	std	Z+4, r24	; 0x04
    26f4:	08 95       	ret

000026f6 <I2C_0_initialization>:
    26f6:	e0 e0       	ldi	r30, 0x00	; 0
    26f8:	f9 e0       	ldi	r31, 0x09	; 9
    26fa:	80 81       	ld	r24, Z
    26fc:	8f 7e       	andi	r24, 0xEF	; 239
    26fe:	80 83       	st	Z, r24
    2700:	80 81       	ld	r24, Z
    2702:	83 7f       	andi	r24, 0xF3	; 243
    2704:	80 83       	st	Z, r24
    2706:	80 81       	ld	r24, Z
    2708:	8d 7f       	andi	r24, 0xFD	; 253
    270a:	80 83       	st	Z, r24
    270c:	08 95       	ret

0000270e <I2C_0_master_initialization>:
    270e:	e0 e0       	ldi	r30, 0x00	; 0
    2710:	f9 e0       	ldi	r31, 0x09	; 9
    2712:	87 e6       	ldi	r24, 0x67	; 103
    2714:	86 83       	std	Z+6, r24	; 0x06
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	85 83       	std	Z+5, r24	; 0x05
    271a:	83 81       	ldd	r24, Z+3	; 0x03
    271c:	8a 60       	ori	r24, 0x0A	; 10
    271e:	83 83       	std	Z+3, r24	; 0x03
    2720:	83 81       	ldd	r24, Z+3	; 0x03
    2722:	81 60       	ori	r24, 0x01	; 1
    2724:	83 83       	std	Z+3, r24	; 0x03
    2726:	08 95       	ret

00002728 <I2C_0_sendAddress>:
    2728:	cf 93       	push	r28
    272a:	df 93       	push	r29
    272c:	c8 2f       	mov	r28, r24
    272e:	d6 2f       	mov	r29, r22
    2730:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    2734:	83 70       	andi	r24, 0x03	; 3
    2736:	83 30       	cpi	r24, 0x03	; 3
    2738:	89 f4       	brne	.+34     	; 0x275c <I2C_0_sendAddress+0x34>
    273a:	8e e3       	ldi	r24, 0x3E	; 62
    273c:	90 e4       	ldi	r25, 0x40	; 64
    273e:	0e 94 18 13 	call	0x2630	; 0x2630 <USART1_sendString>
    2742:	20 e6       	ldi	r18, 0x60	; 96
    2744:	3a ee       	ldi	r19, 0xEA	; 234
    2746:	01 c0       	rjmp	.+2      	; 0x274a <I2C_0_sendAddress+0x22>
    2748:	9c 01       	movw	r18, r24
    274a:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    274e:	83 70       	andi	r24, 0x03	; 3
    2750:	83 30       	cpi	r24, 0x03	; 3
    2752:	21 f4       	brne	.+8      	; 0x275c <I2C_0_sendAddress+0x34>
    2754:	c9 01       	movw	r24, r18
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	23 2b       	or	r18, r19
    275a:	b1 f7       	brne	.-20     	; 0x2748 <I2C_0_sendAddress+0x20>
    275c:	85 e0       	ldi	r24, 0x05	; 5
    275e:	80 93 05 09 	sts	0x0905, r24	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    2762:	dd 23       	and	r29, r29
    2764:	41 f0       	breq	.+16     	; 0x2776 <I2C_0_sendAddress+0x4e>
    2766:	8c 2f       	mov	r24, r28
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	88 0f       	add	r24, r24
    276c:	99 1f       	adc	r25, r25
    276e:	81 60       	ori	r24, 0x01	; 1
    2770:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
    2774:	04 c0       	rjmp	.+8      	; 0x277e <I2C_0_sendAddress+0x56>
    2776:	8c 2f       	mov	r24, r28
    2778:	88 0f       	add	r24, r24
    277a:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
    277e:	80 e6       	ldi	r24, 0x60	; 96
    2780:	9a ee       	ldi	r25, 0xEA	; 234
    2782:	20 91 05 09 	lds	r18, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    2786:	24 ff       	sbrs	r18, 4
    2788:	06 c0       	rjmp	.+12     	; 0x2796 <I2C_0_sendAddress+0x6e>
    278a:	20 91 05 09 	lds	r18, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    278e:	26 fd       	sbrc	r18, 6
    2790:	02 c0       	rjmp	.+4      	; 0x2796 <I2C_0_sendAddress+0x6e>
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	b1 f7       	brne	.-20     	; 0x2782 <I2C_0_sendAddress+0x5a>
    2796:	89 2b       	or	r24, r25
    2798:	21 f4       	brne	.+8      	; 0x27a2 <I2C_0_sendAddress+0x7a>
    279a:	88 e4       	ldi	r24, 0x48	; 72
    279c:	90 e4       	ldi	r25, 0x40	; 64
    279e:	0e 94 18 13 	call	0x2630	; 0x2630 <USART1_sendString>
    27a2:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    27a6:	82 ff       	sbrs	r24, 2
    27a8:	04 c0       	rjmp	.+8      	; 0x27b2 <I2C_0_sendAddress+0x8a>
    27aa:	80 e5       	ldi	r24, 0x50	; 80
    27ac:	90 e4       	ldi	r25, 0x40	; 64
    27ae:	0e 94 18 13 	call	0x2630	; 0x2630 <USART1_sendString>
    27b2:	df 91       	pop	r29
    27b4:	cf 91       	pop	r28
    27b6:	08 95       	ret

000027b8 <I2C_0_recieveData>:
    27b8:	cf 93       	push	r28
    27ba:	df 93       	push	r29
    27bc:	c0 e6       	ldi	r28, 0x60	; 96
    27be:	da ee       	ldi	r29, 0xEA	; 234
    27c0:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    27c4:	88 23       	and	r24, r24
    27c6:	14 f0       	brlt	.+4      	; 0x27cc <I2C_0_recieveData+0x14>
    27c8:	21 97       	sbiw	r28, 0x01	; 1
    27ca:	d1 f7       	brne	.-12     	; 0x27c0 <I2C_0_recieveData+0x8>
    27cc:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    27d0:	83 fd       	sbrc	r24, 3
    27d2:	04 c0       	rjmp	.+8      	; 0x27dc <I2C_0_recieveData+0x24>
    27d4:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    27d8:	82 ff       	sbrs	r24, 2
    27da:	06 c0       	rjmp	.+12     	; 0x27e8 <I2C_0_recieveData+0x30>
    27dc:	83 e8       	ldi	r24, 0x83	; 131
    27de:	90 e4       	ldi	r25, 0x40	; 64
    27e0:	0e 94 18 13 	call	0x2630	; 0x2630 <USART1_sendString>
    27e4:	0e 94 74 13 	call	0x26e8	; 0x26e8 <I2C_0_stop_transmission>
    27e8:	cd 2b       	or	r28, r29
    27ea:	21 f4       	brne	.+8      	; 0x27f4 <I2C_0_recieveData+0x3c>
    27ec:	88 e4       	ldi	r24, 0x48	; 72
    27ee:	90 e4       	ldi	r25, 0x40	; 64
    27f0:	0e 94 18 13 	call	0x2630	; 0x2630 <USART1_sendString>
    27f4:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    27f8:	df 91       	pop	r29
    27fa:	cf 91       	pop	r28
    27fc:	08 95       	ret

000027fe <Sensor_init>:
    27fe:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <I2C_0_initialization>
    2802:	0e 94 87 13 	call	0x270e	; 0x270e <I2C_0_master_initialization>
    2806:	61 e0       	ldi	r22, 0x01	; 1
    2808:	88 e7       	ldi	r24, 0x78	; 120
    280a:	0e 94 94 13 	call	0x2728	; 0x2728 <I2C_0_sendAddress>
    280e:	08 95       	ret

00002810 <pressureRead>:
    2810:	cf 92       	push	r12
    2812:	df 92       	push	r13
    2814:	ef 92       	push	r14
    2816:	ff 92       	push	r15
    2818:	cf 93       	push	r28
    281a:	df 93       	push	r29
    281c:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <I2C_0_recieveData>
    2820:	8f 77       	andi	r24, 0x7F	; 127
    2822:	c8 2f       	mov	r28, r24
    2824:	d0 e0       	ldi	r29, 0x00	; 0
    2826:	dc 2f       	mov	r29, r28
    2828:	cc 27       	eor	r28, r28
    282a:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <I2C_0_recieveData>
    282e:	c8 2b       	or	r28, r24
    2830:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <I2C_0_recieveData>
    2834:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <I2C_0_recieveData>
    2838:	be 01       	movw	r22, r28
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	0e 94 17 1a 	call	0x342e	; 0x342e <__floatunsisf>
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 ed       	ldi	r19, 0xD0	; 208
    2846:	4c e4       	ldi	r20, 0x4C	; 76
    2848:	55 e4       	ldi	r21, 0x45	; 69
    284a:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__subsf3>
    284e:	2b e7       	ldi	r18, 0x7B	; 123
    2850:	34 e1       	ldi	r19, 0x14	; 20
    2852:	43 e8       	ldi	r20, 0x83	; 131
    2854:	53 e4       	ldi	r21, 0x43	; 67
    2856:	0e 94 6f 19 	call	0x32de	; 0x32de <__divsf3>
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	a9 01       	movw	r20, r18
    2860:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__addsf3>
    2864:	6b 01       	movw	r12, r22
    2866:	7c 01       	movw	r14, r24
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	48 ec       	ldi	r20, 0xC8	; 200
    286e:	52 e4       	ldi	r21, 0x42	; 66
    2870:	0e 94 c9 1a 	call	0x3592	; 0x3592 <__gesf2>
    2874:	18 16       	cp	r1, r24
    2876:	1c f4       	brge	.+6      	; 0x287e <pressureRead+0x6e>
    2878:	c1 2c       	mov	r12, r1
    287a:	d1 2c       	mov	r13, r1
    287c:	76 01       	movw	r14, r12
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	a9 01       	movw	r20, r18
    2884:	c7 01       	movw	r24, r14
    2886:	b6 01       	movw	r22, r12
    2888:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__cmpsf2>
    288c:	18 16       	cp	r1, r24
    288e:	1c f0       	brlt	.+6      	; 0x2896 <pressureRead+0x86>
    2890:	c1 2c       	mov	r12, r1
    2892:	d1 2c       	mov	r13, r1
    2894:	76 01       	movw	r14, r12
    2896:	c7 01       	movw	r24, r14
    2898:	b6 01       	movw	r22, r12
    289a:	df 91       	pop	r29
    289c:	cf 91       	pop	r28
    289e:	ff 90       	pop	r15
    28a0:	ef 90       	pop	r14
    28a2:	df 90       	pop	r13
    28a4:	cf 90       	pop	r12
    28a6:	08 95       	ret

000028a8 <ADC0_init>:
    28a8:	82 e8       	ldi	r24, 0x82	; 130
    28aa:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    28ae:	e0 e0       	ldi	r30, 0x00	; 0
    28b0:	f6 e0       	ldi	r31, 0x06	; 6
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	82 83       	std	Z+2, r24	; 0x02
    28b6:	80 83       	st	Z, r24
    28b8:	08 95       	ret

000028ba <ADC0_start>:
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
    28c0:	08 95       	ret

000028c2 <ADC0_read>:
    28c2:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    28c6:	0e 94 5d 14 	call	0x28ba	; 0x28ba <ADC0_start>
    28ca:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7e060d>
    28ce:	80 ff       	sbrs	r24, 0
    28d0:	fc cf       	rjmp	.-8      	; 0x28ca <ADC0_read+0x8>
    28d2:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
    28d6:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
    28da:	08 95       	ret

000028dc <ST7586_data>:
    28dc:	0f 93       	push	r16
    28de:	1f 93       	push	r17
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	8c 01       	movw	r16, r24
    28e6:	d6 2f       	mov	r29, r22
    28e8:	e4 e0       	ldi	r30, 0x04	; 4
    28ea:	f4 e0       	ldi	r31, 0x04	; 4
    28ec:	80 81       	ld	r24, Z
    28ee:	8f 77       	andi	r24, 0x7F	; 127
    28f0:	80 83       	st	Z, r24
    28f2:	c0 e0       	ldi	r28, 0x00	; 0
    28f4:	07 c0       	rjmp	.+14     	; 0x2904 <ST7586_data+0x28>
    28f6:	f8 01       	movw	r30, r16
    28f8:	ec 0f       	add	r30, r28
    28fa:	f1 1d       	adc	r31, r1
    28fc:	80 81       	ld	r24, Z
    28fe:	0e 94 6d 13 	call	0x26da	; 0x26da <SPI_0_send_char>
    2902:	cf 5f       	subi	r28, 0xFF	; 255
    2904:	cd 17       	cp	r28, r29
    2906:	b8 f3       	brcs	.-18     	; 0x28f6 <ST7586_data+0x1a>
    2908:	e4 e0       	ldi	r30, 0x04	; 4
    290a:	f4 e0       	ldi	r31, 0x04	; 4
    290c:	80 81       	ld	r24, Z
    290e:	80 68       	ori	r24, 0x80	; 128
    2910:	80 83       	st	Z, r24
    2912:	df 91       	pop	r29
    2914:	cf 91       	pop	r28
    2916:	1f 91       	pop	r17
    2918:	0f 91       	pop	r16
    291a:	08 95       	ret

0000291c <ST7586_cmd>:
    291c:	0f 93       	push	r16
    291e:	1f 93       	push	r17
    2920:	cf 93       	push	r28
    2922:	df 93       	push	r29
    2924:	c4 e0       	ldi	r28, 0x04	; 4
    2926:	d4 e0       	ldi	r29, 0x04	; 4
    2928:	98 81       	ld	r25, Y
    292a:	9f 77       	andi	r25, 0x7F	; 127
    292c:	98 83       	st	Y, r25
    292e:	00 e2       	ldi	r16, 0x20	; 32
    2930:	14 e0       	ldi	r17, 0x04	; 4
    2932:	f8 01       	movw	r30, r16
    2934:	94 81       	ldd	r25, Z+4	; 0x04
    2936:	9f 7e       	andi	r25, 0xEF	; 239
    2938:	94 83       	std	Z+4, r25	; 0x04
    293a:	0e 94 6d 13 	call	0x26da	; 0x26da <SPI_0_send_char>
    293e:	f8 01       	movw	r30, r16
    2940:	84 81       	ldd	r24, Z+4	; 0x04
    2942:	80 61       	ori	r24, 0x10	; 16
    2944:	84 83       	std	Z+4, r24	; 0x04
    2946:	88 81       	ld	r24, Y
    2948:	80 68       	ori	r24, 0x80	; 128
    294a:	88 83       	st	Y, r24
    294c:	df 91       	pop	r29
    294e:	cf 91       	pop	r28
    2950:	1f 91       	pop	r17
    2952:	0f 91       	pop	r16
    2954:	08 95       	ret

00002956 <ST7586_setDispPosition>:
    2956:	cf 92       	push	r12
    2958:	df 92       	push	r13
    295a:	ef 92       	push	r14
    295c:	ff 92       	push	r15
    295e:	0f 93       	push	r16
    2960:	1f 93       	push	r17
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	00 d0       	rcall	.+0      	; 0x2968 <ST7586_setDispPosition+0x12>
    2968:	00 d0       	rcall	.+0      	; 0x296a <ST7586_setDispPosition+0x14>
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
    296e:	80 39       	cpi	r24, 0x90	; 144
    2970:	31 e0       	ldi	r19, 0x01	; 1
    2972:	93 07       	cpc	r25, r19
    2974:	a8 f5       	brcc	.+106    	; 0x29e0 <ST7586_setDispPosition+0x8a>
    2976:	40 39       	cpi	r20, 0x90	; 144
    2978:	31 e0       	ldi	r19, 0x01	; 1
    297a:	53 07       	cpc	r21, r19
    297c:	88 f5       	brcc	.+98     	; 0x29e0 <ST7586_setDispPosition+0x8a>
    297e:	69 3c       	cpi	r22, 0xC9	; 201
    2980:	78 f5       	brcc	.+94     	; 0x29e0 <ST7586_setDispPosition+0x8a>
    2982:	29 3c       	cpi	r18, 0xC9	; 201
    2984:	68 f5       	brcc	.+90     	; 0x29e0 <ST7586_setDispPosition+0x8a>
    2986:	48 17       	cp	r20, r24
    2988:	59 07       	cpc	r21, r25
    298a:	50 f1       	brcs	.+84     	; 0x29e0 <ST7586_setDispPosition+0x8a>
    298c:	26 17       	cp	r18, r22
    298e:	40 f1       	brcs	.+80     	; 0x29e0 <ST7586_setDispPosition+0x8a>
    2990:	c2 2e       	mov	r12, r18
    2992:	7a 01       	movw	r14, r20
    2994:	d6 2e       	mov	r13, r22
    2996:	8c 01       	movw	r16, r24
    2998:	8a e2       	ldi	r24, 0x2A	; 42
    299a:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
    299e:	19 82       	std	Y+1, r1	; 0x01
    29a0:	98 01       	movw	r18, r16
    29a2:	ab ea       	ldi	r26, 0xAB	; 171
    29a4:	ba ea       	ldi	r27, 0xAA	; 170
    29a6:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__umulhisi3>
    29aa:	96 95       	lsr	r25
    29ac:	87 95       	ror	r24
    29ae:	8a 83       	std	Y+2, r24	; 0x02
    29b0:	1b 82       	std	Y+3, r1	; 0x03
    29b2:	97 01       	movw	r18, r14
    29b4:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__umulhisi3>
    29b8:	96 95       	lsr	r25
    29ba:	87 95       	ror	r24
    29bc:	8c 83       	std	Y+4, r24	; 0x04
    29be:	64 e0       	ldi	r22, 0x04	; 4
    29c0:	ce 01       	movw	r24, r28
    29c2:	01 96       	adiw	r24, 0x01	; 1
    29c4:	0e 94 6e 14 	call	0x28dc	; 0x28dc <ST7586_data>
    29c8:	8b e2       	ldi	r24, 0x2B	; 43
    29ca:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
    29ce:	19 82       	std	Y+1, r1	; 0x01
    29d0:	da 82       	std	Y+2, r13	; 0x02
    29d2:	1b 82       	std	Y+3, r1	; 0x03
    29d4:	cc 82       	std	Y+4, r12	; 0x04
    29d6:	64 e0       	ldi	r22, 0x04	; 4
    29d8:	ce 01       	movw	r24, r28
    29da:	01 96       	adiw	r24, 0x01	; 1
    29dc:	0e 94 6e 14 	call	0x28dc	; 0x28dc <ST7586_data>
    29e0:	24 96       	adiw	r28, 0x04	; 4
    29e2:	cd bf       	out	0x3d, r28	; 61
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	df 91       	pop	r29
    29e8:	cf 91       	pop	r28
    29ea:	1f 91       	pop	r17
    29ec:	0f 91       	pop	r16
    29ee:	ff 90       	pop	r15
    29f0:	ef 90       	pop	r14
    29f2:	df 90       	pop	r13
    29f4:	cf 90       	pop	r12
    29f6:	08 95       	ret

000029f8 <ST7586_fill>:
    29f8:	1f 93       	push	r17
    29fa:	cf 93       	push	r28
    29fc:	df 93       	push	r29
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	c5 58       	subi	r28, 0x85	; 133
    2a04:	d1 09       	sbc	r29, r1
    2a06:	cd bf       	out	0x3d, r28	; 61
    2a08:	de bf       	out	0x3e, r29	; 62
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	0f c0       	rjmp	.+30     	; 0x2a2c <ST7586_fill+0x34>
    2a0e:	29 2f       	mov	r18, r25
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	e8 2f       	mov	r30, r24
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	ea 50       	subi	r30, 0x0A	; 10
    2a18:	fc 4d       	sbci	r31, 0xDC	; 220
    2a1a:	e4 91       	lpm	r30, Z
    2a1c:	a1 e0       	ldi	r26, 0x01	; 1
    2a1e:	b0 e0       	ldi	r27, 0x00	; 0
    2a20:	ac 0f       	add	r26, r28
    2a22:	bd 1f       	adc	r27, r29
    2a24:	a2 0f       	add	r26, r18
    2a26:	b3 1f       	adc	r27, r19
    2a28:	ec 93       	st	X, r30
    2a2a:	9f 5f       	subi	r25, 0xFF	; 255
    2a2c:	95 38       	cpi	r25, 0x85	; 133
    2a2e:	78 f3       	brcs	.-34     	; 0x2a0e <ST7586_fill+0x16>
    2a30:	27 ec       	ldi	r18, 0xC7	; 199
    2a32:	4f e8       	ldi	r20, 0x8F	; 143
    2a34:	51 e0       	ldi	r21, 0x01	; 1
    2a36:	60 e0       	ldi	r22, 0x00	; 0
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	0e 94 ab 14 	call	0x2956	; 0x2956 <ST7586_setDispPosition>
    2a40:	8c e2       	ldi	r24, 0x2C	; 44
    2a42:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
    2a46:	10 e0       	ldi	r17, 0x00	; 0
    2a48:	06 c0       	rjmp	.+12     	; 0x2a56 <ST7586_fill+0x5e>
    2a4a:	65 e8       	ldi	r22, 0x85	; 133
    2a4c:	ce 01       	movw	r24, r28
    2a4e:	01 96       	adiw	r24, 0x01	; 1
    2a50:	0e 94 6e 14 	call	0x28dc	; 0x28dc <ST7586_data>
    2a54:	1f 5f       	subi	r17, 0xFF	; 255
    2a56:	18 3c       	cpi	r17, 0xC8	; 200
    2a58:	c0 f3       	brcs	.-16     	; 0x2a4a <ST7586_fill+0x52>
    2a5a:	cb 57       	subi	r28, 0x7B	; 123
    2a5c:	df 4f       	sbci	r29, 0xFF	; 255
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	de bf       	out	0x3e, r29	; 62
    2a62:	df 91       	pop	r29
    2a64:	cf 91       	pop	r28
    2a66:	1f 91       	pop	r17
    2a68:	08 95       	ret

00002a6a <ST7586_init>:
    2a6a:	0f 93       	push	r16
    2a6c:	1f 93       	push	r17
    2a6e:	cf 93       	push	r28
    2a70:	df 93       	push	r29
    2a72:	00 d0       	rcall	.+0      	; 0x2a74 <ST7586_init+0xa>
    2a74:	00 d0       	rcall	.+0      	; 0x2a76 <ST7586_init+0xc>
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    2a7a:	18 2f       	mov	r17, r24
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	80 93 ee 40 	sts	0x40EE, r24	; 0x8040ee <dataSerial+0x2>
    2a82:	e4 e0       	ldi	r30, 0x04	; 4
    2a84:	f4 e0       	ldi	r31, 0x04	; 4
    2a86:	80 81       	ld	r24, Z
    2a88:	80 68       	ori	r24, 0x80	; 128
    2a8a:	80 83       	st	Z, r24
    2a8c:	e0 e2       	ldi	r30, 0x20	; 32
    2a8e:	f4 e0       	ldi	r31, 0x04	; 4
    2a90:	84 81       	ldd	r24, Z+4	; 0x04
    2a92:	80 61       	ori	r24, 0x10	; 16
    2a94:	84 83       	std	Z+4, r24	; 0x04
    2a96:	e0 e4       	ldi	r30, 0x40	; 64
    2a98:	f4 e0       	ldi	r31, 0x04	; 4
    2a9a:	84 81       	ldd	r24, Z+4	; 0x04
    2a9c:	80 62       	ori	r24, 0x20	; 32
    2a9e:	84 83       	std	Z+4, r24	; 0x04
    2aa0:	8f e2       	ldi	r24, 0x2F	; 47
    2aa2:	95 e7       	ldi	r25, 0x75	; 117
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	f1 f7       	brne	.-4      	; 0x2aa4 <ST7586_init+0x3a>
    2aa8:	00 c0       	rjmp	.+0      	; 0x2aaa <ST7586_init+0x40>
    2aaa:	00 00       	nop
    2aac:	84 81       	ldd	r24, Z+4	; 0x04
    2aae:	8f 7d       	andi	r24, 0xDF	; 223
    2ab0:	84 83       	std	Z+4, r24	; 0x04
    2ab2:	90 ea       	ldi	r25, 0xA0	; 160
    2ab4:	9a 95       	dec	r25
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <ST7586_init+0x4a>
    2ab8:	84 81       	ldd	r24, Z+4	; 0x04
    2aba:	80 62       	ori	r24, 0x20	; 32
    2abc:	84 83       	std	Z+4, r24	; 0x04
    2abe:	2f ef       	ldi	r18, 0xFF	; 255
    2ac0:	89 ec       	ldi	r24, 0xC9	; 201
    2ac2:	98 e0       	ldi	r25, 0x08	; 8
    2ac4:	21 50       	subi	r18, 0x01	; 1
    2ac6:	80 40       	sbci	r24, 0x00	; 0
    2ac8:	90 40       	sbci	r25, 0x00	; 0
    2aca:	e1 f7       	brne	.-8      	; 0x2ac4 <ST7586_init+0x5a>
    2acc:	00 c0       	rjmp	.+0      	; 0x2ace <ST7586_init+0x64>
    2ace:	00 00       	nop
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
    2ad6:	2f ef       	ldi	r18, 0xFF	; 255
    2ad8:	89 ec       	ldi	r24, 0xC9	; 201
    2ada:	98 e0       	ldi	r25, 0x08	; 8
    2adc:	21 50       	subi	r18, 0x01	; 1
    2ade:	80 40       	sbci	r24, 0x00	; 0
    2ae0:	90 40       	sbci	r25, 0x00	; 0
    2ae2:	e1 f7       	brne	.-8      	; 0x2adc <ST7586_init+0x72>
    2ae4:	00 c0       	rjmp	.+0      	; 0x2ae6 <ST7586_init+0x7c>
    2ae6:	00 00       	nop
    2ae8:	81 e1       	ldi	r24, 0x11	; 17
    2aea:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
    2aee:	88 e2       	ldi	r24, 0x28	; 40
    2af0:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
    2af4:	80 ec       	ldi	r24, 0xC0	; 192
    2af6:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
    2afa:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <display_vop>
    2afe:	90 91 08 40 	lds	r25, 0x4008	; 0x804008 <display_vop+0x1>
    2b02:	80 7f       	andi	r24, 0xF0	; 240
    2b04:	89 83       	std	Y+1, r24	; 0x01
    2b06:	9a 83       	std	Y+2, r25	; 0x02
    2b08:	62 e0       	ldi	r22, 0x02	; 2
    2b0a:	ce 01       	movw	r24, r28
    2b0c:	01 96       	adiw	r24, 0x01	; 1
    2b0e:	0e 94 6e 14 	call	0x28dc	; 0x28dc <ST7586_data>
    2b12:	83 ec       	ldi	r24, 0xC3	; 195
    2b14:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
    2b18:	05 e0       	ldi	r16, 0x05	; 5
    2b1a:	09 83       	std	Y+1, r16	; 0x01
    2b1c:	61 e0       	ldi	r22, 0x01	; 1
    2b1e:	ce 01       	movw	r24, r28
    2b20:	01 96       	adiw	r24, 0x01	; 1
    2b22:	0e 94 6e 14 	call	0x28dc	; 0x28dc <ST7586_data>
    2b26:	84 ec       	ldi	r24, 0xC4	; 196
    2b28:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
    2b2c:	09 83       	std	Y+1, r16	; 0x01
    2b2e:	61 e0       	ldi	r22, 0x01	; 1
    2b30:	ce 01       	movw	r24, r28
    2b32:	01 96       	adiw	r24, 0x01	; 1
    2b34:	0e 94 6e 14 	call	0x28dc	; 0x28dc <ST7586_data>
    2b38:	80 ed       	ldi	r24, 0xD0	; 208
    2b3a:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
    2b3e:	81 ed       	ldi	r24, 0xD1	; 209
    2b40:	89 83       	std	Y+1, r24	; 0x01
    2b42:	61 e0       	ldi	r22, 0x01	; 1
    2b44:	ce 01       	movw	r24, r28
    2b46:	01 96       	adiw	r24, 0x01	; 1
    2b48:	0e 94 6e 14 	call	0x28dc	; 0x28dc <ST7586_data>
    2b4c:	83 eb       	ldi	r24, 0xB3	; 179
    2b4e:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
    2b52:	19 82       	std	Y+1, r1	; 0x01
    2b54:	61 e0       	ldi	r22, 0x01	; 1
    2b56:	ce 01       	movw	r24, r28
    2b58:	01 96       	adiw	r24, 0x01	; 1
    2b5a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <ST7586_data>
    2b5e:	85 eb       	ldi	r24, 0xB5	; 181
    2b60:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
    2b64:	80 e8       	ldi	r24, 0x80	; 128
    2b66:	89 83       	std	Y+1, r24	; 0x01
    2b68:	61 e0       	ldi	r22, 0x01	; 1
    2b6a:	ce 01       	movw	r24, r28
    2b6c:	01 96       	adiw	r24, 0x01	; 1
    2b6e:	0e 94 6e 14 	call	0x28dc	; 0x28dc <ST7586_data>
    2b72:	81 2f       	mov	r24, r17
    2b74:	88 63       	ori	r24, 0x38	; 56
    2b76:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
    2b7a:	8a e3       	ldi	r24, 0x3A	; 58
    2b7c:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
    2b80:	82 e0       	ldi	r24, 0x02	; 2
    2b82:	89 83       	std	Y+1, r24	; 0x01
    2b84:	61 e0       	ldi	r22, 0x01	; 1
    2b86:	ce 01       	movw	r24, r28
    2b88:	01 96       	adiw	r24, 0x01	; 1
    2b8a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <ST7586_data>
    2b8e:	86 e3       	ldi	r24, 0x36	; 54
    2b90:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
    2b94:	19 82       	std	Y+1, r1	; 0x01
    2b96:	61 e0       	ldi	r22, 0x01	; 1
    2b98:	ce 01       	movw	r24, r28
    2b9a:	01 96       	adiw	r24, 0x01	; 1
    2b9c:	0e 94 6e 14 	call	0x28dc	; 0x28dc <ST7586_data>
    2ba0:	80 eb       	ldi	r24, 0xB0	; 176
    2ba2:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
    2ba6:	8f e9       	ldi	r24, 0x9F	; 159
    2ba8:	89 83       	std	Y+1, r24	; 0x01
    2baa:	61 e0       	ldi	r22, 0x01	; 1
    2bac:	ce 01       	movw	r24, r28
    2bae:	01 96       	adiw	r24, 0x01	; 1
    2bb0:	0e 94 6e 14 	call	0x28dc	; 0x28dc <ST7586_data>
    2bb4:	81 2f       	mov	r24, r17
    2bb6:	80 6f       	ori	r24, 0xF0	; 240
    2bb8:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
    2bbc:	82 e1       	ldi	r24, 0x12	; 18
    2bbe:	89 83       	std	Y+1, r24	; 0x01
    2bc0:	8b 83       	std	Y+3, r24	; 0x03
    2bc2:	8c 83       	std	Y+4, r24	; 0x04
    2bc4:	8d 83       	std	Y+5, r24	; 0x05
    2bc6:	64 e0       	ldi	r22, 0x04	; 4
    2bc8:	ce 01       	movw	r24, r28
    2bca:	01 96       	adiw	r24, 0x01	; 1
    2bcc:	0e 94 6e 14 	call	0x28dc	; 0x28dc <ST7586_data>
    2bd0:	80 e2       	ldi	r24, 0x20	; 32
    2bd2:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
    2bd6:	89 e2       	ldi	r24, 0x29	; 41
    2bd8:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <ST7586_fill>
    2be2:	24 96       	adiw	r28, 0x04	; 4
    2be4:	cd bf       	out	0x3d, r28	; 61
    2be6:	de bf       	out	0x3e, r29	; 62
    2be8:	df 91       	pop	r29
    2bea:	cf 91       	pop	r28
    2bec:	1f 91       	pop	r17
    2bee:	0f 91       	pop	r16
    2bf0:	08 95       	ret

00002bf2 <TCA0_PWM_init>:
void TCA0_PWM_init(void)
{
	//sei();
	/*		FIRST PWM on PA0 PIN		*/
	// Direction set and set output to high
	PORTA.DIR |= (1 << 0);
    2bf2:	a0 e0       	ldi	r26, 0x00	; 0
    2bf4:	b4 e0       	ldi	r27, 0x04	; 4
    2bf6:	8c 91       	ld	r24, X
    2bf8:	81 60       	ori	r24, 0x01	; 1
    2bfa:	8c 93       	st	X, r24
	PORTA.PIN0CTRL |= (1 << 3);
    2bfc:	50 96       	adiw	r26, 0x10	; 16
    2bfe:	8c 91       	ld	r24, X
    2c00:	50 97       	sbiw	r26, 0x10	; 16
    2c02:	88 60       	ori	r24, 0x08	; 8
    2c04:	50 96       	adiw	r26, 0x10	; 16
    2c06:	8c 93       	st	X, r24
    2c08:	50 97       	sbiw	r26, 0x10	; 16
	
	//PORTA.OUTSET |= (1 << 0);
	TCA0.SINGLE.PER = 3000;     // calculation for 1ms
    2c0a:	e0 e0       	ldi	r30, 0x00	; 0
    2c0c:	fa e0       	ldi	r31, 0x0A	; 10
    2c0e:	88 eb       	ldi	r24, 0xB8	; 184
    2c10:	9b e0       	ldi	r25, 0x0B	; 11
    2c12:	86 a3       	std	Z+38, r24	; 0x26
    2c14:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.CMP0 = dutyCycle1;
    2c16:	80 91 05 40 	lds	r24, 0x4005	; 0x804005 <dutyCycle1>
    2c1a:	90 91 06 40 	lds	r25, 0x4006	; 0x804006 <dutyCycle1+0x1>
    2c1e:	80 a7       	std	Z+40, r24	; 0x28
    2c20:	91 a7       	std	Z+41, r25	; 0x29
	TCA0.SINGLE.CNT = 0;
    2c22:	10 a2       	std	Z+32, r1	; 0x20
    2c24:	11 a2       	std	Z+33, r1	; 0x21

	
	TCA0.SINGLE.CTRLB |= (1 << 4); // compare 0 enable
    2c26:	81 81       	ldd	r24, Z+1	; 0x01
    2c28:	80 61       	ori	r24, 0x10	; 16
    2c2a:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SINGLE.CTRLB |= (0x3 << 0); // Single slope PWM
    2c2c:	81 81       	ldd	r24, Z+1	; 0x01
    2c2e:	83 60       	ori	r24, 0x03	; 3
    2c30:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SINGLE.CTRLA |= (1<<0); //fclk_per 1 and  Enable pwm
    2c32:	80 81       	ld	r24, Z
    2c34:	81 60       	ori	r24, 0x01	; 1
    2c36:	80 83       	st	Z, r24
	TCA0.SINGLE.CTRLA |= ((1<<1)|(1<<2)); //fclk_per 8 and  Enable pwm
    2c38:	80 81       	ld	r24, Z
    2c3a:	86 60       	ori	r24, 0x06	; 6
    2c3c:	80 83       	st	Z, r24
	
	/*		Second PWM on PA1 PIN		*/
	
	PORTA.DIR |= (1 << 1);						// Direction set and set output to high
    2c3e:	8c 91       	ld	r24, X
    2c40:	82 60       	ori	r24, 0x02	; 2
    2c42:	8c 93       	st	X, r24
	PORTA.PIN1CTRL |= (1 << 3);
    2c44:	51 96       	adiw	r26, 0x11	; 17
    2c46:	8c 91       	ld	r24, X
    2c48:	51 97       	sbiw	r26, 0x11	; 17
    2c4a:	88 60       	ori	r24, 0x08	; 8
    2c4c:	51 96       	adiw	r26, 0x11	; 17
    2c4e:	8c 93       	st	X, r24
	TCA0.SINGLE.CTRLB |= (1 << 5);				// Enable Compare Pa1
    2c50:	81 81       	ldd	r24, Z+1	; 0x01
    2c52:	80 62       	ori	r24, 0x20	; 32
    2c54:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SINGLE.CTRLA |= (1 << 1);				// Enable PWM PA1
    2c56:	80 81       	ld	r24, Z
    2c58:	82 60       	ori	r24, 0x02	; 2
    2c5a:	80 83       	st	Z, r24
	TCA0.SINGLE.CMP1 = dutyCycle2;					// Duty cycle
    2c5c:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <dutyCycle2>
    2c60:	90 91 04 40 	lds	r25, 0x4004	; 0x804004 <dutyCycle2+0x1>
    2c64:	82 a7       	std	Z+42, r24	; 0x2a
    2c66:	93 a7       	std	Z+43, r25	; 0x2b
    2c68:	08 95       	ret

00002c6a <ST7586_send_data>:
	ST7586_send_data(_data, array_length);
	//	USART1_sendString("set pixel");
}

void ST7586_send_data(uint8_t data[], uint8_t dataSize)
{
    2c6a:	0f 93       	push	r16
    2c6c:	1f 93       	push	r17
    2c6e:	cf 93       	push	r28
    2c70:	df 93       	push	r29
    2c72:	8c 01       	movw	r16, r24
    2c74:	d6 2f       	mov	r29, r22
	
	ST7586_CSLOW();
    2c76:	e4 e0       	ldi	r30, 0x04	; 4
    2c78:	f4 e0       	ldi	r31, 0x04	; 4
    2c7a:	80 81       	ld	r24, Z
    2c7c:	8f 77       	andi	r24, 0x7F	; 127
    2c7e:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < dataSize; i++)
    2c80:	c0 e0       	ldi	r28, 0x00	; 0
    2c82:	07 c0       	rjmp	.+14     	; 0x2c92 <ST7586_send_data+0x28>
	{
		ST7586_SERIALW(data[i]);
    2c84:	f8 01       	movw	r30, r16
    2c86:	ec 0f       	add	r30, r28
    2c88:	f1 1d       	adc	r31, r1
    2c8a:	80 81       	ld	r24, Z
    2c8c:	0e 94 6d 13 	call	0x26da	; 0x26da <SPI_0_send_char>

void ST7586_send_data(uint8_t data[], uint8_t dataSize)
{
	
	ST7586_CSLOW();
	for (uint8_t i = 0; i < dataSize; i++)
    2c90:	cf 5f       	subi	r28, 0xFF	; 255
    2c92:	cd 17       	cp	r28, r29
    2c94:	b8 f3       	brcs	.-18     	; 0x2c84 <ST7586_send_data+0x1a>
	{
		ST7586_SERIALW(data[i]);
	}
	ST7586_CSHIGH();
    2c96:	e4 e0       	ldi	r30, 0x04	; 4
    2c98:	f4 e0       	ldi	r31, 0x04	; 4
    2c9a:	80 81       	ld	r24, Z
    2c9c:	80 68       	ori	r24, 0x80	; 128
    2c9e:	80 83       	st	Z, r24
}
    2ca0:	df 91       	pop	r29
    2ca2:	cf 91       	pop	r28
    2ca4:	1f 91       	pop	r17
    2ca6:	0f 91       	pop	r16
    2ca8:	08 95       	ret

00002caa <__set_pixel>:
	TCA0.SINGLE.CMP1 = dutyCycle2;					// Duty cycle

}

void __set_pixel (int x1, int y1, int x2, bool color, uint8_t _data[], int array_length)		// with x2,y2 will not be limited as it is not creating any hindrence
{
    2caa:	af 92       	push	r10
    2cac:	bf 92       	push	r11
    2cae:	cf 92       	push	r12
    2cb0:	df 92       	push	r13
    2cb2:	ef 92       	push	r14
    2cb4:	ff 92       	push	r15
    2cb6:	0f 93       	push	r16
    2cb8:	1f 93       	push	r17
    2cba:	cf 93       	push	r28
    2cbc:	df 93       	push	r29
    2cbe:	00 d0       	rcall	.+0      	; 0x2cc0 <__set_pixel+0x16>
    2cc0:	00 d0       	rcall	.+0      	; 0x2cc2 <__set_pixel+0x18>
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    2cc6:	5c 01       	movw	r10, r24
    2cc8:	f6 2e       	mov	r15, r22
    2cca:	6a 01       	movw	r12, r20
	uint8_t tempArgs[4];
	//uint8_t _data[3] = {0xC0, 0xF2, 0xDC};
	ST7586_cmd(SETCOLUMNADDRESS);	// Set Column Address
    2ccc:	8a e2       	ldi	r24, 0x2A	; 42
    2cce:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
	// Stupid display addressing. Why requiring two bytes, when the max value is 127 for columns / 160 for rows???
	tempArgs[0] = 0;
    2cd2:	19 82       	std	Y+1, r1	; 0x01
	tempArgs[1] = x1/3;
    2cd4:	23 e0       	ldi	r18, 0x03	; 3
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	c5 01       	movw	r24, r10
    2cda:	b9 01       	movw	r22, r18
    2cdc:	0e 94 c0 1c 	call	0x3980	; 0x3980 <__divmodhi4>
    2ce0:	6a 83       	std	Y+2, r22	; 0x02
	tempArgs[2] = 0;
    2ce2:	1b 82       	std	Y+3, r1	; 0x03
	tempArgs[3] = x2/3;
    2ce4:	c6 01       	movw	r24, r12
    2ce6:	b9 01       	movw	r22, r18
    2ce8:	0e 94 c0 1c 	call	0x3980	; 0x3980 <__divmodhi4>
    2cec:	6c 83       	std	Y+4, r22	; 0x04
	ST7586_send_data(tempArgs, 4);
    2cee:	64 e0       	ldi	r22, 0x04	; 4
    2cf0:	ce 01       	movw	r24, r28
    2cf2:	01 96       	adiw	r24, 0x01	; 1
    2cf4:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <ST7586_send_data>
	ST7586_cmd(SETROWADDRESS);		// Set Row Address
    2cf8:	8b e2       	ldi	r24, 0x2B	; 43
    2cfa:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
	tempArgs[0] = 0;
    2cfe:	19 82       	std	Y+1, r1	; 0x01
	tempArgs[1] = y1;
    2d00:	fa 82       	std	Y+2, r15	; 0x02
	tempArgs[2] = 0;
    2d02:	1b 82       	std	Y+3, r1	; 0x03
	tempArgs[3] = 159;
    2d04:	8f e9       	ldi	r24, 0x9F	; 159
    2d06:	8c 83       	std	Y+4, r24	; 0x04
	ST7586_send_data(tempArgs, 4);
    2d08:	64 e0       	ldi	r22, 0x04	; 4
    2d0a:	ce 01       	movw	r24, r28
    2d0c:	01 96       	adiw	r24, 0x01	; 1
    2d0e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <ST7586_send_data>
	ST7586_cmd(WRITEDISPLAYDATA);
    2d12:	8c e2       	ldi	r24, 0x2C	; 44
    2d14:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
	ST7586_send_data(_data, array_length);
    2d18:	6e 2d       	mov	r22, r14
    2d1a:	c8 01       	movw	r24, r16
    2d1c:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <ST7586_send_data>
	//	USART1_sendString("set pixel");
}
    2d20:	24 96       	adiw	r28, 0x04	; 4
    2d22:	cd bf       	out	0x3d, r28	; 61
    2d24:	de bf       	out	0x3e, r29	; 62
    2d26:	df 91       	pop	r29
    2d28:	cf 91       	pop	r28
    2d2a:	1f 91       	pop	r17
    2d2c:	0f 91       	pop	r16
    2d2e:	ff 90       	pop	r15
    2d30:	ef 90       	pop	r14
    2d32:	df 90       	pop	r13
    2d34:	cf 90       	pop	r12
    2d36:	bf 90       	pop	r11
    2d38:	af 90       	pop	r10
    2d3a:	08 95       	ret

00002d3c <_print_icon>:
		ST7586_SERIALW(data[i]);
	}
	ST7586_CSHIGH();
}
void _print_icon(int x1, int y1, int x2, uint8_t *font, uint8_t height , uint8_t width)		//function to print array of uint_8 of any no. of elements, by giving x1,y1,x2,y2
{																							//width should be a multiple of 8 and the icon should also be generated with the width as multiple of 8(GLCD fount creator) but this length could be limited my reducing the x2 as the multiple of 3
    2d3c:	2f 92       	push	r2
    2d3e:	3f 92       	push	r3
    2d40:	4f 92       	push	r4
    2d42:	5f 92       	push	r5
    2d44:	6f 92       	push	r6
    2d46:	7f 92       	push	r7
    2d48:	8f 92       	push	r8
    2d4a:	9f 92       	push	r9
    2d4c:	af 92       	push	r10
    2d4e:	bf 92       	push	r11
    2d50:	cf 92       	push	r12
    2d52:	df 92       	push	r13
    2d54:	ef 92       	push	r14
    2d56:	ff 92       	push	r15
    2d58:	0f 93       	push	r16
    2d5a:	1f 93       	push	r17
    2d5c:	cf 93       	push	r28
    2d5e:	df 93       	push	r29
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	28 97       	sbiw	r28, 0x08	; 8
    2d66:	cd bf       	out	0x3d, r28	; 61
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	89 83       	std	Y+1, r24	; 0x01
    2d6c:	9a 83       	std	Y+2, r25	; 0x02
    2d6e:	4b 83       	std	Y+3, r20	; 0x03
    2d70:	5c 83       	std	Y+4, r21	; 0x04
    2d72:	39 01       	movw	r6, r18
			}
		}
		__set_pixel(x1, (_length+y1), x2, 1, &_buff[0], buff_length);
		i=0;
	}
}
    2d74:	8d b7       	in	r24, 0x3d	; 61
    2d76:	9e b7       	in	r25, 0x3e	; 62
    2d78:	8f 83       	std	Y+7, r24	; 0x07
    2d7a:	98 87       	std	Y+8, r25	; 0x08
	}
	ST7586_CSHIGH();
}
void _print_icon(int x1, int y1, int x2, uint8_t *font, uint8_t height , uint8_t width)		//function to print array of uint_8 of any no. of elements, by giving x1,y1,x2,y2
{																							//width should be a multiple of 8 and the icon should also be generated with the width as multiple of 8(GLCD fount creator) but this length could be limited my reducing the x2 as the multiple of 3
	int new_pos = 0, buff_length = (width*3);
    2d7c:	8e 2d       	mov	r24, r14
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	2c 01       	movw	r4, r24
    2d82:	44 0c       	add	r4, r4
    2d84:	55 1c       	adc	r5, r5
    2d86:	48 0e       	add	r4, r24
    2d88:	59 1e       	adc	r5, r25
	uint8_t array_data = 0;

	for(int _length = 0; _length < height; _length++)
    2d8a:	21 2c       	mov	r2, r1
    2d8c:	31 2c       	mov	r3, r1
	}
	ST7586_CSHIGH();
}
void _print_icon(int x1, int y1, int x2, uint8_t *font, uint8_t height , uint8_t width)		//function to print array of uint_8 of any no. of elements, by giving x1,y1,x2,y2
{																							//width should be a multiple of 8 and the icon should also be generated with the width as multiple of 8(GLCD fount creator) but this length could be limited my reducing the x2 as the multiple of 3
	int new_pos = 0, buff_length = (width*3);
    2d8e:	c1 2c       	mov	r12, r1
    2d90:	d1 2c       	mov	r13, r1
    2d92:	6d 83       	std	Y+5, r22	; 0x05
    2d94:	7e 83       	std	Y+6, r23	; 0x06
    2d96:	a0 2e       	mov	r10, r16
    2d98:	be 2c       	mov	r11, r14
	uint8_t array_data = 0;

	for(int _length = 0; _length < height; _length++)
    2d9a:	5f c0       	rjmp	.+190    	; 0x2e5a <_print_icon+0x11e>
	{
    2d9c:	8d b6       	in	r8, 0x3d	; 61
    2d9e:	9e b6       	in	r9, 0x3e	; 62
		uint8_t _buff[buff_length];
    2da0:	8d b7       	in	r24, 0x3d	; 61
    2da2:	9e b7       	in	r25, 0x3e	; 62
    2da4:	84 19       	sub	r24, r4
    2da6:	95 09       	sbc	r25, r5
    2da8:	8d bf       	out	0x3d, r24	; 61
    2daa:	9e bf       	out	0x3e, r25	; 62
    2dac:	0d b7       	in	r16, 0x3d	; 61
    2dae:	1e b7       	in	r17, 0x3e	; 62
    2db0:	0f 5f       	subi	r16, 0xFF	; 255
    2db2:	1f 4f       	sbci	r17, 0xFF	; 255
    2db4:	98 01       	movw	r18, r16
		for (int i = 0; i < buff_length; i++)			// to make the buff initialize with 0
    2db6:	80 e0       	ldi	r24, 0x00	; 0
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	05 c0       	rjmp	.+10     	; 0x2dc6 <_print_icon+0x8a>
		{
			_buff[i] = 0x00;
    2dbc:	f9 01       	movw	r30, r18
    2dbe:	e8 0f       	add	r30, r24
    2dc0:	f9 1f       	adc	r31, r25
    2dc2:	10 82       	st	Z, r1
	uint8_t array_data = 0;

	for(int _length = 0; _length < height; _length++)
	{
		uint8_t _buff[buff_length];
		for (int i = 0; i < buff_length; i++)			// to make the buff initialize with 0
    2dc4:	01 96       	adiw	r24, 0x01	; 1
    2dc6:	84 15       	cp	r24, r4
    2dc8:	95 05       	cpc	r25, r5
    2dca:	c4 f3       	brlt	.-16     	; 0x2dbc <_print_icon+0x80>
    2dcc:	40 e0       	ldi	r20, 0x00	; 0
    2dce:	50 e0       	ldi	r21, 0x00	; 0
    2dd0:	60 e0       	ldi	r22, 0x00	; 0
    2dd2:	70 e0       	ldi	r23, 0x00	; 0
    2dd4:	29 c0       	rjmp	.+82     	; 0x2e28 <_print_icon+0xec>
			_buff[i] = 0x00;
		}
		uint8_t i = 0, k = 0;
		for(int _width = 0; _width < (width/8); _width++)
		{
			array_data = pgm_read_byte(&(font[new_pos]));
    2dd6:	f3 01       	movw	r30, r6
    2dd8:	ec 0d       	add	r30, r12
    2dda:	fd 1d       	adc	r31, r13
    2ddc:	e4 90       	lpm	r14, Z
			new_pos++;
    2dde:	9f ef       	ldi	r25, 0xFF	; 255
    2de0:	c9 1a       	sub	r12, r25
    2de2:	d9 0a       	sbc	r13, r25
			for (int j = 7; j >= 0; j--)
    2de4:	87 e0       	ldi	r24, 0x07	; 7
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	1b c0       	rjmp	.+54     	; 0x2e20 <_print_icon+0xe4>
			{
				if (array_data & (1<<j))
    2dea:	ee 2d       	mov	r30, r14
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	08 2e       	mov	r0, r24
    2df0:	02 c0       	rjmp	.+4      	; 0x2df6 <_print_icon+0xba>
    2df2:	f5 95       	asr	r31
    2df4:	e7 95       	ror	r30
    2df6:	0a 94       	dec	r0
    2df8:	e2 f7       	brpl	.-8      	; 0x2df2 <_print_icon+0xb6>
    2dfa:	e0 ff       	sbrs	r30, 0
    2dfc:	0b c0       	rjmp	.+22     	; 0x2e14 <_print_icon+0xd8>
				{
					_buff[i] = _buff[i] | pre_def[k];
    2dfe:	d9 01       	movw	r26, r18
    2e00:	a7 0f       	add	r26, r23
    2e02:	b1 1d       	adc	r27, r1
    2e04:	fc 90       	ld	r15, X
    2e06:	e6 2f       	mov	r30, r22
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	e0 50       	subi	r30, 0x00	; 0
    2e0c:	f0 4c       	sbci	r31, 0xC0	; 192
    2e0e:	e0 81       	ld	r30, Z
    2e10:	ef 29       	or	r30, r15
    2e12:	ec 93       	st	X, r30
				}
				if(++k > 2)
    2e14:	6f 5f       	subi	r22, 0xFF	; 255
    2e16:	63 30       	cpi	r22, 0x03	; 3
    2e18:	10 f0       	brcs	.+4      	; 0x2e1e <_print_icon+0xe2>
				{
					k = 0;
					i++;
    2e1a:	7f 5f       	subi	r23, 0xFF	; 255
				{
					_buff[i] = _buff[i] | pre_def[k];
				}
				if(++k > 2)
				{
					k = 0;
    2e1c:	60 e0       	ldi	r22, 0x00	; 0
		uint8_t i = 0, k = 0;
		for(int _width = 0; _width < (width/8); _width++)
		{
			array_data = pgm_read_byte(&(font[new_pos]));
			new_pos++;
			for (int j = 7; j >= 0; j--)
    2e1e:	01 97       	sbiw	r24, 0x01	; 1
    2e20:	99 23       	and	r25, r25
    2e22:	1c f7       	brge	.-58     	; 0x2dea <_print_icon+0xae>
		for (int i = 0; i < buff_length; i++)			// to make the buff initialize with 0
		{
			_buff[i] = 0x00;
		}
		uint8_t i = 0, k = 0;
		for(int _width = 0; _width < (width/8); _width++)
    2e24:	4f 5f       	subi	r20, 0xFF	; 255
    2e26:	5f 4f       	sbci	r21, 0xFF	; 255
    2e28:	8b 2d       	mov	r24, r11
    2e2a:	86 95       	lsr	r24
    2e2c:	86 95       	lsr	r24
    2e2e:	86 95       	lsr	r24
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	48 17       	cp	r20, r24
    2e34:	59 07       	cpc	r21, r25
    2e36:	7c f2       	brlt	.-98     	; 0x2dd6 <_print_icon+0x9a>
					k = 0;
					i++;
				}
			}
		}
		__set_pixel(x1, (_length+y1), x2, 1, &_buff[0], buff_length);
    2e38:	6d 81       	ldd	r22, Y+5	; 0x05
    2e3a:	7e 81       	ldd	r23, Y+6	; 0x06
    2e3c:	62 0d       	add	r22, r2
    2e3e:	73 1d       	adc	r23, r3
    2e40:	72 01       	movw	r14, r4
    2e42:	21 e0       	ldi	r18, 0x01	; 1
    2e44:	4b 81       	ldd	r20, Y+3	; 0x03
    2e46:	5c 81       	ldd	r21, Y+4	; 0x04
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4c:	0e 94 55 16 	call	0x2caa	; 0x2caa <__set_pixel>
    2e50:	8d be       	out	0x3d, r8	; 61
    2e52:	9e be       	out	0x3e, r9	; 62
void _print_icon(int x1, int y1, int x2, uint8_t *font, uint8_t height , uint8_t width)		//function to print array of uint_8 of any no. of elements, by giving x1,y1,x2,y2
{																							//width should be a multiple of 8 and the icon should also be generated with the width as multiple of 8(GLCD fount creator) but this length could be limited my reducing the x2 as the multiple of 3
	int new_pos = 0, buff_length = (width*3);
	uint8_t array_data = 0;

	for(int _length = 0; _length < height; _length++)
    2e54:	8f ef       	ldi	r24, 0xFF	; 255
    2e56:	28 1a       	sub	r2, r24
    2e58:	38 0a       	sbc	r3, r24
    2e5a:	8a 2d       	mov	r24, r10
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	28 16       	cp	r2, r24
    2e60:	39 06       	cpc	r3, r25
    2e62:	0c f4       	brge	.+2      	; 0x2e66 <_print_icon+0x12a>
    2e64:	9b cf       	rjmp	.-202    	; 0x2d9c <_print_icon+0x60>
			}
		}
		__set_pixel(x1, (_length+y1), x2, 1, &_buff[0], buff_length);
		i=0;
	}
}
    2e66:	8f 81       	ldd	r24, Y+7	; 0x07
    2e68:	98 85       	ldd	r25, Y+8	; 0x08
    2e6a:	8d bf       	out	0x3d, r24	; 61
    2e6c:	9e bf       	out	0x3e, r25	; 62
    2e6e:	28 96       	adiw	r28, 0x08	; 8
    2e70:	cd bf       	out	0x3d, r28	; 61
    2e72:	de bf       	out	0x3e, r29	; 62
    2e74:	df 91       	pop	r29
    2e76:	cf 91       	pop	r28
    2e78:	1f 91       	pop	r17
    2e7a:	0f 91       	pop	r16
    2e7c:	ff 90       	pop	r15
    2e7e:	ef 90       	pop	r14
    2e80:	df 90       	pop	r13
    2e82:	cf 90       	pop	r12
    2e84:	bf 90       	pop	r11
    2e86:	af 90       	pop	r10
    2e88:	9f 90       	pop	r9
    2e8a:	8f 90       	pop	r8
    2e8c:	7f 90       	pop	r7
    2e8e:	6f 90       	pop	r6
    2e90:	5f 90       	pop	r5
    2e92:	4f 90       	pop	r4
    2e94:	3f 90       	pop	r3
    2e96:	2f 90       	pop	r2
    2e98:	08 95       	ret

00002e9a <_set_pixel>:
		i=0;
	}

}
void _set_pixel (int x, int y, bool color, uint8_t _data[], int array_length)
{
    2e9a:	cf 92       	push	r12
    2e9c:	df 92       	push	r13
    2e9e:	ef 92       	push	r14
    2ea0:	ff 92       	push	r15
    2ea2:	0f 93       	push	r16
    2ea4:	1f 93       	push	r17
    2ea6:	cf 93       	push	r28
    2ea8:	df 93       	push	r29
    2eaa:	00 d0       	rcall	.+0      	; 0x2eac <_set_pixel+0x12>
    2eac:	00 d0       	rcall	.+0      	; 0x2eae <_set_pixel+0x14>
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    2eb2:	6c 01       	movw	r12, r24
    2eb4:	16 2f       	mov	r17, r22
    2eb6:	79 01       	movw	r14, r18
	uint8_t tempArgs[4];
	//uint8_t _data[3] = {0xC0, 0xF2, 0xDC};
	ST7586_cmd(SETCOLUMNADDRESS);	// Set Column Address
    2eb8:	8a e2       	ldi	r24, 0x2A	; 42
    2eba:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
	// Stupid display addressing. Why requiring two bytes, when the max value is 127 for columns / 160 for rows???
	tempArgs[0] = 0;
    2ebe:	19 82       	std	Y+1, r1	; 0x01
	tempArgs[1] = x/3;
    2ec0:	c6 01       	movw	r24, r12
    2ec2:	63 e0       	ldi	r22, 0x03	; 3
    2ec4:	70 e0       	ldi	r23, 0x00	; 0
    2ec6:	0e 94 c0 1c 	call	0x3980	; 0x3980 <__divmodhi4>
    2eca:	6a 83       	std	Y+2, r22	; 0x02
	tempArgs[2] = 0;
    2ecc:	1b 82       	std	Y+3, r1	; 0x03
	tempArgs[3] = 128;
    2ece:	80 e8       	ldi	r24, 0x80	; 128
    2ed0:	8c 83       	std	Y+4, r24	; 0x04
	ST7586_send_data(tempArgs, 4);
    2ed2:	64 e0       	ldi	r22, 0x04	; 4
    2ed4:	ce 01       	movw	r24, r28
    2ed6:	01 96       	adiw	r24, 0x01	; 1
    2ed8:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <ST7586_send_data>
	ST7586_cmd(SETROWADDRESS);		// Set Row Address
    2edc:	8b e2       	ldi	r24, 0x2B	; 43
    2ede:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
	tempArgs[0] = 0;
    2ee2:	19 82       	std	Y+1, r1	; 0x01
	tempArgs[1] = y;
    2ee4:	1a 83       	std	Y+2, r17	; 0x02
	tempArgs[2] = 0;
    2ee6:	1b 82       	std	Y+3, r1	; 0x03
	tempArgs[3] = 159;
    2ee8:	8f e9       	ldi	r24, 0x9F	; 159
    2eea:	8c 83       	std	Y+4, r24	; 0x04
	ST7586_send_data(tempArgs, 4);
    2eec:	64 e0       	ldi	r22, 0x04	; 4
    2eee:	ce 01       	movw	r24, r28
    2ef0:	01 96       	adiw	r24, 0x01	; 1
    2ef2:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <ST7586_send_data>
	ST7586_cmd(WRITEDISPLAYDATA);
    2ef6:	8c e2       	ldi	r24, 0x2C	; 44
    2ef8:	0e 94 8e 14 	call	0x291c	; 0x291c <ST7586_cmd>
	ST7586_send_data(_data, array_length);
    2efc:	60 2f       	mov	r22, r16
    2efe:	c7 01       	movw	r24, r14
    2f00:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <ST7586_send_data>
	//	USART1_sendString("set pixel");
    2f04:	24 96       	adiw	r28, 0x04	; 4
    2f06:	cd bf       	out	0x3d, r28	; 61
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	df 91       	pop	r29
    2f0c:	cf 91       	pop	r28
    2f0e:	1f 91       	pop	r17
    2f10:	0f 91       	pop	r16
    2f12:	ff 90       	pop	r15
    2f14:	ef 90       	pop	r14
    2f16:	df 90       	pop	r13
    2f18:	cf 90       	pop	r12
    2f1a:	08 95       	ret

00002f1c <print_bool>:
	print_bool(x+27, y, digit_b);
	print_bool(x+54, y, digit_c);
	
}
void print_bool(int x, int y, int n)
{
    2f1c:	5f 92       	push	r5
    2f1e:	6f 92       	push	r6
    2f20:	7f 92       	push	r7
    2f22:	8f 92       	push	r8
    2f24:	9f 92       	push	r9
    2f26:	af 92       	push	r10
    2f28:	bf 92       	push	r11
    2f2a:	cf 92       	push	r12
    2f2c:	df 92       	push	r13
    2f2e:	ef 92       	push	r14
    2f30:	ff 92       	push	r15
    2f32:	0f 93       	push	r16
    2f34:	1f 93       	push	r17
    2f36:	cf 93       	push	r28
    2f38:	df 93       	push	r29
    2f3a:	cd b7       	in	r28, 0x3d	; 61
    2f3c:	de b7       	in	r29, 0x3e	; 62
    2f3e:	28 97       	sbiw	r28, 0x08	; 8
    2f40:	cd bf       	out	0x3d, r28	; 61
    2f42:	de bf       	out	0x3e, r29	; 62
    2f44:	3c 01       	movw	r6, r24
    2f46:	4b 01       	movw	r8, r22
    2f48:	6a 01       	movw	r12, r20
	uint8_t height = 36, width = 24;
	int new_pos = 0;
	bool array_data = false;
	uint8_t i = 0, k = 0;

	for(int _length = 0; _length < height; _length++)
    2f4a:	a1 2c       	mov	r10, r1
    2f4c:	b1 2c       	mov	r11, r1
void print_bool(int x, int y, int n)
{
	uint8_t height = 36, width = 24;
	int new_pos = 0;
	bool array_data = false;
	uint8_t i = 0, k = 0;
    2f4e:	51 2c       	mov	r5, r1
	
}
void print_bool(int x, int y, int n)
{
	uint8_t height = 36, width = 24;
	int new_pos = 0;
    2f50:	e1 2c       	mov	r14, r1
    2f52:	f1 2c       	mov	r15, r1
	bool array_data = false;
	uint8_t i = 0, k = 0;

	for(int _length = 0; _length < height; _length++)
    2f54:	46 c0       	rjmp	.+140    	; 0x2fe2 <print_bool+0xc6>
	{
		// 			USART1_sendString("length");
		// 			USART1_sendInt(_length);
		uint8_t _buff[8] = {0};
    2f56:	fe 01       	movw	r30, r28
    2f58:	31 96       	adiw	r30, 0x01	; 1
    2f5a:	88 e0       	ldi	r24, 0x08	; 8
    2f5c:	df 01       	movw	r26, r30
    2f5e:	1d 92       	st	X+, r1
    2f60:	8a 95       	dec	r24
    2f62:	e9 f7       	brne	.-6      	; 0x2f5e <print_bool+0x42>
		for(int _width = 0; _width < width; _width++)
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	28 c0       	rjmp	.+80     	; 0x2fbc <print_bool+0xa0>
			// 				USART1_sendString("width");
			// 				USART1_sendInt(_width);
			// 				USART1_sendString("pos");
			// 				USART1_sendInt(new_pos);
			
			array_data = pgm_read_byte(&(system24x36[n][new_pos]));
    2f6c:	40 e6       	ldi	r20, 0x60	; 96
    2f6e:	53 e0       	ldi	r21, 0x03	; 3
    2f70:	c4 9e       	mul	r12, r20
    2f72:	f0 01       	movw	r30, r0
    2f74:	c5 9e       	mul	r12, r21
    2f76:	f0 0d       	add	r31, r0
    2f78:	d4 9e       	mul	r13, r20
    2f7a:	f0 0d       	add	r31, r0
    2f7c:	11 24       	eor	r1, r1
    2f7e:	ee 0d       	add	r30, r14
    2f80:	ff 1d       	adc	r31, r15
    2f82:	ea 5c       	subi	r30, 0xCA	; 202
    2f84:	fd 4f       	sbci	r31, 0xFD	; 253
    2f86:	e4 91       	lpm	r30, Z
			new_pos++;
    2f88:	bf ef       	ldi	r27, 0xFF	; 255
    2f8a:	eb 1a       	sub	r14, r27
    2f8c:	fb 0a       	sbc	r15, r27
			// 				USART1_sendString("data");
			// 				USART1_sendInt(array_data);
			if (array_data)
    2f8e:	ee 23       	and	r30, r30
    2f90:	71 f0       	breq	.+28     	; 0x2fae <print_bool+0x92>
			{
				_buff[i] = _buff[i] | pre_def[k];
    2f92:	e1 e0       	ldi	r30, 0x01	; 1
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	ec 0f       	add	r30, r28
    2f98:	fd 1f       	adc	r31, r29
    2f9a:	e3 0f       	add	r30, r19
    2f9c:	f1 1d       	adc	r31, r1
    2f9e:	40 81       	ld	r20, Z
    2fa0:	a5 2d       	mov	r26, r5
    2fa2:	b0 e0       	ldi	r27, 0x00	; 0
    2fa4:	a0 50       	subi	r26, 0x00	; 0
    2fa6:	b0 4c       	sbci	r27, 0xC0	; 192
    2fa8:	2c 91       	ld	r18, X
    2faa:	24 2b       	or	r18, r20
    2fac:	20 83       	st	Z, r18
				// 					USART1_sendString("buff");
				// 					USART1_sendInt(_buff[i]);
			}
			if(++k > 2)
    2fae:	53 94       	inc	r5
    2fb0:	22 e0       	ldi	r18, 0x02	; 2
    2fb2:	25 15       	cp	r18, r5
    2fb4:	10 f4       	brcc	.+4      	; 0x2fba <print_bool+0x9e>
			{
				k = 0;
				i++;
    2fb6:	3f 5f       	subi	r19, 0xFF	; 255
				// 					USART1_sendString("buff");
				// 					USART1_sendInt(_buff[i]);
			}
			if(++k > 2)
			{
				k = 0;
    2fb8:	51 2c       	mov	r5, r1
	for(int _length = 0; _length < height; _length++)
	{
		// 			USART1_sendString("length");
		// 			USART1_sendInt(_length);
		uint8_t _buff[8] = {0};
		for(int _width = 0; _width < width; _width++)
    2fba:	01 96       	adiw	r24, 0x01	; 1
    2fbc:	88 31       	cpi	r24, 0x18	; 24
    2fbe:	91 05       	cpc	r25, r1
    2fc0:	ac f2       	brlt	.-86     	; 0x2f6c <print_bool+0x50>
				i++;
			}

		}
		
		_set_pixel(x, (_length+y) , 1, &_buff[0], 8);
    2fc2:	b5 01       	movw	r22, r10
    2fc4:	68 0d       	add	r22, r8
    2fc6:	79 1d       	adc	r23, r9
    2fc8:	08 e0       	ldi	r16, 0x08	; 8
    2fca:	10 e0       	ldi	r17, 0x00	; 0
    2fcc:	9e 01       	movw	r18, r28
    2fce:	2f 5f       	subi	r18, 0xFF	; 255
    2fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd2:	41 e0       	ldi	r20, 0x01	; 1
    2fd4:	50 e0       	ldi	r21, 0x00	; 0
    2fd6:	c3 01       	movw	r24, r6
    2fd8:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <_set_pixel>
	uint8_t height = 36, width = 24;
	int new_pos = 0;
	bool array_data = false;
	uint8_t i = 0, k = 0;

	for(int _length = 0; _length < height; _length++)
    2fdc:	8f ef       	ldi	r24, 0xFF	; 255
    2fde:	a8 1a       	sub	r10, r24
    2fe0:	b8 0a       	sbc	r11, r24
    2fe2:	a4 e2       	ldi	r26, 0x24	; 36
    2fe4:	aa 16       	cp	r10, r26
    2fe6:	b1 04       	cpc	r11, r1
    2fe8:	0c f4       	brge	.+2      	; 0x2fec <print_bool+0xd0>
    2fea:	b5 cf       	rjmp	.-150    	; 0x2f56 <print_bool+0x3a>
		
		_set_pixel(x, (_length+y) , 1, &_buff[0], 8);
		i=0;
	}

}
    2fec:	28 96       	adiw	r28, 0x08	; 8
    2fee:	cd bf       	out	0x3d, r28	; 61
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	df 91       	pop	r29
    2ff4:	cf 91       	pop	r28
    2ff6:	1f 91       	pop	r17
    2ff8:	0f 91       	pop	r16
    2ffa:	ff 90       	pop	r15
    2ffc:	ef 90       	pop	r14
    2ffe:	df 90       	pop	r13
    3000:	cf 90       	pop	r12
    3002:	bf 90       	pop	r11
    3004:	af 90       	pop	r10
    3006:	9f 90       	pop	r9
    3008:	8f 90       	pop	r8
    300a:	7f 90       	pop	r7
    300c:	6f 90       	pop	r6
    300e:	5f 90       	pop	r5
    3010:	08 95       	ret

00003012 <show_mmgh_3digit>:
		i=0;
	}
}

void show_mmgh_3digit (int x, int y)
{
    3012:	af 92       	push	r10
    3014:	bf 92       	push	r11
    3016:	cf 92       	push	r12
    3018:	df 92       	push	r13
    301a:	ef 92       	push	r14
    301c:	ff 92       	push	r15
    301e:	0f 93       	push	r16
    3020:	1f 93       	push	r17
    3022:	cf 93       	push	r28
    3024:	df 93       	push	r29
    3026:	8c 01       	movw	r16, r24
    3028:	7b 01       	movw	r14, r22
	int buff =(int)final_pressure;
    302a:	60 91 b6 40 	lds	r22, 0x40B6	; 0x8040b6 <__data_end>
    302e:	70 91 b7 40 	lds	r23, 0x40B7	; 0x8040b7 <__data_end+0x1>
    3032:	80 91 b8 40 	lds	r24, 0x40B8	; 0x8040b8 <__data_end+0x2>
    3036:	90 91 b9 40 	lds	r25, 0x40B9	; 0x8040b9 <__data_end+0x3>
    303a:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__fixsfsi>
    303e:	eb 01       	movw	r28, r22
	uint8_t digit = 0, digit_a = 0, digit_b = 0, digit_c = 0;
	if (buff > 999)
    3040:	c8 3e       	cpi	r28, 0xE8	; 232
    3042:	83 e0       	ldi	r24, 0x03	; 3
    3044:	d8 07       	cpc	r29, r24
    3046:	64 f0       	brlt	.+24     	; 0x3060 <show_mmgh_3digit+0x4e>
	
	{
		USART1_sendString("pressure digit overflow!!");
    3048:	8b e9       	ldi	r24, 0x9B	; 155
    304a:	90 e4       	ldi	r25, 0x40	; 64
    304c:	0e 94 18 13 	call	0x2630	; 0x2630 <USART1_sendString>
		final_pressure = 0;
    3050:	10 92 b6 40 	sts	0x40B6, r1	; 0x8040b6 <__data_end>
    3054:	10 92 b7 40 	sts	0x40B7, r1	; 0x8040b7 <__data_end+0x1>
    3058:	10 92 b8 40 	sts	0x40B8, r1	; 0x8040b8 <__data_end+0x2>
    305c:	10 92 b9 40 	sts	0x40B9, r1	; 0x8040b9 <__data_end+0x3>
	}
	digit_c = buff%10;
    3060:	2a e0       	ldi	r18, 0x0A	; 10
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	ce 01       	movw	r24, r28
    3066:	b9 01       	movw	r22, r18
    3068:	0e 94 c0 1c 	call	0x3980	; 0x3980 <__divmodhi4>
    306c:	6c 01       	movw	r12, r24
	buff = buff/ 10;
	digit_b = buff%10;
    306e:	cb 01       	movw	r24, r22
    3070:	b9 01       	movw	r22, r18
    3072:	0e 94 c0 1c 	call	0x3980	; 0x3980 <__divmodhi4>
    3076:	5c 01       	movw	r10, r24
	digit_a = buff/10;
    3078:	ce 01       	movw	r24, r28
    307a:	64 e6       	ldi	r22, 0x64	; 100
    307c:	70 e0       	ldi	r23, 0x00	; 0
    307e:	0e 94 c0 1c 	call	0x3980	; 0x3980 <__divmodhi4>
	buff = 0;
	print_bool(x, y, digit_a);
    3082:	ab 01       	movw	r20, r22
    3084:	55 27       	eor	r21, r21
    3086:	b7 01       	movw	r22, r14
    3088:	c8 01       	movw	r24, r16
    308a:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <print_bool>
	print_bool(x+27, y, digit_b);
    308e:	a5 01       	movw	r20, r10
    3090:	55 27       	eor	r21, r21
    3092:	b7 01       	movw	r22, r14
    3094:	c8 01       	movw	r24, r16
    3096:	4b 96       	adiw	r24, 0x1b	; 27
    3098:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <print_bool>
	print_bool(x+54, y, digit_c);
    309c:	a6 01       	movw	r20, r12
    309e:	55 27       	eor	r21, r21
    30a0:	b7 01       	movw	r22, r14
    30a2:	c8 01       	movw	r24, r16
    30a4:	c6 96       	adiw	r24, 0x36	; 54
    30a6:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <print_bool>
	
}
    30aa:	df 91       	pop	r29
    30ac:	cf 91       	pop	r28
    30ae:	1f 91       	pop	r17
    30b0:	0f 91       	pop	r16
    30b2:	ff 90       	pop	r15
    30b4:	ef 90       	pop	r14
    30b6:	df 90       	pop	r13
    30b8:	cf 90       	pop	r12
    30ba:	bf 90       	pop	r11
    30bc:	af 90       	pop	r10
    30be:	08 95       	ret

000030c0 <main>:
void ST7586_send_data(uint8_t data[], uint8_t dataSize);



int main(void)
{   _PROTECTED_WRITE (CLKCTRL.OSCHFCTRLA, ((CLKCTRL_FREQSEL_24M_gc)|(CLKCTRL_AUTOTUNE_bm)));			//To increase clock freq
    30c0:	95 e2       	ldi	r25, 0x25	; 37
    30c2:	88 ed       	ldi	r24, 0xD8	; 216
    30c4:	84 bf       	out	0x34, r24	; 52
    30c6:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PORTB_DIR |= (1<<4);  // data/cmd
    30ca:	e0 e2       	ldi	r30, 0x20	; 32
    30cc:	f4 e0       	ldi	r31, 0x04	; 4
    30ce:	80 81       	ld	r24, Z
    30d0:	80 61       	ori	r24, 0x10	; 16
    30d2:	80 83       	st	Z, r24
	PORTC_DIR |= (1<<5); //Reset pin
    30d4:	e0 e4       	ldi	r30, 0x40	; 64
    30d6:	f4 e0       	ldi	r31, 0x04	; 4
    30d8:	80 81       	ld	r24, Z
    30da:	80 62       	ori	r24, 0x20	; 32
    30dc:	80 83       	st	Z, r24
	TCA0_PWM_init();
    30de:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <TCA0_PWM_init>
	Sensor_init();
    30e2:	0e 94 ff 13 	call	0x27fe	; 0x27fe <Sensor_init>
	USART1_init(9600);
    30e6:	80 e8       	ldi	r24, 0x80	; 128
    30e8:	95 e2       	ldi	r25, 0x25	; 37
    30ea:	0e 94 e6 12 	call	0x25cc	; 0x25cc <USART1_init>
	ADC0_init();
    30ee:	0e 94 54 14 	call	0x28a8	; 0x28a8 <ADC0_init>
	SPI_0_init();
    30f2:	0e 94 4e 13 	call	0x269c	; 0x269c <SPI_0_init>
	ST7586_init(1);
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <ST7586_init>
	_print_icon(80,10,32,battery_SOC4_15x32,15,32);
    30fc:	68 94       	set
    30fe:	ee 24       	eor	r14, r14
    3100:	e5 f8       	bld	r14, 5
    3102:	f1 2c       	mov	r15, r1
    3104:	0f e0       	ldi	r16, 0x0F	; 15
    3106:	10 e0       	ldi	r17, 0x00	; 0
    3108:	2a ef       	ldi	r18, 0xFA	; 250
    310a:	31 e0       	ldi	r19, 0x01	; 1
    310c:	40 e2       	ldi	r20, 0x20	; 32
    310e:	50 e0       	ldi	r21, 0x00	; 0
    3110:	6a e0       	ldi	r22, 0x0A	; 10
    3112:	70 e0       	ldi	r23, 0x00	; 0
    3114:	80 e5       	ldi	r24, 0x50	; 80
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_print_icon>
	_print_icon(230,40,48,mmhg_icon_24x48,24,48);
    311c:	0f 2e       	mov	r0, r31
    311e:	f0 e3       	ldi	r31, 0x30	; 48
    3120:	ef 2e       	mov	r14, r31
    3122:	f1 2c       	mov	r15, r1
    3124:	f0 2d       	mov	r31, r0
    3126:	08 e1       	ldi	r16, 0x18	; 24
    3128:	10 e0       	ldi	r17, 0x00	; 0
    312a:	2a e6       	ldi	r18, 0x6A	; 106
    312c:	31 e0       	ldi	r19, 0x01	; 1
    312e:	40 e3       	ldi	r20, 0x30	; 48
    3130:	50 e0       	ldi	r21, 0x00	; 0
    3132:	68 e2       	ldi	r22, 0x28	; 40
    3134:	70 e0       	ldi	r23, 0x00	; 0
    3136:	86 ee       	ldi	r24, 0xE6	; 230
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_print_icon>
	//ST7586_fill(ST7586_COLOR_BLACK);
	while (1)
	{   uint8_t i = 200;
		float pressure = 0.0;
    313e:	c1 2c       	mov	r12, r1
    3140:	d1 2c       	mov	r13, r1
    3142:	76 01       	movw	r14, r12
	ST7586_init(1);
	_print_icon(80,10,32,battery_SOC4_15x32,15,32);
	_print_icon(230,40,48,mmhg_icon_24x48,24,48);
	//ST7586_fill(ST7586_COLOR_BLACK);
	while (1)
	{   uint8_t i = 200;
    3144:	c8 ec       	ldi	r28, 0xC8	; 200
		float pressure = 0.0;
		
		while(i)
    3146:	11 c0       	rjmp	.+34     	; 0x316a <main+0xaa>
		{
			pressure = pressure + pressureRead();
    3148:	0e 94 08 14 	call	0x2810	; 0x2810 <pressureRead>
    314c:	9b 01       	movw	r18, r22
    314e:	ac 01       	movw	r20, r24
    3150:	c7 01       	movw	r24, r14
    3152:	b6 01       	movw	r22, r12
    3154:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__addsf3>
    3158:	6b 01       	movw	r12, r22
    315a:	7c 01       	movw	r14, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    315c:	8f e6       	ldi	r24, 0x6F	; 111
    315e:	97 e1       	ldi	r25, 0x17	; 23
    3160:	01 97       	sbiw	r24, 0x01	; 1
    3162:	f1 f7       	brne	.-4      	; 0x3160 <main+0xa0>
    3164:	00 c0       	rjmp	.+0      	; 0x3166 <main+0xa6>
    3166:	00 00       	nop
			_delay_us(1000);
			i--;
    3168:	c1 50       	subi	r28, 0x01	; 1
	//ST7586_fill(ST7586_COLOR_BLACK);
	while (1)
	{   uint8_t i = 200;
		float pressure = 0.0;
		
		while(i)
    316a:	c1 11       	cpse	r28, r1
    316c:	ed cf       	rjmp	.-38     	; 0x3148 <main+0x88>
		{
			pressure = pressure + pressureRead();
			_delay_us(1000);
			i--;
		}
	final_pressure = ((pressure/200)*51.7149); //final pressure in mmHg
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	48 e4       	ldi	r20, 0x48	; 72
    3174:	53 e4       	ldi	r21, 0x43	; 67
    3176:	c7 01       	movw	r24, r14
    3178:	b6 01       	movw	r22, r12
    317a:	0e 94 6f 19 	call	0x32de	; 0x32de <__divsf3>
    317e:	2f e0       	ldi	r18, 0x0F	; 15
    3180:	3c ed       	ldi	r19, 0xDC	; 220
    3182:	4e e4       	ldi	r20, 0x4E	; 78
    3184:	52 e4       	ldi	r21, 0x42	; 66
    3186:	0e 94 ce 1a 	call	0x359c	; 0x359c <__mulsf3>
    318a:	60 93 b6 40 	sts	0x40B6, r22	; 0x8040b6 <__data_end>
    318e:	70 93 b7 40 	sts	0x40B7, r23	; 0x8040b7 <__data_end+0x1>
    3192:	80 93 b8 40 	sts	0x40B8, r24	; 0x8040b8 <__data_end+0x2>
    3196:	90 93 b9 40 	sts	0x40B9, r25	; 0x8040b9 <__data_end+0x3>
	USART1_sendFloat(final_pressure,2);
    319a:	42 e0       	ldi	r20, 0x02	; 2
    319c:	50 e0       	ldi	r21, 0x00	; 0
    319e:	0e 94 44 13 	call	0x2688	; 0x2688 <USART1_sendFloat>
	
	int count = 0;
	count = ADC0_read(channel_1);
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	0e 94 61 14 	call	0x28c2	; 0x28c2 <ADC0_read>
	USART1_sendInt(count);
    31a8:	6c 01       	movw	r12, r24
    31aa:	99 0f       	add	r25, r25
    31ac:	ee 08       	sbc	r14, r14
    31ae:	ff 08       	sbc	r15, r15
    31b0:	c7 01       	movw	r24, r14
    31b2:	b6 01       	movw	r22, r12
    31b4:	0e 94 39 13 	call	0x2672	; 0x2672 <USART1_sendInt>
	dutyCycle1 = 0.3663004*count + 1500;
    31b8:	c7 01       	movw	r24, r14
    31ba:	b6 01       	movw	r22, r12
    31bc:	0e 94 19 1a 	call	0x3432	; 0x3432 <__floatsisf>
    31c0:	2a eb       	ldi	r18, 0xBA	; 186
    31c2:	3b e8       	ldi	r19, 0x8B	; 139
    31c4:	4b eb       	ldi	r20, 0xBB	; 187
    31c6:	5e e3       	ldi	r21, 0x3E	; 62
    31c8:	0e 94 ce 1a 	call	0x359c	; 0x359c <__mulsf3>
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e8       	ldi	r19, 0x80	; 128
    31d0:	4b eb       	ldi	r20, 0xBB	; 187
    31d2:	54 e4       	ldi	r21, 0x44	; 68
    31d4:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__addsf3>
    31d8:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__fixsfsi>
    31dc:	60 93 05 40 	sts	0x4005, r22	; 0x804005 <dutyCycle1>
    31e0:	70 93 06 40 	sts	0x4006, r23	; 0x804006 <dutyCycle1+0x1>
	TCA0.SINGLE.CMP0 = dutyCycle1;
    31e4:	60 93 28 0a 	sts	0x0A28, r22	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7e0a28>
    31e8:	70 93 29 0a 	sts	0x0A29, r23	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7e0a29>
	show_mmgh_3digit(150,80);	
    31ec:	60 e5       	ldi	r22, 0x50	; 80
    31ee:	70 e0       	ldi	r23, 0x00	; 0
    31f0:	86 e9       	ldi	r24, 0x96	; 150
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	0e 94 09 18 	call	0x3012	; 0x3012 <show_mmgh_3digit>
	}
    31f8:	a2 cf       	rjmp	.-188    	; 0x313e <main+0x7e>

000031fa <__subsf3>:
    31fa:	50 58       	subi	r21, 0x80	; 128

000031fc <__addsf3>:
    31fc:	bb 27       	eor	r27, r27
    31fe:	aa 27       	eor	r26, r26
    3200:	0e 94 15 19 	call	0x322a	; 0x322a <__addsf3x>
    3204:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__fp_round>
    3208:	0e 94 81 1a 	call	0x3502	; 0x3502 <__fp_pscA>
    320c:	38 f0       	brcs	.+14     	; 0x321c <__addsf3+0x20>
    320e:	0e 94 88 1a 	call	0x3510	; 0x3510 <__fp_pscB>
    3212:	20 f0       	brcs	.+8      	; 0x321c <__addsf3+0x20>
    3214:	39 f4       	brne	.+14     	; 0x3224 <__addsf3+0x28>
    3216:	9f 3f       	cpi	r25, 0xFF	; 255
    3218:	19 f4       	brne	.+6      	; 0x3220 <__addsf3+0x24>
    321a:	26 f4       	brtc	.+8      	; 0x3224 <__addsf3+0x28>
    321c:	0c 94 7e 1a 	jmp	0x34fc	; 0x34fc <__fp_nan>
    3220:	0e f4       	brtc	.+2      	; 0x3224 <__addsf3+0x28>
    3222:	e0 95       	com	r30
    3224:	e7 fb       	bst	r30, 7
    3226:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__fp_inf>

0000322a <__addsf3x>:
    322a:	e9 2f       	mov	r30, r25
    322c:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__fp_split3>
    3230:	58 f3       	brcs	.-42     	; 0x3208 <__addsf3+0xc>
    3232:	ba 17       	cp	r27, r26
    3234:	62 07       	cpc	r22, r18
    3236:	73 07       	cpc	r23, r19
    3238:	84 07       	cpc	r24, r20
    323a:	95 07       	cpc	r25, r21
    323c:	20 f0       	brcs	.+8      	; 0x3246 <__addsf3x+0x1c>
    323e:	79 f4       	brne	.+30     	; 0x325e <__addsf3x+0x34>
    3240:	a6 f5       	brtc	.+104    	; 0x32aa <__addsf3x+0x80>
    3242:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__fp_zero>
    3246:	0e f4       	brtc	.+2      	; 0x324a <__addsf3x+0x20>
    3248:	e0 95       	com	r30
    324a:	0b 2e       	mov	r0, r27
    324c:	ba 2f       	mov	r27, r26
    324e:	a0 2d       	mov	r26, r0
    3250:	0b 01       	movw	r0, r22
    3252:	b9 01       	movw	r22, r18
    3254:	90 01       	movw	r18, r0
    3256:	0c 01       	movw	r0, r24
    3258:	ca 01       	movw	r24, r20
    325a:	a0 01       	movw	r20, r0
    325c:	11 24       	eor	r1, r1
    325e:	ff 27       	eor	r31, r31
    3260:	59 1b       	sub	r21, r25
    3262:	99 f0       	breq	.+38     	; 0x328a <__addsf3x+0x60>
    3264:	59 3f       	cpi	r21, 0xF9	; 249
    3266:	50 f4       	brcc	.+20     	; 0x327c <__addsf3x+0x52>
    3268:	50 3e       	cpi	r21, 0xE0	; 224
    326a:	68 f1       	brcs	.+90     	; 0x32c6 <__addsf3x+0x9c>
    326c:	1a 16       	cp	r1, r26
    326e:	f0 40       	sbci	r31, 0x00	; 0
    3270:	a2 2f       	mov	r26, r18
    3272:	23 2f       	mov	r18, r19
    3274:	34 2f       	mov	r19, r20
    3276:	44 27       	eor	r20, r20
    3278:	58 5f       	subi	r21, 0xF8	; 248
    327a:	f3 cf       	rjmp	.-26     	; 0x3262 <__addsf3x+0x38>
    327c:	46 95       	lsr	r20
    327e:	37 95       	ror	r19
    3280:	27 95       	ror	r18
    3282:	a7 95       	ror	r26
    3284:	f0 40       	sbci	r31, 0x00	; 0
    3286:	53 95       	inc	r21
    3288:	c9 f7       	brne	.-14     	; 0x327c <__addsf3x+0x52>
    328a:	7e f4       	brtc	.+30     	; 0x32aa <__addsf3x+0x80>
    328c:	1f 16       	cp	r1, r31
    328e:	ba 0b       	sbc	r27, r26
    3290:	62 0b       	sbc	r22, r18
    3292:	73 0b       	sbc	r23, r19
    3294:	84 0b       	sbc	r24, r20
    3296:	ba f0       	brmi	.+46     	; 0x32c6 <__addsf3x+0x9c>
    3298:	91 50       	subi	r25, 0x01	; 1
    329a:	a1 f0       	breq	.+40     	; 0x32c4 <__addsf3x+0x9a>
    329c:	ff 0f       	add	r31, r31
    329e:	bb 1f       	adc	r27, r27
    32a0:	66 1f       	adc	r22, r22
    32a2:	77 1f       	adc	r23, r23
    32a4:	88 1f       	adc	r24, r24
    32a6:	c2 f7       	brpl	.-16     	; 0x3298 <__addsf3x+0x6e>
    32a8:	0e c0       	rjmp	.+28     	; 0x32c6 <__addsf3x+0x9c>
    32aa:	ba 0f       	add	r27, r26
    32ac:	62 1f       	adc	r22, r18
    32ae:	73 1f       	adc	r23, r19
    32b0:	84 1f       	adc	r24, r20
    32b2:	48 f4       	brcc	.+18     	; 0x32c6 <__addsf3x+0x9c>
    32b4:	87 95       	ror	r24
    32b6:	77 95       	ror	r23
    32b8:	67 95       	ror	r22
    32ba:	b7 95       	ror	r27
    32bc:	f7 95       	ror	r31
    32be:	9e 3f       	cpi	r25, 0xFE	; 254
    32c0:	08 f0       	brcs	.+2      	; 0x32c4 <__addsf3x+0x9a>
    32c2:	b0 cf       	rjmp	.-160    	; 0x3224 <__addsf3+0x28>
    32c4:	93 95       	inc	r25
    32c6:	88 0f       	add	r24, r24
    32c8:	08 f0       	brcs	.+2      	; 0x32cc <__addsf3x+0xa2>
    32ca:	99 27       	eor	r25, r25
    32cc:	ee 0f       	add	r30, r30
    32ce:	97 95       	ror	r25
    32d0:	87 95       	ror	r24
    32d2:	08 95       	ret

000032d4 <__cmpsf2>:
    32d4:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__fp_cmp>
    32d8:	08 f4       	brcc	.+2      	; 0x32dc <__cmpsf2+0x8>
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	08 95       	ret

000032de <__divsf3>:
    32de:	0e 94 83 19 	call	0x3306	; 0x3306 <__divsf3x>
    32e2:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__fp_round>
    32e6:	0e 94 88 1a 	call	0x3510	; 0x3510 <__fp_pscB>
    32ea:	58 f0       	brcs	.+22     	; 0x3302 <__divsf3+0x24>
    32ec:	0e 94 81 1a 	call	0x3502	; 0x3502 <__fp_pscA>
    32f0:	40 f0       	brcs	.+16     	; 0x3302 <__divsf3+0x24>
    32f2:	29 f4       	brne	.+10     	; 0x32fe <__divsf3+0x20>
    32f4:	5f 3f       	cpi	r21, 0xFF	; 255
    32f6:	29 f0       	breq	.+10     	; 0x3302 <__divsf3+0x24>
    32f8:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__fp_inf>
    32fc:	51 11       	cpse	r21, r1
    32fe:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__fp_szero>
    3302:	0c 94 7e 1a 	jmp	0x34fc	; 0x34fc <__fp_nan>

00003306 <__divsf3x>:
    3306:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__fp_split3>
    330a:	68 f3       	brcs	.-38     	; 0x32e6 <__divsf3+0x8>

0000330c <__divsf3_pse>:
    330c:	99 23       	and	r25, r25
    330e:	b1 f3       	breq	.-20     	; 0x32fc <__divsf3+0x1e>
    3310:	55 23       	and	r21, r21
    3312:	91 f3       	breq	.-28     	; 0x32f8 <__divsf3+0x1a>
    3314:	95 1b       	sub	r25, r21
    3316:	55 0b       	sbc	r21, r21
    3318:	bb 27       	eor	r27, r27
    331a:	aa 27       	eor	r26, r26
    331c:	62 17       	cp	r22, r18
    331e:	73 07       	cpc	r23, r19
    3320:	84 07       	cpc	r24, r20
    3322:	38 f0       	brcs	.+14     	; 0x3332 <__divsf3_pse+0x26>
    3324:	9f 5f       	subi	r25, 0xFF	; 255
    3326:	5f 4f       	sbci	r21, 0xFF	; 255
    3328:	22 0f       	add	r18, r18
    332a:	33 1f       	adc	r19, r19
    332c:	44 1f       	adc	r20, r20
    332e:	aa 1f       	adc	r26, r26
    3330:	a9 f3       	breq	.-22     	; 0x331c <__divsf3_pse+0x10>
    3332:	35 d0       	rcall	.+106    	; 0x339e <__divsf3_pse+0x92>
    3334:	0e 2e       	mov	r0, r30
    3336:	3a f0       	brmi	.+14     	; 0x3346 <__divsf3_pse+0x3a>
    3338:	e0 e8       	ldi	r30, 0x80	; 128
    333a:	32 d0       	rcall	.+100    	; 0x33a0 <__divsf3_pse+0x94>
    333c:	91 50       	subi	r25, 0x01	; 1
    333e:	50 40       	sbci	r21, 0x00	; 0
    3340:	e6 95       	lsr	r30
    3342:	00 1c       	adc	r0, r0
    3344:	ca f7       	brpl	.-14     	; 0x3338 <__divsf3_pse+0x2c>
    3346:	2b d0       	rcall	.+86     	; 0x339e <__divsf3_pse+0x92>
    3348:	fe 2f       	mov	r31, r30
    334a:	29 d0       	rcall	.+82     	; 0x339e <__divsf3_pse+0x92>
    334c:	66 0f       	add	r22, r22
    334e:	77 1f       	adc	r23, r23
    3350:	88 1f       	adc	r24, r24
    3352:	bb 1f       	adc	r27, r27
    3354:	26 17       	cp	r18, r22
    3356:	37 07       	cpc	r19, r23
    3358:	48 07       	cpc	r20, r24
    335a:	ab 07       	cpc	r26, r27
    335c:	b0 e8       	ldi	r27, 0x80	; 128
    335e:	09 f0       	breq	.+2      	; 0x3362 <__divsf3_pse+0x56>
    3360:	bb 0b       	sbc	r27, r27
    3362:	80 2d       	mov	r24, r0
    3364:	bf 01       	movw	r22, r30
    3366:	ff 27       	eor	r31, r31
    3368:	93 58       	subi	r25, 0x83	; 131
    336a:	5f 4f       	sbci	r21, 0xFF	; 255
    336c:	3a f0       	brmi	.+14     	; 0x337c <__divsf3_pse+0x70>
    336e:	9e 3f       	cpi	r25, 0xFE	; 254
    3370:	51 05       	cpc	r21, r1
    3372:	78 f0       	brcs	.+30     	; 0x3392 <__divsf3_pse+0x86>
    3374:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__fp_inf>
    3378:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__fp_szero>
    337c:	5f 3f       	cpi	r21, 0xFF	; 255
    337e:	e4 f3       	brlt	.-8      	; 0x3378 <__divsf3_pse+0x6c>
    3380:	98 3e       	cpi	r25, 0xE8	; 232
    3382:	d4 f3       	brlt	.-12     	; 0x3378 <__divsf3_pse+0x6c>
    3384:	86 95       	lsr	r24
    3386:	77 95       	ror	r23
    3388:	67 95       	ror	r22
    338a:	b7 95       	ror	r27
    338c:	f7 95       	ror	r31
    338e:	9f 5f       	subi	r25, 0xFF	; 255
    3390:	c9 f7       	brne	.-14     	; 0x3384 <__divsf3_pse+0x78>
    3392:	88 0f       	add	r24, r24
    3394:	91 1d       	adc	r25, r1
    3396:	96 95       	lsr	r25
    3398:	87 95       	ror	r24
    339a:	97 f9       	bld	r25, 7
    339c:	08 95       	ret
    339e:	e1 e0       	ldi	r30, 0x01	; 1
    33a0:	66 0f       	add	r22, r22
    33a2:	77 1f       	adc	r23, r23
    33a4:	88 1f       	adc	r24, r24
    33a6:	bb 1f       	adc	r27, r27
    33a8:	62 17       	cp	r22, r18
    33aa:	73 07       	cpc	r23, r19
    33ac:	84 07       	cpc	r24, r20
    33ae:	ba 07       	cpc	r27, r26
    33b0:	20 f0       	brcs	.+8      	; 0x33ba <__divsf3_pse+0xae>
    33b2:	62 1b       	sub	r22, r18
    33b4:	73 0b       	sbc	r23, r19
    33b6:	84 0b       	sbc	r24, r20
    33b8:	ba 0b       	sbc	r27, r26
    33ba:	ee 1f       	adc	r30, r30
    33bc:	88 f7       	brcc	.-30     	; 0x33a0 <__divsf3_pse+0x94>
    33be:	e0 95       	com	r30
    33c0:	08 95       	ret

000033c2 <__fixsfsi>:
    33c2:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__fixunssfsi>
    33c6:	68 94       	set
    33c8:	b1 11       	cpse	r27, r1
    33ca:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__fp_szero>
    33ce:	08 95       	ret

000033d0 <__fixunssfsi>:
    33d0:	0e 94 a8 1a 	call	0x3550	; 0x3550 <__fp_splitA>
    33d4:	88 f0       	brcs	.+34     	; 0x33f8 <__fixunssfsi+0x28>
    33d6:	9f 57       	subi	r25, 0x7F	; 127
    33d8:	98 f0       	brcs	.+38     	; 0x3400 <__fixunssfsi+0x30>
    33da:	b9 2f       	mov	r27, r25
    33dc:	99 27       	eor	r25, r25
    33de:	b7 51       	subi	r27, 0x17	; 23
    33e0:	b0 f0       	brcs	.+44     	; 0x340e <__fixunssfsi+0x3e>
    33e2:	e1 f0       	breq	.+56     	; 0x341c <__fixunssfsi+0x4c>
    33e4:	66 0f       	add	r22, r22
    33e6:	77 1f       	adc	r23, r23
    33e8:	88 1f       	adc	r24, r24
    33ea:	99 1f       	adc	r25, r25
    33ec:	1a f0       	brmi	.+6      	; 0x33f4 <__fixunssfsi+0x24>
    33ee:	ba 95       	dec	r27
    33f0:	c9 f7       	brne	.-14     	; 0x33e4 <__fixunssfsi+0x14>
    33f2:	14 c0       	rjmp	.+40     	; 0x341c <__fixunssfsi+0x4c>
    33f4:	b1 30       	cpi	r27, 0x01	; 1
    33f6:	91 f0       	breq	.+36     	; 0x341c <__fixunssfsi+0x4c>
    33f8:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__fp_zero>
    33fc:	b1 e0       	ldi	r27, 0x01	; 1
    33fe:	08 95       	ret
    3400:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__fp_zero>
    3404:	67 2f       	mov	r22, r23
    3406:	78 2f       	mov	r23, r24
    3408:	88 27       	eor	r24, r24
    340a:	b8 5f       	subi	r27, 0xF8	; 248
    340c:	39 f0       	breq	.+14     	; 0x341c <__fixunssfsi+0x4c>
    340e:	b9 3f       	cpi	r27, 0xF9	; 249
    3410:	cc f3       	brlt	.-14     	; 0x3404 <__fixunssfsi+0x34>
    3412:	86 95       	lsr	r24
    3414:	77 95       	ror	r23
    3416:	67 95       	ror	r22
    3418:	b3 95       	inc	r27
    341a:	d9 f7       	brne	.-10     	; 0x3412 <__fixunssfsi+0x42>
    341c:	3e f4       	brtc	.+14     	; 0x342c <__fixunssfsi+0x5c>
    341e:	90 95       	com	r25
    3420:	80 95       	com	r24
    3422:	70 95       	com	r23
    3424:	61 95       	neg	r22
    3426:	7f 4f       	sbci	r23, 0xFF	; 255
    3428:	8f 4f       	sbci	r24, 0xFF	; 255
    342a:	9f 4f       	sbci	r25, 0xFF	; 255
    342c:	08 95       	ret

0000342e <__floatunsisf>:
    342e:	e8 94       	clt
    3430:	09 c0       	rjmp	.+18     	; 0x3444 <__floatsisf+0x12>

00003432 <__floatsisf>:
    3432:	97 fb       	bst	r25, 7
    3434:	3e f4       	brtc	.+14     	; 0x3444 <__floatsisf+0x12>
    3436:	90 95       	com	r25
    3438:	80 95       	com	r24
    343a:	70 95       	com	r23
    343c:	61 95       	neg	r22
    343e:	7f 4f       	sbci	r23, 0xFF	; 255
    3440:	8f 4f       	sbci	r24, 0xFF	; 255
    3442:	9f 4f       	sbci	r25, 0xFF	; 255
    3444:	99 23       	and	r25, r25
    3446:	a9 f0       	breq	.+42     	; 0x3472 <__floatsisf+0x40>
    3448:	f9 2f       	mov	r31, r25
    344a:	96 e9       	ldi	r25, 0x96	; 150
    344c:	bb 27       	eor	r27, r27
    344e:	93 95       	inc	r25
    3450:	f6 95       	lsr	r31
    3452:	87 95       	ror	r24
    3454:	77 95       	ror	r23
    3456:	67 95       	ror	r22
    3458:	b7 95       	ror	r27
    345a:	f1 11       	cpse	r31, r1
    345c:	f8 cf       	rjmp	.-16     	; 0x344e <__floatsisf+0x1c>
    345e:	fa f4       	brpl	.+62     	; 0x349e <__floatsisf+0x6c>
    3460:	bb 0f       	add	r27, r27
    3462:	11 f4       	brne	.+4      	; 0x3468 <__floatsisf+0x36>
    3464:	60 ff       	sbrs	r22, 0
    3466:	1b c0       	rjmp	.+54     	; 0x349e <__floatsisf+0x6c>
    3468:	6f 5f       	subi	r22, 0xFF	; 255
    346a:	7f 4f       	sbci	r23, 0xFF	; 255
    346c:	8f 4f       	sbci	r24, 0xFF	; 255
    346e:	9f 4f       	sbci	r25, 0xFF	; 255
    3470:	16 c0       	rjmp	.+44     	; 0x349e <__floatsisf+0x6c>
    3472:	88 23       	and	r24, r24
    3474:	11 f0       	breq	.+4      	; 0x347a <__floatsisf+0x48>
    3476:	96 e9       	ldi	r25, 0x96	; 150
    3478:	11 c0       	rjmp	.+34     	; 0x349c <__floatsisf+0x6a>
    347a:	77 23       	and	r23, r23
    347c:	21 f0       	breq	.+8      	; 0x3486 <__floatsisf+0x54>
    347e:	9e e8       	ldi	r25, 0x8E	; 142
    3480:	87 2f       	mov	r24, r23
    3482:	76 2f       	mov	r23, r22
    3484:	05 c0       	rjmp	.+10     	; 0x3490 <__floatsisf+0x5e>
    3486:	66 23       	and	r22, r22
    3488:	71 f0       	breq	.+28     	; 0x34a6 <__floatsisf+0x74>
    348a:	96 e8       	ldi	r25, 0x86	; 134
    348c:	86 2f       	mov	r24, r22
    348e:	70 e0       	ldi	r23, 0x00	; 0
    3490:	60 e0       	ldi	r22, 0x00	; 0
    3492:	2a f0       	brmi	.+10     	; 0x349e <__floatsisf+0x6c>
    3494:	9a 95       	dec	r25
    3496:	66 0f       	add	r22, r22
    3498:	77 1f       	adc	r23, r23
    349a:	88 1f       	adc	r24, r24
    349c:	da f7       	brpl	.-10     	; 0x3494 <__floatsisf+0x62>
    349e:	88 0f       	add	r24, r24
    34a0:	96 95       	lsr	r25
    34a2:	87 95       	ror	r24
    34a4:	97 f9       	bld	r25, 7
    34a6:	08 95       	ret

000034a8 <__fp_cmp>:
    34a8:	99 0f       	add	r25, r25
    34aa:	00 08       	sbc	r0, r0
    34ac:	55 0f       	add	r21, r21
    34ae:	aa 0b       	sbc	r26, r26
    34b0:	e0 e8       	ldi	r30, 0x80	; 128
    34b2:	fe ef       	ldi	r31, 0xFE	; 254
    34b4:	16 16       	cp	r1, r22
    34b6:	17 06       	cpc	r1, r23
    34b8:	e8 07       	cpc	r30, r24
    34ba:	f9 07       	cpc	r31, r25
    34bc:	c0 f0       	brcs	.+48     	; 0x34ee <__fp_cmp+0x46>
    34be:	12 16       	cp	r1, r18
    34c0:	13 06       	cpc	r1, r19
    34c2:	e4 07       	cpc	r30, r20
    34c4:	f5 07       	cpc	r31, r21
    34c6:	98 f0       	brcs	.+38     	; 0x34ee <__fp_cmp+0x46>
    34c8:	62 1b       	sub	r22, r18
    34ca:	73 0b       	sbc	r23, r19
    34cc:	84 0b       	sbc	r24, r20
    34ce:	95 0b       	sbc	r25, r21
    34d0:	39 f4       	brne	.+14     	; 0x34e0 <__fp_cmp+0x38>
    34d2:	0a 26       	eor	r0, r26
    34d4:	61 f0       	breq	.+24     	; 0x34ee <__fp_cmp+0x46>
    34d6:	23 2b       	or	r18, r19
    34d8:	24 2b       	or	r18, r20
    34da:	25 2b       	or	r18, r21
    34dc:	21 f4       	brne	.+8      	; 0x34e6 <__fp_cmp+0x3e>
    34de:	08 95       	ret
    34e0:	0a 26       	eor	r0, r26
    34e2:	09 f4       	brne	.+2      	; 0x34e6 <__fp_cmp+0x3e>
    34e4:	a1 40       	sbci	r26, 0x01	; 1
    34e6:	a6 95       	lsr	r26
    34e8:	8f ef       	ldi	r24, 0xFF	; 255
    34ea:	81 1d       	adc	r24, r1
    34ec:	81 1d       	adc	r24, r1
    34ee:	08 95       	ret

000034f0 <__fp_inf>:
    34f0:	97 f9       	bld	r25, 7
    34f2:	9f 67       	ori	r25, 0x7F	; 127
    34f4:	80 e8       	ldi	r24, 0x80	; 128
    34f6:	70 e0       	ldi	r23, 0x00	; 0
    34f8:	60 e0       	ldi	r22, 0x00	; 0
    34fa:	08 95       	ret

000034fc <__fp_nan>:
    34fc:	9f ef       	ldi	r25, 0xFF	; 255
    34fe:	80 ec       	ldi	r24, 0xC0	; 192
    3500:	08 95       	ret

00003502 <__fp_pscA>:
    3502:	00 24       	eor	r0, r0
    3504:	0a 94       	dec	r0
    3506:	16 16       	cp	r1, r22
    3508:	17 06       	cpc	r1, r23
    350a:	18 06       	cpc	r1, r24
    350c:	09 06       	cpc	r0, r25
    350e:	08 95       	ret

00003510 <__fp_pscB>:
    3510:	00 24       	eor	r0, r0
    3512:	0a 94       	dec	r0
    3514:	12 16       	cp	r1, r18
    3516:	13 06       	cpc	r1, r19
    3518:	14 06       	cpc	r1, r20
    351a:	05 06       	cpc	r0, r21
    351c:	08 95       	ret

0000351e <__fp_round>:
    351e:	09 2e       	mov	r0, r25
    3520:	03 94       	inc	r0
    3522:	00 0c       	add	r0, r0
    3524:	11 f4       	brne	.+4      	; 0x352a <__fp_round+0xc>
    3526:	88 23       	and	r24, r24
    3528:	52 f0       	brmi	.+20     	; 0x353e <__fp_round+0x20>
    352a:	bb 0f       	add	r27, r27
    352c:	40 f4       	brcc	.+16     	; 0x353e <__fp_round+0x20>
    352e:	bf 2b       	or	r27, r31
    3530:	11 f4       	brne	.+4      	; 0x3536 <__fp_round+0x18>
    3532:	60 ff       	sbrs	r22, 0
    3534:	04 c0       	rjmp	.+8      	; 0x353e <__fp_round+0x20>
    3536:	6f 5f       	subi	r22, 0xFF	; 255
    3538:	7f 4f       	sbci	r23, 0xFF	; 255
    353a:	8f 4f       	sbci	r24, 0xFF	; 255
    353c:	9f 4f       	sbci	r25, 0xFF	; 255
    353e:	08 95       	ret

00003540 <__fp_split3>:
    3540:	57 fd       	sbrc	r21, 7
    3542:	90 58       	subi	r25, 0x80	; 128
    3544:	44 0f       	add	r20, r20
    3546:	55 1f       	adc	r21, r21
    3548:	59 f0       	breq	.+22     	; 0x3560 <__fp_splitA+0x10>
    354a:	5f 3f       	cpi	r21, 0xFF	; 255
    354c:	71 f0       	breq	.+28     	; 0x356a <__fp_splitA+0x1a>
    354e:	47 95       	ror	r20

00003550 <__fp_splitA>:
    3550:	88 0f       	add	r24, r24
    3552:	97 fb       	bst	r25, 7
    3554:	99 1f       	adc	r25, r25
    3556:	61 f0       	breq	.+24     	; 0x3570 <__fp_splitA+0x20>
    3558:	9f 3f       	cpi	r25, 0xFF	; 255
    355a:	79 f0       	breq	.+30     	; 0x357a <__fp_splitA+0x2a>
    355c:	87 95       	ror	r24
    355e:	08 95       	ret
    3560:	12 16       	cp	r1, r18
    3562:	13 06       	cpc	r1, r19
    3564:	14 06       	cpc	r1, r20
    3566:	55 1f       	adc	r21, r21
    3568:	f2 cf       	rjmp	.-28     	; 0x354e <__fp_split3+0xe>
    356a:	46 95       	lsr	r20
    356c:	f1 df       	rcall	.-30     	; 0x3550 <__fp_splitA>
    356e:	08 c0       	rjmp	.+16     	; 0x3580 <__fp_splitA+0x30>
    3570:	16 16       	cp	r1, r22
    3572:	17 06       	cpc	r1, r23
    3574:	18 06       	cpc	r1, r24
    3576:	99 1f       	adc	r25, r25
    3578:	f1 cf       	rjmp	.-30     	; 0x355c <__fp_splitA+0xc>
    357a:	86 95       	lsr	r24
    357c:	71 05       	cpc	r23, r1
    357e:	61 05       	cpc	r22, r1
    3580:	08 94       	sec
    3582:	08 95       	ret

00003584 <__fp_zero>:
    3584:	e8 94       	clt

00003586 <__fp_szero>:
    3586:	bb 27       	eor	r27, r27
    3588:	66 27       	eor	r22, r22
    358a:	77 27       	eor	r23, r23
    358c:	cb 01       	movw	r24, r22
    358e:	97 f9       	bld	r25, 7
    3590:	08 95       	ret

00003592 <__gesf2>:
    3592:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__fp_cmp>
    3596:	08 f4       	brcc	.+2      	; 0x359a <__gesf2+0x8>
    3598:	8f ef       	ldi	r24, 0xFF	; 255
    359a:	08 95       	ret

0000359c <__mulsf3>:
    359c:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <__mulsf3x>
    35a0:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__fp_round>
    35a4:	0e 94 81 1a 	call	0x3502	; 0x3502 <__fp_pscA>
    35a8:	38 f0       	brcs	.+14     	; 0x35b8 <__mulsf3+0x1c>
    35aa:	0e 94 88 1a 	call	0x3510	; 0x3510 <__fp_pscB>
    35ae:	20 f0       	brcs	.+8      	; 0x35b8 <__mulsf3+0x1c>
    35b0:	95 23       	and	r25, r21
    35b2:	11 f0       	breq	.+4      	; 0x35b8 <__mulsf3+0x1c>
    35b4:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__fp_inf>
    35b8:	0c 94 7e 1a 	jmp	0x34fc	; 0x34fc <__fp_nan>
    35bc:	11 24       	eor	r1, r1
    35be:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__fp_szero>

000035c2 <__mulsf3x>:
    35c2:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__fp_split3>
    35c6:	70 f3       	brcs	.-36     	; 0x35a4 <__mulsf3+0x8>

000035c8 <__mulsf3_pse>:
    35c8:	95 9f       	mul	r25, r21
    35ca:	c1 f3       	breq	.-16     	; 0x35bc <__mulsf3+0x20>
    35cc:	95 0f       	add	r25, r21
    35ce:	50 e0       	ldi	r21, 0x00	; 0
    35d0:	55 1f       	adc	r21, r21
    35d2:	62 9f       	mul	r22, r18
    35d4:	f0 01       	movw	r30, r0
    35d6:	72 9f       	mul	r23, r18
    35d8:	bb 27       	eor	r27, r27
    35da:	f0 0d       	add	r31, r0
    35dc:	b1 1d       	adc	r27, r1
    35de:	63 9f       	mul	r22, r19
    35e0:	aa 27       	eor	r26, r26
    35e2:	f0 0d       	add	r31, r0
    35e4:	b1 1d       	adc	r27, r1
    35e6:	aa 1f       	adc	r26, r26
    35e8:	64 9f       	mul	r22, r20
    35ea:	66 27       	eor	r22, r22
    35ec:	b0 0d       	add	r27, r0
    35ee:	a1 1d       	adc	r26, r1
    35f0:	66 1f       	adc	r22, r22
    35f2:	82 9f       	mul	r24, r18
    35f4:	22 27       	eor	r18, r18
    35f6:	b0 0d       	add	r27, r0
    35f8:	a1 1d       	adc	r26, r1
    35fa:	62 1f       	adc	r22, r18
    35fc:	73 9f       	mul	r23, r19
    35fe:	b0 0d       	add	r27, r0
    3600:	a1 1d       	adc	r26, r1
    3602:	62 1f       	adc	r22, r18
    3604:	83 9f       	mul	r24, r19
    3606:	a0 0d       	add	r26, r0
    3608:	61 1d       	adc	r22, r1
    360a:	22 1f       	adc	r18, r18
    360c:	74 9f       	mul	r23, r20
    360e:	33 27       	eor	r19, r19
    3610:	a0 0d       	add	r26, r0
    3612:	61 1d       	adc	r22, r1
    3614:	23 1f       	adc	r18, r19
    3616:	84 9f       	mul	r24, r20
    3618:	60 0d       	add	r22, r0
    361a:	21 1d       	adc	r18, r1
    361c:	82 2f       	mov	r24, r18
    361e:	76 2f       	mov	r23, r22
    3620:	6a 2f       	mov	r22, r26
    3622:	11 24       	eor	r1, r1
    3624:	9f 57       	subi	r25, 0x7F	; 127
    3626:	50 40       	sbci	r21, 0x00	; 0
    3628:	9a f0       	brmi	.+38     	; 0x3650 <__mulsf3_pse+0x88>
    362a:	f1 f0       	breq	.+60     	; 0x3668 <__mulsf3_pse+0xa0>
    362c:	88 23       	and	r24, r24
    362e:	4a f0       	brmi	.+18     	; 0x3642 <__mulsf3_pse+0x7a>
    3630:	ee 0f       	add	r30, r30
    3632:	ff 1f       	adc	r31, r31
    3634:	bb 1f       	adc	r27, r27
    3636:	66 1f       	adc	r22, r22
    3638:	77 1f       	adc	r23, r23
    363a:	88 1f       	adc	r24, r24
    363c:	91 50       	subi	r25, 0x01	; 1
    363e:	50 40       	sbci	r21, 0x00	; 0
    3640:	a9 f7       	brne	.-22     	; 0x362c <__mulsf3_pse+0x64>
    3642:	9e 3f       	cpi	r25, 0xFE	; 254
    3644:	51 05       	cpc	r21, r1
    3646:	80 f0       	brcs	.+32     	; 0x3668 <__mulsf3_pse+0xa0>
    3648:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__fp_inf>
    364c:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__fp_szero>
    3650:	5f 3f       	cpi	r21, 0xFF	; 255
    3652:	e4 f3       	brlt	.-8      	; 0x364c <__mulsf3_pse+0x84>
    3654:	98 3e       	cpi	r25, 0xE8	; 232
    3656:	d4 f3       	brlt	.-12     	; 0x364c <__mulsf3_pse+0x84>
    3658:	86 95       	lsr	r24
    365a:	77 95       	ror	r23
    365c:	67 95       	ror	r22
    365e:	b7 95       	ror	r27
    3660:	f7 95       	ror	r31
    3662:	e7 95       	ror	r30
    3664:	9f 5f       	subi	r25, 0xFF	; 255
    3666:	c1 f7       	brne	.-16     	; 0x3658 <__mulsf3_pse+0x90>
    3668:	fe 2b       	or	r31, r30
    366a:	88 0f       	add	r24, r24
    366c:	91 1d       	adc	r25, r1
    366e:	96 95       	lsr	r25
    3670:	87 95       	ror	r24
    3672:	97 f9       	bld	r25, 7
    3674:	08 95       	ret

00003676 <pow>:
    3676:	fa 01       	movw	r30, r20
    3678:	ee 0f       	add	r30, r30
    367a:	ff 1f       	adc	r31, r31
    367c:	30 96       	adiw	r30, 0x00	; 0
    367e:	21 05       	cpc	r18, r1
    3680:	31 05       	cpc	r19, r1
    3682:	a1 f1       	breq	.+104    	; 0x36ec <pow+0x76>
    3684:	61 15       	cp	r22, r1
    3686:	71 05       	cpc	r23, r1
    3688:	61 f4       	brne	.+24     	; 0x36a2 <pow+0x2c>
    368a:	80 38       	cpi	r24, 0x80	; 128
    368c:	bf e3       	ldi	r27, 0x3F	; 63
    368e:	9b 07       	cpc	r25, r27
    3690:	49 f1       	breq	.+82     	; 0x36e4 <pow+0x6e>
    3692:	68 94       	set
    3694:	90 38       	cpi	r25, 0x80	; 128
    3696:	81 05       	cpc	r24, r1
    3698:	61 f0       	breq	.+24     	; 0x36b2 <pow+0x3c>
    369a:	80 38       	cpi	r24, 0x80	; 128
    369c:	bf ef       	ldi	r27, 0xFF	; 255
    369e:	9b 07       	cpc	r25, r27
    36a0:	41 f0       	breq	.+16     	; 0x36b2 <pow+0x3c>
    36a2:	99 23       	and	r25, r25
    36a4:	4a f5       	brpl	.+82     	; 0x36f8 <pow+0x82>
    36a6:	ff 3f       	cpi	r31, 0xFF	; 255
    36a8:	e1 05       	cpc	r30, r1
    36aa:	31 05       	cpc	r19, r1
    36ac:	21 05       	cpc	r18, r1
    36ae:	19 f1       	breq	.+70     	; 0x36f6 <pow+0x80>
    36b0:	e8 94       	clt
    36b2:	08 94       	sec
    36b4:	e7 95       	ror	r30
    36b6:	d9 01       	movw	r26, r18
    36b8:	aa 23       	and	r26, r26
    36ba:	29 f4       	brne	.+10     	; 0x36c6 <pow+0x50>
    36bc:	ab 2f       	mov	r26, r27
    36be:	be 2f       	mov	r27, r30
    36c0:	f8 5f       	subi	r31, 0xF8	; 248
    36c2:	d0 f3       	brcs	.-12     	; 0x36b8 <pow+0x42>
    36c4:	10 c0       	rjmp	.+32     	; 0x36e6 <pow+0x70>
    36c6:	ff 5f       	subi	r31, 0xFF	; 255
    36c8:	70 f4       	brcc	.+28     	; 0x36e6 <pow+0x70>
    36ca:	a6 95       	lsr	r26
    36cc:	e0 f7       	brcc	.-8      	; 0x36c6 <pow+0x50>
    36ce:	f7 39       	cpi	r31, 0x97	; 151
    36d0:	50 f0       	brcs	.+20     	; 0x36e6 <pow+0x70>
    36d2:	19 f0       	breq	.+6      	; 0x36da <pow+0x64>
    36d4:	ff 3a       	cpi	r31, 0xAF	; 175
    36d6:	38 f4       	brcc	.+14     	; 0x36e6 <pow+0x70>
    36d8:	9f 77       	andi	r25, 0x7F	; 127
    36da:	9f 93       	push	r25
    36dc:	0d d0       	rcall	.+26     	; 0x36f8 <pow+0x82>
    36de:	0f 90       	pop	r0
    36e0:	07 fc       	sbrc	r0, 7
    36e2:	90 58       	subi	r25, 0x80	; 128
    36e4:	08 95       	ret
    36e6:	46 f0       	brts	.+16     	; 0x36f8 <pow+0x82>
    36e8:	0c 94 7e 1a 	jmp	0x34fc	; 0x34fc <__fp_nan>
    36ec:	60 e0       	ldi	r22, 0x00	; 0
    36ee:	70 e0       	ldi	r23, 0x00	; 0
    36f0:	80 e8       	ldi	r24, 0x80	; 128
    36f2:	9f e3       	ldi	r25, 0x3F	; 63
    36f4:	08 95       	ret
    36f6:	4f e7       	ldi	r20, 0x7F	; 127
    36f8:	9f 77       	andi	r25, 0x7F	; 127
    36fa:	5f 93       	push	r21
    36fc:	4f 93       	push	r20
    36fe:	3f 93       	push	r19
    3700:	2f 93       	push	r18
    3702:	0e 94 36 1c 	call	0x386c	; 0x386c <log>
    3706:	2f 91       	pop	r18
    3708:	3f 91       	pop	r19
    370a:	4f 91       	pop	r20
    370c:	5f 91       	pop	r21
    370e:	0e 94 ce 1a 	call	0x359c	; 0x359c <__mulsf3>
    3712:	0c 94 93 1b 	jmp	0x3726	; 0x3726 <exp>
    3716:	29 f4       	brne	.+10     	; 0x3722 <pow+0xac>
    3718:	16 f0       	brts	.+4      	; 0x371e <pow+0xa8>
    371a:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__fp_inf>
    371e:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__fp_zero>
    3722:	0c 94 7e 1a 	jmp	0x34fc	; 0x34fc <__fp_nan>

00003726 <exp>:
    3726:	0e 94 a8 1a 	call	0x3550	; 0x3550 <__fp_splitA>
    372a:	a8 f3       	brcs	.-22     	; 0x3716 <pow+0xa0>
    372c:	96 38       	cpi	r25, 0x86	; 134
    372e:	a0 f7       	brcc	.-24     	; 0x3718 <pow+0xa2>
    3730:	07 f8       	bld	r0, 7
    3732:	0f 92       	push	r0
    3734:	e8 94       	clt
    3736:	2b e3       	ldi	r18, 0x3B	; 59
    3738:	3a ea       	ldi	r19, 0xAA	; 170
    373a:	48 eb       	ldi	r20, 0xB8	; 184
    373c:	5f e7       	ldi	r21, 0x7F	; 127
    373e:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__mulsf3_pse>
    3742:	0f 92       	push	r0
    3744:	0f 92       	push	r0
    3746:	0f 92       	push	r0
    3748:	4d b7       	in	r20, 0x3d	; 61
    374a:	5e b7       	in	r21, 0x3e	; 62
    374c:	0f 92       	push	r0
    374e:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <modf>
    3752:	e8 ee       	ldi	r30, 0xE8	; 232
    3754:	f0 e0       	ldi	r31, 0x00	; 0
    3756:	0e 94 c5 1b 	call	0x378a	; 0x378a <__fp_powser>
    375a:	4f 91       	pop	r20
    375c:	5f 91       	pop	r21
    375e:	ef 91       	pop	r30
    3760:	ff 91       	pop	r31
    3762:	e5 95       	asr	r30
    3764:	ee 1f       	adc	r30, r30
    3766:	ff 1f       	adc	r31, r31
    3768:	49 f0       	breq	.+18     	; 0x377c <exp+0x56>
    376a:	fe 57       	subi	r31, 0x7E	; 126
    376c:	e0 68       	ori	r30, 0x80	; 128
    376e:	44 27       	eor	r20, r20
    3770:	ee 0f       	add	r30, r30
    3772:	44 1f       	adc	r20, r20
    3774:	fa 95       	dec	r31
    3776:	e1 f7       	brne	.-8      	; 0x3770 <exp+0x4a>
    3778:	41 95       	neg	r20
    377a:	55 0b       	sbc	r21, r21
    377c:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <ldexp>
    3780:	0f 90       	pop	r0
    3782:	07 fe       	sbrs	r0, 7
    3784:	0c 94 ec 1b 	jmp	0x37d8	; 0x37d8 <inverse>
    3788:	08 95       	ret

0000378a <__fp_powser>:
    378a:	df 93       	push	r29
    378c:	cf 93       	push	r28
    378e:	1f 93       	push	r17
    3790:	0f 93       	push	r16
    3792:	ff 92       	push	r15
    3794:	ef 92       	push	r14
    3796:	df 92       	push	r13
    3798:	7b 01       	movw	r14, r22
    379a:	8c 01       	movw	r16, r24
    379c:	68 94       	set
    379e:	06 c0       	rjmp	.+12     	; 0x37ac <__fp_powser+0x22>
    37a0:	da 2e       	mov	r13, r26
    37a2:	ef 01       	movw	r28, r30
    37a4:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <__mulsf3x>
    37a8:	fe 01       	movw	r30, r28
    37aa:	e8 94       	clt
    37ac:	a5 91       	lpm	r26, Z+
    37ae:	25 91       	lpm	r18, Z+
    37b0:	35 91       	lpm	r19, Z+
    37b2:	45 91       	lpm	r20, Z+
    37b4:	55 91       	lpm	r21, Z+
    37b6:	a6 f3       	brts	.-24     	; 0x37a0 <__fp_powser+0x16>
    37b8:	ef 01       	movw	r28, r30
    37ba:	0e 94 15 19 	call	0x322a	; 0x322a <__addsf3x>
    37be:	fe 01       	movw	r30, r28
    37c0:	97 01       	movw	r18, r14
    37c2:	a8 01       	movw	r20, r16
    37c4:	da 94       	dec	r13
    37c6:	69 f7       	brne	.-38     	; 0x37a2 <__fp_powser+0x18>
    37c8:	df 90       	pop	r13
    37ca:	ef 90       	pop	r14
    37cc:	ff 90       	pop	r15
    37ce:	0f 91       	pop	r16
    37d0:	1f 91       	pop	r17
    37d2:	cf 91       	pop	r28
    37d4:	df 91       	pop	r29
    37d6:	08 95       	ret

000037d8 <inverse>:
    37d8:	9b 01       	movw	r18, r22
    37da:	ac 01       	movw	r20, r24
    37dc:	60 e0       	ldi	r22, 0x00	; 0
    37de:	70 e0       	ldi	r23, 0x00	; 0
    37e0:	80 e8       	ldi	r24, 0x80	; 128
    37e2:	9f e3       	ldi	r25, 0x3F	; 63
    37e4:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__divsf3>
    37e8:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__fp_inf>
    37ec:	0c 94 b2 1c 	jmp	0x3964	; 0x3964 <__fp_mpack>

000037f0 <ldexp>:
    37f0:	0e 94 a8 1a 	call	0x3550	; 0x3550 <__fp_splitA>
    37f4:	d8 f3       	brcs	.-10     	; 0x37ec <inverse+0x14>
    37f6:	99 23       	and	r25, r25
    37f8:	c9 f3       	breq	.-14     	; 0x37ec <inverse+0x14>
    37fa:	94 0f       	add	r25, r20
    37fc:	51 1d       	adc	r21, r1
    37fe:	a3 f3       	brvs	.-24     	; 0x37e8 <inverse+0x10>
    3800:	91 50       	subi	r25, 0x01	; 1
    3802:	50 40       	sbci	r21, 0x00	; 0
    3804:	94 f0       	brlt	.+36     	; 0x382a <ldexp+0x3a>
    3806:	59 f0       	breq	.+22     	; 0x381e <ldexp+0x2e>
    3808:	88 23       	and	r24, r24
    380a:	32 f0       	brmi	.+12     	; 0x3818 <ldexp+0x28>
    380c:	66 0f       	add	r22, r22
    380e:	77 1f       	adc	r23, r23
    3810:	88 1f       	adc	r24, r24
    3812:	91 50       	subi	r25, 0x01	; 1
    3814:	50 40       	sbci	r21, 0x00	; 0
    3816:	c1 f7       	brne	.-16     	; 0x3808 <ldexp+0x18>
    3818:	9e 3f       	cpi	r25, 0xFE	; 254
    381a:	51 05       	cpc	r21, r1
    381c:	2c f7       	brge	.-54     	; 0x37e8 <inverse+0x10>
    381e:	88 0f       	add	r24, r24
    3820:	91 1d       	adc	r25, r1
    3822:	96 95       	lsr	r25
    3824:	87 95       	ror	r24
    3826:	97 f9       	bld	r25, 7
    3828:	08 95       	ret
    382a:	5f 3f       	cpi	r21, 0xFF	; 255
    382c:	ac f0       	brlt	.+42     	; 0x3858 <ldexp+0x68>
    382e:	98 3e       	cpi	r25, 0xE8	; 232
    3830:	9c f0       	brlt	.+38     	; 0x3858 <ldexp+0x68>
    3832:	bb 27       	eor	r27, r27
    3834:	86 95       	lsr	r24
    3836:	77 95       	ror	r23
    3838:	67 95       	ror	r22
    383a:	b7 95       	ror	r27
    383c:	08 f4       	brcc	.+2      	; 0x3840 <ldexp+0x50>
    383e:	b1 60       	ori	r27, 0x01	; 1
    3840:	93 95       	inc	r25
    3842:	c1 f7       	brne	.-16     	; 0x3834 <ldexp+0x44>
    3844:	bb 0f       	add	r27, r27
    3846:	58 f7       	brcc	.-42     	; 0x381e <ldexp+0x2e>
    3848:	11 f4       	brne	.+4      	; 0x384e <ldexp+0x5e>
    384a:	60 ff       	sbrs	r22, 0
    384c:	e8 cf       	rjmp	.-48     	; 0x381e <ldexp+0x2e>
    384e:	6f 5f       	subi	r22, 0xFF	; 255
    3850:	7f 4f       	sbci	r23, 0xFF	; 255
    3852:	8f 4f       	sbci	r24, 0xFF	; 255
    3854:	9f 4f       	sbci	r25, 0xFF	; 255
    3856:	e3 cf       	rjmp	.-58     	; 0x381e <ldexp+0x2e>
    3858:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__fp_szero>
    385c:	16 f0       	brts	.+4      	; 0x3862 <ldexp+0x72>
    385e:	0c 94 b2 1c 	jmp	0x3964	; 0x3964 <__fp_mpack>
    3862:	0c 94 7e 1a 	jmp	0x34fc	; 0x34fc <__fp_nan>
    3866:	68 94       	set
    3868:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__fp_inf>

0000386c <log>:
    386c:	0e 94 a8 1a 	call	0x3550	; 0x3550 <__fp_splitA>
    3870:	a8 f3       	brcs	.-22     	; 0x385c <ldexp+0x6c>
    3872:	99 23       	and	r25, r25
    3874:	c1 f3       	breq	.-16     	; 0x3866 <ldexp+0x76>
    3876:	ae f3       	brts	.-22     	; 0x3862 <ldexp+0x72>
    3878:	df 93       	push	r29
    387a:	cf 93       	push	r28
    387c:	1f 93       	push	r17
    387e:	0f 93       	push	r16
    3880:	ff 92       	push	r15
    3882:	c9 2f       	mov	r28, r25
    3884:	dd 27       	eor	r29, r29
    3886:	88 23       	and	r24, r24
    3888:	2a f0       	brmi	.+10     	; 0x3894 <log+0x28>
    388a:	21 97       	sbiw	r28, 0x01	; 1
    388c:	66 0f       	add	r22, r22
    388e:	77 1f       	adc	r23, r23
    3890:	88 1f       	adc	r24, r24
    3892:	da f7       	brpl	.-10     	; 0x388a <log+0x1e>
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	40 e8       	ldi	r20, 0x80	; 128
    389a:	5f eb       	ldi	r21, 0xBF	; 191
    389c:	9f e3       	ldi	r25, 0x3F	; 63
    389e:	88 39       	cpi	r24, 0x98	; 152
    38a0:	20 f0       	brcs	.+8      	; 0x38aa <log+0x3e>
    38a2:	80 3e       	cpi	r24, 0xE0	; 224
    38a4:	38 f0       	brcs	.+14     	; 0x38b4 <log+0x48>
    38a6:	21 96       	adiw	r28, 0x01	; 1
    38a8:	8f 77       	andi	r24, 0x7F	; 127
    38aa:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__addsf3>
    38ae:	e0 e1       	ldi	r30, 0x10	; 16
    38b0:	f1 e0       	ldi	r31, 0x01	; 1
    38b2:	04 c0       	rjmp	.+8      	; 0x38bc <log+0x50>
    38b4:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__addsf3>
    38b8:	ed e3       	ldi	r30, 0x3D	; 61
    38ba:	f1 e0       	ldi	r31, 0x01	; 1
    38bc:	0e 94 c5 1b 	call	0x378a	; 0x378a <__fp_powser>
    38c0:	8b 01       	movw	r16, r22
    38c2:	be 01       	movw	r22, r28
    38c4:	ec 01       	movw	r28, r24
    38c6:	fb 2e       	mov	r15, r27
    38c8:	6f 57       	subi	r22, 0x7F	; 127
    38ca:	71 09       	sbc	r23, r1
    38cc:	75 95       	asr	r23
    38ce:	77 1f       	adc	r23, r23
    38d0:	88 0b       	sbc	r24, r24
    38d2:	99 0b       	sbc	r25, r25
    38d4:	0e 94 19 1a 	call	0x3432	; 0x3432 <__floatsisf>
    38d8:	28 e1       	ldi	r18, 0x18	; 24
    38da:	32 e7       	ldi	r19, 0x72	; 114
    38dc:	41 e3       	ldi	r20, 0x31	; 49
    38de:	5f e3       	ldi	r21, 0x3F	; 63
    38e0:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <__mulsf3x>
    38e4:	af 2d       	mov	r26, r15
    38e6:	98 01       	movw	r18, r16
    38e8:	ae 01       	movw	r20, r28
    38ea:	ff 90       	pop	r15
    38ec:	0f 91       	pop	r16
    38ee:	1f 91       	pop	r17
    38f0:	cf 91       	pop	r28
    38f2:	df 91       	pop	r29
    38f4:	0e 94 15 19 	call	0x322a	; 0x322a <__addsf3x>
    38f8:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__fp_round>

000038fc <modf>:
    38fc:	fa 01       	movw	r30, r20
    38fe:	dc 01       	movw	r26, r24
    3900:	aa 0f       	add	r26, r26
    3902:	bb 1f       	adc	r27, r27
    3904:	9b 01       	movw	r18, r22
    3906:	ac 01       	movw	r20, r24
    3908:	bf 57       	subi	r27, 0x7F	; 127
    390a:	28 f4       	brcc	.+10     	; 0x3916 <modf+0x1a>
    390c:	22 27       	eor	r18, r18
    390e:	33 27       	eor	r19, r19
    3910:	44 27       	eor	r20, r20
    3912:	50 78       	andi	r21, 0x80	; 128
    3914:	20 c0       	rjmp	.+64     	; 0x3956 <modf+0x5a>
    3916:	b7 51       	subi	r27, 0x17	; 23
    3918:	90 f4       	brcc	.+36     	; 0x393e <modf+0x42>
    391a:	ab 2f       	mov	r26, r27
    391c:	00 24       	eor	r0, r0
    391e:	46 95       	lsr	r20
    3920:	37 95       	ror	r19
    3922:	27 95       	ror	r18
    3924:	01 1c       	adc	r0, r1
    3926:	a3 95       	inc	r26
    3928:	d2 f3       	brmi	.-12     	; 0x391e <modf+0x22>
    392a:	00 20       	and	r0, r0
    392c:	71 f0       	breq	.+28     	; 0x394a <modf+0x4e>
    392e:	22 0f       	add	r18, r18
    3930:	33 1f       	adc	r19, r19
    3932:	44 1f       	adc	r20, r20
    3934:	b3 95       	inc	r27
    3936:	da f3       	brmi	.-10     	; 0x392e <modf+0x32>
    3938:	0e d0       	rcall	.+28     	; 0x3956 <modf+0x5a>
    393a:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__subsf3>
    393e:	61 30       	cpi	r22, 0x01	; 1
    3940:	71 05       	cpc	r23, r1
    3942:	a0 e8       	ldi	r26, 0x80	; 128
    3944:	8a 07       	cpc	r24, r26
    3946:	b9 46       	sbci	r27, 0x69	; 105
    3948:	30 f4       	brcc	.+12     	; 0x3956 <modf+0x5a>
    394a:	9b 01       	movw	r18, r22
    394c:	ac 01       	movw	r20, r24
    394e:	66 27       	eor	r22, r22
    3950:	77 27       	eor	r23, r23
    3952:	88 27       	eor	r24, r24
    3954:	90 78       	andi	r25, 0x80	; 128
    3956:	30 96       	adiw	r30, 0x00	; 0
    3958:	21 f0       	breq	.+8      	; 0x3962 <modf+0x66>
    395a:	20 83       	st	Z, r18
    395c:	31 83       	std	Z+1, r19	; 0x01
    395e:	42 83       	std	Z+2, r20	; 0x02
    3960:	53 83       	std	Z+3, r21	; 0x03
    3962:	08 95       	ret

00003964 <__fp_mpack>:
    3964:	9f 3f       	cpi	r25, 0xFF	; 255
    3966:	31 f0       	breq	.+12     	; 0x3974 <__fp_mpack_finite+0xc>

00003968 <__fp_mpack_finite>:
    3968:	91 50       	subi	r25, 0x01	; 1
    396a:	20 f4       	brcc	.+8      	; 0x3974 <__fp_mpack_finite+0xc>
    396c:	87 95       	ror	r24
    396e:	77 95       	ror	r23
    3970:	67 95       	ror	r22
    3972:	b7 95       	ror	r27
    3974:	88 0f       	add	r24, r24
    3976:	91 1d       	adc	r25, r1
    3978:	96 95       	lsr	r25
    397a:	87 95       	ror	r24
    397c:	97 f9       	bld	r25, 7
    397e:	08 95       	ret

00003980 <__divmodhi4>:
    3980:	97 fb       	bst	r25, 7
    3982:	07 2e       	mov	r0, r23
    3984:	16 f4       	brtc	.+4      	; 0x398a <__divmodhi4+0xa>
    3986:	00 94       	com	r0
    3988:	07 d0       	rcall	.+14     	; 0x3998 <__divmodhi4_neg1>
    398a:	77 fd       	sbrc	r23, 7
    398c:	09 d0       	rcall	.+18     	; 0x39a0 <__divmodhi4_neg2>
    398e:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodhi4>
    3992:	07 fc       	sbrc	r0, 7
    3994:	05 d0       	rcall	.+10     	; 0x39a0 <__divmodhi4_neg2>
    3996:	3e f4       	brtc	.+14     	; 0x39a6 <__divmodhi4_exit>

00003998 <__divmodhi4_neg1>:
    3998:	90 95       	com	r25
    399a:	81 95       	neg	r24
    399c:	9f 4f       	sbci	r25, 0xFF	; 255
    399e:	08 95       	ret

000039a0 <__divmodhi4_neg2>:
    39a0:	70 95       	com	r23
    39a2:	61 95       	neg	r22
    39a4:	7f 4f       	sbci	r23, 0xFF	; 255

000039a6 <__divmodhi4_exit>:
    39a6:	08 95       	ret

000039a8 <__divmodsi4>:
    39a8:	05 2e       	mov	r0, r21
    39aa:	97 fb       	bst	r25, 7
    39ac:	1e f4       	brtc	.+6      	; 0x39b4 <__divmodsi4+0xc>
    39ae:	00 94       	com	r0
    39b0:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <__negsi2>
    39b4:	57 fd       	sbrc	r21, 7
    39b6:	07 d0       	rcall	.+14     	; 0x39c6 <__divmodsi4_neg2>
    39b8:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <__udivmodsi4>
    39bc:	07 fc       	sbrc	r0, 7
    39be:	03 d0       	rcall	.+6      	; 0x39c6 <__divmodsi4_neg2>
    39c0:	4e f4       	brtc	.+18     	; 0x39d4 <__divmodsi4_exit>
    39c2:	0c 94 eb 1c 	jmp	0x39d6	; 0x39d6 <__negsi2>

000039c6 <__divmodsi4_neg2>:
    39c6:	50 95       	com	r21
    39c8:	40 95       	com	r20
    39ca:	30 95       	com	r19
    39cc:	21 95       	neg	r18
    39ce:	3f 4f       	sbci	r19, 0xFF	; 255
    39d0:	4f 4f       	sbci	r20, 0xFF	; 255
    39d2:	5f 4f       	sbci	r21, 0xFF	; 255

000039d4 <__divmodsi4_exit>:
    39d4:	08 95       	ret

000039d6 <__negsi2>:
    39d6:	90 95       	com	r25
    39d8:	80 95       	com	r24
    39da:	70 95       	com	r23
    39dc:	61 95       	neg	r22
    39de:	7f 4f       	sbci	r23, 0xFF	; 255
    39e0:	8f 4f       	sbci	r24, 0xFF	; 255
    39e2:	9f 4f       	sbci	r25, 0xFF	; 255
    39e4:	08 95       	ret

000039e6 <__umulhisi3>:
    39e6:	a2 9f       	mul	r26, r18
    39e8:	b0 01       	movw	r22, r0
    39ea:	b3 9f       	mul	r27, r19
    39ec:	c0 01       	movw	r24, r0
    39ee:	a3 9f       	mul	r26, r19
    39f0:	70 0d       	add	r23, r0
    39f2:	81 1d       	adc	r24, r1
    39f4:	11 24       	eor	r1, r1
    39f6:	91 1d       	adc	r25, r1
    39f8:	b2 9f       	mul	r27, r18
    39fa:	70 0d       	add	r23, r0
    39fc:	81 1d       	adc	r24, r1
    39fe:	11 24       	eor	r1, r1
    3a00:	91 1d       	adc	r25, r1
    3a02:	08 95       	ret

00003a04 <__udivmodhi4>:
    3a04:	aa 1b       	sub	r26, r26
    3a06:	bb 1b       	sub	r27, r27
    3a08:	51 e1       	ldi	r21, 0x11	; 17
    3a0a:	07 c0       	rjmp	.+14     	; 0x3a1a <__udivmodhi4_ep>

00003a0c <__udivmodhi4_loop>:
    3a0c:	aa 1f       	adc	r26, r26
    3a0e:	bb 1f       	adc	r27, r27
    3a10:	a6 17       	cp	r26, r22
    3a12:	b7 07       	cpc	r27, r23
    3a14:	10 f0       	brcs	.+4      	; 0x3a1a <__udivmodhi4_ep>
    3a16:	a6 1b       	sub	r26, r22
    3a18:	b7 0b       	sbc	r27, r23

00003a1a <__udivmodhi4_ep>:
    3a1a:	88 1f       	adc	r24, r24
    3a1c:	99 1f       	adc	r25, r25
    3a1e:	5a 95       	dec	r21
    3a20:	a9 f7       	brne	.-22     	; 0x3a0c <__udivmodhi4_loop>
    3a22:	80 95       	com	r24
    3a24:	90 95       	com	r25
    3a26:	bc 01       	movw	r22, r24
    3a28:	cd 01       	movw	r24, r26
    3a2a:	08 95       	ret

00003a2c <__udivmodsi4>:
    3a2c:	a1 e2       	ldi	r26, 0x21	; 33
    3a2e:	1a 2e       	mov	r1, r26
    3a30:	aa 1b       	sub	r26, r26
    3a32:	bb 1b       	sub	r27, r27
    3a34:	fd 01       	movw	r30, r26
    3a36:	0d c0       	rjmp	.+26     	; 0x3a52 <__udivmodsi4_ep>

00003a38 <__udivmodsi4_loop>:
    3a38:	aa 1f       	adc	r26, r26
    3a3a:	bb 1f       	adc	r27, r27
    3a3c:	ee 1f       	adc	r30, r30
    3a3e:	ff 1f       	adc	r31, r31
    3a40:	a2 17       	cp	r26, r18
    3a42:	b3 07       	cpc	r27, r19
    3a44:	e4 07       	cpc	r30, r20
    3a46:	f5 07       	cpc	r31, r21
    3a48:	20 f0       	brcs	.+8      	; 0x3a52 <__udivmodsi4_ep>
    3a4a:	a2 1b       	sub	r26, r18
    3a4c:	b3 0b       	sbc	r27, r19
    3a4e:	e4 0b       	sbc	r30, r20
    3a50:	f5 0b       	sbc	r31, r21

00003a52 <__udivmodsi4_ep>:
    3a52:	66 1f       	adc	r22, r22
    3a54:	77 1f       	adc	r23, r23
    3a56:	88 1f       	adc	r24, r24
    3a58:	99 1f       	adc	r25, r25
    3a5a:	1a 94       	dec	r1
    3a5c:	69 f7       	brne	.-38     	; 0x3a38 <__udivmodsi4_loop>
    3a5e:	60 95       	com	r22
    3a60:	70 95       	com	r23
    3a62:	80 95       	com	r24
    3a64:	90 95       	com	r25
    3a66:	9b 01       	movw	r18, r22
    3a68:	ac 01       	movw	r20, r24
    3a6a:	bd 01       	movw	r22, r26
    3a6c:	cf 01       	movw	r24, r30
    3a6e:	08 95       	ret

00003a70 <_exit>:
    3a70:	f8 94       	cli

00003a72 <__stop_program>:
    3a72:	ff cf       	rjmp	.-2      	; 0x3a72 <__stop_program>
