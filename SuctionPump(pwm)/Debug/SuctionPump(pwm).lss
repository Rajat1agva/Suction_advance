
SuctionPump(pwm).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00804000  00001596  0000162a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001596  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  0080409c  0080409c  000016c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000668c  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031ae  00000000  00000000  00007f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001594  00000000  00000000  0000b132  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000648  00000000  00000000  0000c6c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000029ac  00000000  00000000  0000cd10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f5f  00000000  00000000  0000f6bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0001161b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__ctors_end>
       4:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
       8:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
       c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      10:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      14:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      18:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      1c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      20:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      24:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      28:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      2c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      30:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      34:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      38:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      3c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      40:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      44:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      48:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      4c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      50:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      54:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      58:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      5c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      60:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      64:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      68:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      6c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      70:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      74:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      78:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      7c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      80:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      84:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      88:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      8c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      90:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      94:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      98:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      9c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      a0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      a4:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      a8:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      ac:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      b0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      b4:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      b8:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      bc:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      c0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      c4:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      c8:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      cc:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      d0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      d4:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      d8:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      dc:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      e0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      e4:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      e8:	07 63       	ori	r16, 0x37	; 55
      ea:	42 36       	cpi	r20, 0x62	; 98
      ec:	b7 9b       	sbis	0x16, 7	; 22
      ee:	d8 a7       	std	Y+40, r29	; 0x28
      f0:	1a 39       	cpi	r17, 0x9A	; 154
      f2:	68 56       	subi	r22, 0x68	; 104
      f4:	18 ae       	std	Y+56, r1	; 0x38
      f6:	ba ab       	std	Y+50, r27	; 0x32
      f8:	55 8c       	ldd	r5, Z+29	; 0x1d
      fa:	1d 3c       	cpi	r17, 0xCD	; 205
      fc:	b7 cc       	rjmp	.-1682   	; 0xfffffa6c <__eeprom_end+0xff7efa6c>
      fe:	57 63       	ori	r21, 0x37	; 55
     100:	bd 6d       	ori	r27, 0xDD	; 221
     102:	ed fd       	.word	0xfded	; ????
     104:	75 3e       	cpi	r23, 0xE5	; 229
     106:	f6 17       	cp	r31, r22
     108:	72 31       	cpi	r23, 0x12	; 18
     10a:	bf 00       	.word	0x00bf	; ????
     10c:	00 00       	nop
     10e:	80 3f       	cpi	r24, 0xF0	; 240
     110:	08 00       	.word	0x0008	; ????
     112:	00 00       	nop
     114:	be 92       	st	-X, r11
     116:	24 49       	sbci	r18, 0x94	; 148
     118:	12 3e       	cpi	r17, 0xE2	; 226
     11a:	ab aa       	std	Y+51, r10	; 0x33
     11c:	aa 2a       	or	r10, r26
     11e:	be cd       	rjmp	.-1156   	; 0xfffffc9c <__eeprom_end+0xff7efc9c>
     120:	cc cc       	rjmp	.-1640   	; 0xfffffaba <__eeprom_end+0xff7efaba>
     122:	4c 3e       	cpi	r20, 0xEC	; 236
     124:	00 00       	nop
     126:	00 80       	ld	r0, Z
     128:	be ab       	std	Y+54, r27	; 0x36
     12a:	aa aa       	std	Y+50, r10	; 0x32
     12c:	aa 3e       	cpi	r26, 0xEA	; 234
     12e:	00 00       	nop
     130:	00 00       	nop
     132:	bf 00       	.word	0x00bf	; ????
     134:	00 00       	nop
     136:	80 3f       	cpi	r24, 0xF0	; 240
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	00 08       	sbc	r0, r0
     13e:	41 78       	andi	r20, 0x81	; 129
     140:	d3 bb       	out	0x13, r29	; 19
     142:	43 87       	std	Z+11, r20	; 0x0b
     144:	d1 13       	cpse	r29, r17
     146:	3d 19       	sub	r19, r13
     148:	0e 3c       	cpi	r16, 0xCE	; 206
     14a:	c3 bd       	out	0x23, r28	; 35
     14c:	42 82       	std	Z+2, r4	; 0x02
     14e:	ad 2b       	or	r26, r29
     150:	3e 68       	ori	r19, 0x8E	; 142
     152:	ec 82       	std	Y+4, r14	; 0x04
     154:	76 be       	out	0x36, r7	; 54
     156:	d9 8f       	std	Y+25, r29	; 0x19
     158:	e1 a9       	ldd	r30, Z+49	; 0x31
     15a:	3e 4c       	sbci	r19, 0xCE	; 206
     15c:	80 ef       	ldi	r24, 0xF0	; 240
     15e:	ff be       	out	0x3f, r15	; 63
     160:	01 c4       	rjmp	.+2050   	; 0x964 <main+0x46>
     162:	ff 7f       	andi	r31, 0xFF	; 255
     164:	3f 00       	.word	0x003f	; ????
     166:	00 00       	nop
	...

0000016a <__trampolines_end>:
     16a:	7f ff       	.word	0xff7f	; ????
     16c:	ff c0       	rjmp	.+510    	; 0x36c <ftoa+0xd4>
     16e:	80 00       	.word	0x0080	; ????
     170:	00 20       	and	r0, r0
     172:	80 06       	cpc	r8, r16
     174:	00 20       	and	r0, r0
     176:	80 06       	cpc	r8, r16
     178:	00 20       	and	r0, r0
     17a:	80 06       	cpc	r8, r16
     17c:	00 38       	cpi	r16, 0x80	; 128
     17e:	80 06       	cpc	r8, r16
     180:	00 24       	eor	r0, r0
     182:	80 06       	cpc	r8, r16
     184:	00 24       	eor	r0, r0
     186:	80 06       	cpc	r8, r16
     188:	00 24       	eor	r0, r0
     18a:	80 06       	cpc	r8, r16
     18c:	00 24       	eor	r0, r0
     18e:	80 06       	cpc	r8, r16
     190:	00 38       	cpi	r16, 0x80	; 128
     192:	80 00       	.word	0x0080	; ????
     194:	00 20       	and	r0, r0
     196:	80 06       	cpc	r8, r16
     198:	00 20       	and	r0, r0
     19a:	80 06       	cpc	r8, r16
     19c:	00 20       	and	r0, r0
     19e:	80 00       	.word	0x0080	; ????
     1a0:	00 20       	and	r0, r0
     1a2:	7f ff       	.word	0xff7f	; ????
     1a4:	ff c0       	rjmp	.+510    	; 0x3a4 <USART1_init+0x28>

000001a6 <columnColorToByte>:
     1a6:	00 4a 92 ff                                         .J..

000001aa <__ctors_end>:
     1aa:	11 24       	eor	r1, r1
     1ac:	1f be       	out	0x3f, r1	; 63
     1ae:	cf ef       	ldi	r28, 0xFF	; 255
     1b0:	cd bf       	out	0x3d, r28	; 61
     1b2:	df e7       	ldi	r29, 0x7F	; 127
     1b4:	de bf       	out	0x3e, r29	; 62

000001b6 <__do_copy_data>:
     1b6:	10 e4       	ldi	r17, 0x40	; 64
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b0 e4       	ldi	r27, 0x40	; 64
     1bc:	e6 e9       	ldi	r30, 0x96	; 150
     1be:	f5 e1       	ldi	r31, 0x15	; 21
     1c0:	00 e0       	ldi	r16, 0x00	; 0
     1c2:	0b bf       	out	0x3b, r16	; 59
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <__do_copy_data+0x14>
     1c6:	07 90       	elpm	r0, Z+
     1c8:	0d 92       	st	X+, r0
     1ca:	ac 39       	cpi	r26, 0x9C	; 156
     1cc:	b1 07       	cpc	r27, r17
     1ce:	d9 f7       	brne	.-10     	; 0x1c6 <__do_copy_data+0x10>

000001d0 <__do_clear_bss>:
     1d0:	20 e4       	ldi	r18, 0x40	; 64
     1d2:	ac e9       	ldi	r26, 0x9C	; 156
     1d4:	b0 e4       	ldi	r27, 0x40	; 64
     1d6:	01 c0       	rjmp	.+2      	; 0x1da <.do_clear_bss_start>

000001d8 <.do_clear_bss_loop>:
     1d8:	1d 92       	st	X+, r1

000001da <.do_clear_bss_start>:
     1da:	a2 3d       	cpi	r26, 0xD2	; 210
     1dc:	b2 07       	cpc	r27, r18
     1de:	e1 f7       	brne	.-8      	; 0x1d8 <.do_clear_bss_loop>
     1e0:	0e 94 8f 04 	call	0x91e	; 0x91e <main>
     1e4:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <_exit>

000001e8 <__bad_interrupt>:
     1e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ec <reverse>:


void I2C_0_recvtrans(void)
{
	TWI0.MCTRLB &= ~(1 << 4);   // Send ACK
	TWI0.MCTRLB |= 0x2;         // RECVTRANS
     1ec:	61 50       	subi	r22, 0x01	; 1
     1ee:	71 09       	sbc	r23, r1
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	0e c0       	rjmp	.+28     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
     1f6:	dc 01       	movw	r26, r24
     1f8:	a2 0f       	add	r26, r18
     1fa:	b3 1f       	adc	r27, r19
     1fc:	4c 91       	ld	r20, X
     1fe:	fc 01       	movw	r30, r24
     200:	e6 0f       	add	r30, r22
     202:	f7 1f       	adc	r31, r23
     204:	50 81       	ld	r21, Z
     206:	5c 93       	st	X, r21
     208:	40 83       	st	Z, r20
     20a:	2f 5f       	subi	r18, 0xFF	; 255
     20c:	3f 4f       	sbci	r19, 0xFF	; 255
     20e:	61 50       	subi	r22, 0x01	; 1
     210:	71 09       	sbc	r23, r1
     212:	26 17       	cp	r18, r22
     214:	37 07       	cpc	r19, r23
     216:	7c f3       	brlt	.-34     	; 0x1f6 <reverse+0xa>
     218:	08 95       	ret

0000021a <intToStr>:
     21a:	cf 92       	push	r12
     21c:	df 92       	push	r13
     21e:	ef 92       	push	r14
     220:	ff 92       	push	r15
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	8a 01       	movw	r16, r20
     22c:	69 01       	movw	r12, r18
     22e:	c0 e0       	ldi	r28, 0x00	; 0
     230:	d0 e0       	ldi	r29, 0x00	; 0
     232:	11 c0       	rjmp	.+34     	; 0x256 <intToStr+0x3c>
     234:	78 01       	movw	r14, r16
     236:	ec 0e       	add	r14, r28
     238:	fd 1e       	adc	r15, r29
     23a:	2a e0       	ldi	r18, 0x0A	; 10
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	40 e0       	ldi	r20, 0x00	; 0
     240:	50 e0       	ldi	r21, 0x00	; 0
     242:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__divmodsi4>
     246:	60 5d       	subi	r22, 0xD0	; 208
     248:	f7 01       	movw	r30, r14
     24a:	60 83       	st	Z, r22
     24c:	62 2f       	mov	r22, r18
     24e:	73 2f       	mov	r23, r19
     250:	84 2f       	mov	r24, r20
     252:	95 2f       	mov	r25, r21
     254:	21 96       	adiw	r28, 0x01	; 1
     256:	61 15       	cp	r22, r1
     258:	71 05       	cpc	r23, r1
     25a:	81 05       	cpc	r24, r1
     25c:	91 05       	cpc	r25, r1
     25e:	51 f7       	brne	.-44     	; 0x234 <intToStr+0x1a>
     260:	06 c0       	rjmp	.+12     	; 0x26e <intToStr+0x54>
     262:	f8 01       	movw	r30, r16
     264:	ec 0f       	add	r30, r28
     266:	fd 1f       	adc	r31, r29
     268:	80 e3       	ldi	r24, 0x30	; 48
     26a:	80 83       	st	Z, r24
     26c:	21 96       	adiw	r28, 0x01	; 1
     26e:	cc 15       	cp	r28, r12
     270:	dd 05       	cpc	r29, r13
     272:	bc f3       	brlt	.-18     	; 0x262 <intToStr+0x48>
     274:	be 01       	movw	r22, r28
     276:	c8 01       	movw	r24, r16
     278:	0e 94 f6 00 	call	0x1ec	; 0x1ec <reverse>
     27c:	f8 01       	movw	r30, r16
     27e:	ec 0f       	add	r30, r28
     280:	fd 1f       	adc	r31, r29
     282:	10 82       	st	Z, r1
     284:	ce 01       	movw	r24, r28
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	ff 90       	pop	r15
     290:	ef 90       	pop	r14
     292:	df 90       	pop	r13
     294:	cf 90       	pop	r12
     296:	08 95       	ret

00000298 <ftoa>:
     298:	8f 92       	push	r8
     29a:	9f 92       	push	r9
     29c:	af 92       	push	r10
     29e:	bf 92       	push	r11
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	6b 01       	movw	r12, r22
     2b2:	7c 01       	movw	r14, r24
     2b4:	8a 01       	movw	r16, r20
     2b6:	e9 01       	movw	r28, r18
     2b8:	0e 94 72 07 	call	0xee4	; 0xee4 <__fixsfsi>
     2bc:	4b 01       	movw	r8, r22
     2be:	5c 01       	movw	r10, r24
     2c0:	07 2e       	mov	r0, r23
     2c2:	00 0c       	add	r0, r0
     2c4:	88 0b       	sbc	r24, r24
     2c6:	99 0b       	sbc	r25, r25
     2c8:	0e 94 aa 07 	call	0xf54	; 0xf54 <__floatsisf>
     2cc:	9b 01       	movw	r18, r22
     2ce:	ac 01       	movw	r20, r24
     2d0:	c7 01       	movw	r24, r14
     2d2:	b6 01       	movw	r22, r12
     2d4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__subsf3>
     2d8:	6b 01       	movw	r12, r22
     2da:	7c 01       	movw	r14, r24
     2dc:	b4 01       	movw	r22, r8
     2de:	99 20       	and	r9, r9
     2e0:	24 f4       	brge	.+8      	; 0x2ea <ftoa+0x52>
     2e2:	66 27       	eor	r22, r22
     2e4:	77 27       	eor	r23, r23
     2e6:	68 19       	sub	r22, r8
     2e8:	79 09       	sbc	r23, r9
     2ea:	07 2e       	mov	r0, r23
     2ec:	00 0c       	add	r0, r0
     2ee:	88 0b       	sbc	r24, r24
     2f0:	99 0b       	sbc	r25, r25
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	a8 01       	movw	r20, r16
     2f8:	0e 94 0d 01 	call	0x21a	; 0x21a <intToStr>
     2fc:	5c 01       	movw	r10, r24
     2fe:	20 97       	sbiw	r28, 0x00	; 0
     300:	81 f1       	breq	.+96     	; 0x362 <ftoa+0xca>
     302:	f8 01       	movw	r30, r16
     304:	e8 0f       	add	r30, r24
     306:	f9 1f       	adc	r31, r25
     308:	8e e2       	ldi	r24, 0x2E	; 46
     30a:	80 83       	st	Z, r24
     30c:	be 01       	movw	r22, r28
     30e:	0d 2e       	mov	r0, r29
     310:	00 0c       	add	r0, r0
     312:	88 0b       	sbc	r24, r24
     314:	99 0b       	sbc	r25, r25
     316:	0e 94 aa 07 	call	0xf54	; 0xf54 <__floatsisf>
     31a:	9b 01       	movw	r18, r22
     31c:	ac 01       	movw	r20, r24
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	80 e2       	ldi	r24, 0x20	; 32
     324:	91 e4       	ldi	r25, 0x41	; 65
     326:	0e 94 cc 08 	call	0x1198	; 0x1198 <pow>
     32a:	9b 01       	movw	r18, r22
     32c:	ac 01       	movw	r20, r24
     32e:	c7 01       	movw	r24, r14
     330:	b6 01       	movw	r22, r12
     332:	0e 94 5f 08 	call	0x10be	; 0x10be <__mulsf3>
     336:	2f ef       	ldi	r18, 0xFF	; 255
     338:	a2 1a       	sub	r10, r18
     33a:	b2 0a       	sbc	r11, r18
     33c:	0e 94 72 07 	call	0xee4	; 0xee4 <__fixsfsi>
     340:	9b 01       	movw	r18, r22
     342:	77 23       	and	r23, r23
     344:	24 f4       	brge	.+8      	; 0x34e <ftoa+0xb6>
     346:	22 27       	eor	r18, r18
     348:	33 27       	eor	r19, r19
     34a:	26 1b       	sub	r18, r22
     34c:	37 0b       	sbc	r19, r23
     34e:	a8 01       	movw	r20, r16
     350:	4a 0d       	add	r20, r10
     352:	5b 1d       	adc	r21, r11
     354:	b9 01       	movw	r22, r18
     356:	33 0f       	add	r19, r19
     358:	88 0b       	sbc	r24, r24
     35a:	99 0b       	sbc	r25, r25
     35c:	9e 01       	movw	r18, r28
     35e:	0e 94 0d 01 	call	0x21a	; 0x21a <intToStr>
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	ff 90       	pop	r15
     36c:	ef 90       	pop	r14
     36e:	df 90       	pop	r13
     370:	cf 90       	pop	r12
     372:	bf 90       	pop	r11
     374:	af 90       	pop	r10
     376:	9f 90       	pop	r9
     378:	8f 90       	pop	r8
     37a:	08 95       	ret

0000037c <USART1_init>:
     37c:	e0 e4       	ldi	r30, 0x40	; 64
     37e:	f4 e0       	ldi	r31, 0x04	; 4
     380:	20 81       	ld	r18, Z
     382:	2d 7f       	andi	r18, 0xFD	; 253
     384:	20 83       	st	Z, r18
     386:	20 81       	ld	r18, Z
     388:	21 60       	ori	r18, 0x01	; 1
     38a:	20 83       	st	Z, r18
     38c:	bc 01       	movw	r22, r24
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0e 94 a8 07 	call	0xf50	; 0xf50 <__floatunsisf>
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	40 e8       	ldi	r20, 0x80	; 128
     39c:	51 e4       	ldi	r21, 0x41	; 65
     39e:	0e 94 5f 08 	call	0x10be	; 0x10be <__mulsf3>
     3a2:	9b 01       	movw	r18, r22
     3a4:	ac 01       	movw	r20, r24
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	7b e1       	ldi	r23, 0x1B	; 27
     3aa:	87 eb       	ldi	r24, 0xB7	; 183
     3ac:	9e e4       	ldi	r25, 0x4E	; 78
     3ae:	0e 94 00 07 	call	0xe00	; 0xe00 <__divsf3>
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	40 e0       	ldi	r20, 0x00	; 0
     3b8:	5f e3       	ldi	r21, 0x3F	; 63
     3ba:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__addsf3>
     3be:	0e 94 79 07 	call	0xef2	; 0xef2 <__fixunssfsi>
     3c2:	e0 e2       	ldi	r30, 0x20	; 32
     3c4:	f8 e0       	ldi	r31, 0x08	; 8
     3c6:	60 87       	std	Z+8, r22	; 0x08
     3c8:	71 87       	std	Z+9, r23	; 0x09
     3ca:	86 81       	ldd	r24, Z+6	; 0x06
     3cc:	80 6c       	ori	r24, 0xC0	; 192
     3ce:	86 83       	std	Z+6, r24	; 0x06
     3d0:	08 95       	ret

000003d2 <USART1_sendChar>:
     3d2:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7e0824>
     3d6:	95 ff       	sbrs	r25, 5
     3d8:	fc cf       	rjmp	.-8      	; 0x3d2 <USART1_sendChar>
     3da:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
     3de:	08 95       	ret

000003e0 <USART1_sendString>:
     3e0:	0f 93       	push	r16
     3e2:	1f 93       	push	r17
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	8c 01       	movw	r16, r24
     3ea:	c0 e0       	ldi	r28, 0x00	; 0
     3ec:	d0 e0       	ldi	r29, 0x00	; 0
     3ee:	07 c0       	rjmp	.+14     	; 0x3fe <USART1_sendString+0x1e>
     3f0:	f8 01       	movw	r30, r16
     3f2:	ec 0f       	add	r30, r28
     3f4:	fd 1f       	adc	r31, r29
     3f6:	80 81       	ld	r24, Z
     3f8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <USART1_sendChar>
     3fc:	21 96       	adiw	r28, 0x01	; 1
     3fe:	f8 01       	movw	r30, r16
     400:	01 90       	ld	r0, Z+
     402:	00 20       	and	r0, r0
     404:	e9 f7       	brne	.-6      	; 0x400 <__LOCK_REGION_LENGTH__>
     406:	31 97       	sbiw	r30, 0x01	; 1
     408:	e0 1b       	sub	r30, r16
     40a:	f1 0b       	sbc	r31, r17
     40c:	ce 17       	cp	r28, r30
     40e:	df 07       	cpc	r29, r31
     410:	78 f3       	brcs	.-34     	; 0x3f0 <USART1_sendString+0x10>
     412:	8a e0       	ldi	r24, 0x0A	; 10
     414:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <USART1_sendChar>
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	08 95       	ret

00000422 <USART1_sendFloat>:
     422:	9a 01       	movw	r18, r20
     424:	4c e9       	ldi	r20, 0x9C	; 156
     426:	50 e4       	ldi	r21, 0x40	; 64
     428:	0e 94 4c 01 	call	0x298	; 0x298 <ftoa>
     42c:	8c e9       	ldi	r24, 0x9C	; 156
     42e:	90 e4       	ldi	r25, 0x40	; 64
     430:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <USART1_sendString>
     434:	08 95       	ret

00000436 <SPI_0_init>:
     436:	e0 e0       	ldi	r30, 0x00	; 0
     438:	f4 e0       	ldi	r31, 0x04	; 4
     43a:	80 81       	ld	r24, Z
     43c:	80 68       	ori	r24, 0x80	; 128
     43e:	80 83       	st	Z, r24
     440:	a4 e0       	ldi	r26, 0x04	; 4
     442:	b4 e0       	ldi	r27, 0x04	; 4
     444:	8c 91       	ld	r24, X
     446:	80 68       	ori	r24, 0x80	; 128
     448:	8c 93       	st	X, r24
     44a:	80 81       	ld	r24, Z
     44c:	80 61       	ori	r24, 0x10	; 16
     44e:	80 83       	st	Z, r24
     450:	80 81       	ld	r24, Z
     452:	8f 7d       	andi	r24, 0xDF	; 223
     454:	80 83       	st	Z, r24
     456:	80 81       	ld	r24, Z
     458:	80 64       	ori	r24, 0x40	; 64
     45a:	80 83       	st	Z, r24
     45c:	e0 e4       	ldi	r30, 0x40	; 64
     45e:	f9 e0       	ldi	r31, 0x09	; 9
     460:	80 81       	ld	r24, Z
     462:	80 63       	ori	r24, 0x30	; 48
     464:	80 83       	st	Z, r24
     466:	80 81       	ld	r24, Z
     468:	81 60       	ori	r24, 0x01	; 1
     46a:	80 83       	st	Z, r24
     46c:	8c 91       	ld	r24, X
     46e:	80 68       	ori	r24, 0x80	; 128
     470:	8c 93       	st	X, r24
     472:	08 95       	ret

00000474 <SPI_0_send_char>:
     474:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
     478:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
     47c:	88 23       	and	r24, r24
     47e:	e4 f7       	brge	.-8      	; 0x478 <SPI_0_send_char+0x4>
     480:	08 95       	ret

00000482 <I2C_0_stop_transmission>:
     482:	e0 e0       	ldi	r30, 0x00	; 0
     484:	f9 e0       	ldi	r31, 0x09	; 9
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	85 83       	std	Z+5, r24	; 0x05
     48a:	83 e0       	ldi	r24, 0x03	; 3
     48c:	84 83       	std	Z+4, r24	; 0x04
     48e:	08 95       	ret

00000490 <I2C_0_initialization>:
     490:	e0 e0       	ldi	r30, 0x00	; 0
     492:	f9 e0       	ldi	r31, 0x09	; 9
     494:	80 81       	ld	r24, Z
     496:	8f 7e       	andi	r24, 0xEF	; 239
     498:	80 83       	st	Z, r24
     49a:	80 81       	ld	r24, Z
     49c:	83 7f       	andi	r24, 0xF3	; 243
     49e:	80 83       	st	Z, r24
     4a0:	80 81       	ld	r24, Z
     4a2:	8d 7f       	andi	r24, 0xFD	; 253
     4a4:	80 83       	st	Z, r24
     4a6:	08 95       	ret

000004a8 <I2C_0_master_initialization>:
     4a8:	e0 e0       	ldi	r30, 0x00	; 0
     4aa:	f9 e0       	ldi	r31, 0x09	; 9
     4ac:	87 e6       	ldi	r24, 0x67	; 103
     4ae:	86 83       	std	Z+6, r24	; 0x06
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	85 83       	std	Z+5, r24	; 0x05
     4b4:	83 81       	ldd	r24, Z+3	; 0x03
     4b6:	8a 60       	ori	r24, 0x0A	; 10
     4b8:	83 83       	std	Z+3, r24	; 0x03
     4ba:	83 81       	ldd	r24, Z+3	; 0x03
     4bc:	81 60       	ori	r24, 0x01	; 1
     4be:	83 83       	std	Z+3, r24	; 0x03
     4c0:	08 95       	ret

000004c2 <I2C_0_sendAddress>:
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	c8 2f       	mov	r28, r24
     4c8:	d6 2f       	mov	r29, r22
     4ca:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     4ce:	83 70       	andi	r24, 0x03	; 3
     4d0:	83 30       	cpi	r24, 0x03	; 3
     4d2:	89 f4       	brne	.+34     	; 0x4f6 <I2C_0_sendAddress+0x34>
     4d4:	8e e3       	ldi	r24, 0x3E	; 62
     4d6:	90 e4       	ldi	r25, 0x40	; 64
     4d8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <USART1_sendString>
     4dc:	20 e6       	ldi	r18, 0x60	; 96
     4de:	3a ee       	ldi	r19, 0xEA	; 234
     4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <I2C_0_sendAddress+0x22>
     4e2:	9c 01       	movw	r18, r24
     4e4:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     4e8:	83 70       	andi	r24, 0x03	; 3
     4ea:	83 30       	cpi	r24, 0x03	; 3
     4ec:	21 f4       	brne	.+8      	; 0x4f6 <I2C_0_sendAddress+0x34>
     4ee:	c9 01       	movw	r24, r18
     4f0:	01 97       	sbiw	r24, 0x01	; 1
     4f2:	23 2b       	or	r18, r19
     4f4:	b1 f7       	brne	.-20     	; 0x4e2 <I2C_0_sendAddress+0x20>
     4f6:	85 e0       	ldi	r24, 0x05	; 5
     4f8:	80 93 05 09 	sts	0x0905, r24	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     4fc:	dd 23       	and	r29, r29
     4fe:	41 f0       	breq	.+16     	; 0x510 <I2C_0_sendAddress+0x4e>
     500:	8c 2f       	mov	r24, r28
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	88 0f       	add	r24, r24
     506:	99 1f       	adc	r25, r25
     508:	81 60       	ori	r24, 0x01	; 1
     50a:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
     50e:	04 c0       	rjmp	.+8      	; 0x518 <I2C_0_sendAddress+0x56>
     510:	8c 2f       	mov	r24, r28
     512:	88 0f       	add	r24, r24
     514:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
     518:	80 e6       	ldi	r24, 0x60	; 96
     51a:	9a ee       	ldi	r25, 0xEA	; 234
     51c:	20 91 05 09 	lds	r18, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     520:	24 ff       	sbrs	r18, 4
     522:	06 c0       	rjmp	.+12     	; 0x530 <I2C_0_sendAddress+0x6e>
     524:	20 91 05 09 	lds	r18, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     528:	26 fd       	sbrc	r18, 6
     52a:	02 c0       	rjmp	.+4      	; 0x530 <I2C_0_sendAddress+0x6e>
     52c:	01 97       	sbiw	r24, 0x01	; 1
     52e:	b1 f7       	brne	.-20     	; 0x51c <I2C_0_sendAddress+0x5a>
     530:	89 2b       	or	r24, r25
     532:	21 f4       	brne	.+8      	; 0x53c <I2C_0_sendAddress+0x7a>
     534:	88 e4       	ldi	r24, 0x48	; 72
     536:	90 e4       	ldi	r25, 0x40	; 64
     538:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <USART1_sendString>
     53c:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     540:	82 ff       	sbrs	r24, 2
     542:	04 c0       	rjmp	.+8      	; 0x54c <I2C_0_sendAddress+0x8a>
     544:	80 e5       	ldi	r24, 0x50	; 80
     546:	90 e4       	ldi	r25, 0x40	; 64
     548:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <USART1_sendString>
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <I2C_0_recieveData>:
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	c0 e6       	ldi	r28, 0x60	; 96
     558:	da ee       	ldi	r29, 0xEA	; 234
     55a:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     55e:	88 23       	and	r24, r24
     560:	14 f0       	brlt	.+4      	; 0x566 <I2C_0_recieveData+0x14>
     562:	21 97       	sbiw	r28, 0x01	; 1
     564:	d1 f7       	brne	.-12     	; 0x55a <I2C_0_recieveData+0x8>
     566:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     56a:	83 fd       	sbrc	r24, 3
     56c:	04 c0       	rjmp	.+8      	; 0x576 <I2C_0_recieveData+0x24>
     56e:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     572:	82 ff       	sbrs	r24, 2
     574:	06 c0       	rjmp	.+12     	; 0x582 <I2C_0_recieveData+0x30>
     576:	83 e8       	ldi	r24, 0x83	; 131
     578:	90 e4       	ldi	r25, 0x40	; 64
     57a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <USART1_sendString>
     57e:	0e 94 41 02 	call	0x482	; 0x482 <I2C_0_stop_transmission>
     582:	cd 2b       	or	r28, r29
     584:	21 f4       	brne	.+8      	; 0x58e <I2C_0_recieveData+0x3c>
     586:	88 e4       	ldi	r24, 0x48	; 72
     588:	90 e4       	ldi	r25, 0x40	; 64
     58a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <USART1_sendString>
     58e:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	08 95       	ret

00000598 <Sensor_init>:
 float pressureRead(void); //Read pressure data
 
 
 void Sensor_init(void)
 {
	 I2C_0_initialization();
     598:	0e 94 48 02 	call	0x490	; 0x490 <I2C_0_initialization>
	 I2C_0_master_initialization();
     59c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <I2C_0_master_initialization>
	 I2C_0_sendAddress(Sensor_Address,1);  //1 for read
     5a0:	61 e0       	ldi	r22, 0x01	; 1
     5a2:	88 e7       	ldi	r24, 0x78	; 120
     5a4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <I2C_0_sendAddress>
     5a8:	08 95       	ret

000005aa <pressureRead>:
 }
 
float pressureRead(void)
{
     5aa:	cf 92       	push	r12
     5ac:	df 92       	push	r13
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
	uint16_t data = I2C_0_recieveData(); //Reading first byte
     5b6:	0e 94 a9 02 	call	0x552	; 0x552 <I2C_0_recieveData>
	
	data = (data)&(0x7F);  //set 8th bit zero
     5ba:	8f 77       	andi	r24, 0x7F	; 127
     5bc:	c8 2f       	mov	r28, r24
     5be:	d0 e0       	ldi	r29, 0x00	; 0
	
	data <<= 8;                      //first byte shifted 8 bit
     5c0:	dc 2f       	mov	r29, r28
     5c2:	cc 27       	eor	r28, r28
	
	data |= I2C_0_recieveData();     //Reading second byte
     5c4:	0e 94 a9 02 	call	0x552	; 0x552 <I2C_0_recieveData>
     5c8:	c8 2b       	or	r28, r24
	
	I2C_0_recieveData();   //Reading third byte
     5ca:	0e 94 a9 02 	call	0x552	; 0x552 <I2C_0_recieveData>
	
	I2C_0_recieveData();   //Reading forth byte
     5ce:	0e 94 a9 02 	call	0x552	; 0x552 <I2C_0_recieveData>
	
	float pressure_count = (float)data;
     5d2:	be 01       	movw	r22, r28
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 a8 07 	call	0xf50	; 0xf50 <__floatunsisf>
	
	float pressure_in_psi = ((pressure_count-3277)/(26216/AMS5812_1000_D_P_MAX))+AMS5812_1000_D_P_MIN;
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 ed       	ldi	r19, 0xD0	; 208
     5e0:	4c e4       	ldi	r20, 0x4C	; 76
     5e2:	55 e4       	ldi	r21, 0x45	; 69
     5e4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__subsf3>
     5e8:	2b e7       	ldi	r18, 0x7B	; 123
     5ea:	34 e1       	ldi	r19, 0x14	; 20
     5ec:	43 e8       	ldi	r20, 0x83	; 131
     5ee:	53 e4       	ldi	r21, 0x43	; 67
     5f0:	0e 94 00 07 	call	0xe00	; 0xe00 <__divsf3>
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	a9 01       	movw	r20, r18
     5fa:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__addsf3>
     5fe:	6b 01       	movw	r12, r22
     600:	7c 01       	movw	r14, r24
	if(pressure_in_psi > AMS5812_1000_D_P_MAX)
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	48 ec       	ldi	r20, 0xC8	; 200
     608:	52 e4       	ldi	r21, 0x42	; 66
     60a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__gesf2>
     60e:	18 16       	cp	r1, r24
     610:	1c f4       	brge	.+6      	; 0x618 <pressureRead+0x6e>
	{
		pressure_in_psi = 0.0;
     612:	c1 2c       	mov	r12, r1
     614:	d1 2c       	mov	r13, r1
     616:	76 01       	movw	r14, r12
	}
	if(pressure_in_psi <= 0)
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	a9 01       	movw	r20, r18
     61e:	c7 01       	movw	r24, r14
     620:	b6 01       	movw	r22, r12
     622:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__cmpsf2>
     626:	18 16       	cp	r1, r24
     628:	1c f0       	brlt	.+6      	; 0x630 <pressureRead+0x86>
	{
		pressure_in_psi = 0.0;
     62a:	c1 2c       	mov	r12, r1
     62c:	d1 2c       	mov	r13, r1
     62e:	76 01       	movw	r14, r12
	return pressure_in_psi;
	
	_delay_us(10);

	
}
     630:	c7 01       	movw	r24, r14
     632:	b6 01       	movw	r22, r12
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	ff 90       	pop	r15
     63a:	ef 90       	pop	r14
     63c:	df 90       	pop	r13
     63e:	cf 90       	pop	r12
     640:	08 95       	ret

00000642 <ADC0_init>:


// ADC functions..
void ADC0_init(void)
{
	VREF.ADC0REF = 0x2 | (1 << 7);
     642:	82 e8       	ldi	r24, 0x82	; 130
     644:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	ADC0.CTRLC = ADC_PRESC_DIV4_gc;        /* CLK_PER divided by 4 */
     648:	e0 e0       	ldi	r30, 0x00	; 0
     64a:	f6 e0       	ldi	r31, 0x06	; 6
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	82 83       	std	Z+2, r24	; 0x02
	ADC0.CTRLA = ADC_ENABLE_bm             /* ADC Enable: enabled */
     650:	80 83       	st	Z, r24
     652:	08 95       	ret

00000654 <ADC0_start>:

/* This function starts the ADC conversions*/
void ADC0_start(void)
{
	/* Start ADC conversion */
	ADC0.COMMAND = ADC_STCONV_bm;
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
     65a:	08 95       	ret

0000065c <ADC0_read>:
}

/* This function returns the ADC conversion result */
uint16_t ADC0_read(char pin)
{
	ADC0.MUXPOS = pin;
     65c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
	ADC0_start();
     660:	0e 94 2a 03 	call	0x654	; 0x654 <ADC0_start>
	/* Wait for ADC result to be ready */
	while (!(ADC0.INTFLAGS & ADC_RESRDY_bm));
     664:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7e060d>
     668:	80 ff       	sbrs	r24, 0
     66a:	fc cf       	rjmp	.-8      	; 0x664 <ADC0_read+0x8>
	/* Clear the interrupt flag by reading the result */
	return ADC0.RES;
     66c:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
     670:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
}
     674:	08 95       	ret

00000676 <TCA0_PWM_init>:
void TCA0_PWM_init(void)
{
	//sei();
	/*		FIRST PWM on PA0 PIN		*/
	// Direction set and set output to high
	PORTA.DIR |= (1 << 0);
     676:	a0 e0       	ldi	r26, 0x00	; 0
     678:	b4 e0       	ldi	r27, 0x04	; 4
     67a:	8c 91       	ld	r24, X
     67c:	81 60       	ori	r24, 0x01	; 1
     67e:	8c 93       	st	X, r24
	PORTA.PIN0CTRL |= (1 << 3);
     680:	50 96       	adiw	r26, 0x10	; 16
     682:	8c 91       	ld	r24, X
     684:	50 97       	sbiw	r26, 0x10	; 16
     686:	88 60       	ori	r24, 0x08	; 8
     688:	50 96       	adiw	r26, 0x10	; 16
     68a:	8c 93       	st	X, r24
     68c:	50 97       	sbiw	r26, 0x10	; 16
	
	//PORTA.OUTSET |= (1 << 0);
	TCA0.SINGLE.PER = 3000;     // calculation for 1ms
     68e:	e0 e0       	ldi	r30, 0x00	; 0
     690:	fa e0       	ldi	r31, 0x0A	; 10
     692:	88 eb       	ldi	r24, 0xB8	; 184
     694:	9b e0       	ldi	r25, 0x0B	; 11
     696:	86 a3       	std	Z+38, r24	; 0x26
     698:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.CMP0 = dutyCycle1;
     69a:	80 91 05 40 	lds	r24, 0x4005	; 0x804005 <dutyCycle1>
     69e:	90 91 06 40 	lds	r25, 0x4006	; 0x804006 <dutyCycle1+0x1>
     6a2:	80 a7       	std	Z+40, r24	; 0x28
     6a4:	91 a7       	std	Z+41, r25	; 0x29
	TCA0.SINGLE.CNT = 0;
     6a6:	10 a2       	std	Z+32, r1	; 0x20
     6a8:	11 a2       	std	Z+33, r1	; 0x21

	
	TCA0.SINGLE.CTRLB |= (1 << 4); // compare 0 enable
     6aa:	81 81       	ldd	r24, Z+1	; 0x01
     6ac:	80 61       	ori	r24, 0x10	; 16
     6ae:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SINGLE.CTRLB |= (0x3 << 0); // Single slope PWM
     6b0:	81 81       	ldd	r24, Z+1	; 0x01
     6b2:	83 60       	ori	r24, 0x03	; 3
     6b4:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SINGLE.CTRLA |= (1<<0); //fclk_per 1 and  Enable pwm
     6b6:	80 81       	ld	r24, Z
     6b8:	81 60       	ori	r24, 0x01	; 1
     6ba:	80 83       	st	Z, r24
	TCA0.SINGLE.CTRLA |= ((1<<1)|(1<<2)); //fclk_per 8 and  Enable pwm
     6bc:	80 81       	ld	r24, Z
     6be:	86 60       	ori	r24, 0x06	; 6
     6c0:	80 83       	st	Z, r24
	
	/*		Second PWM on PA1 PIN		*/
	
	PORTA.DIR |= (1 << 1);						// Direction set and set output to high
     6c2:	8c 91       	ld	r24, X
     6c4:	82 60       	ori	r24, 0x02	; 2
     6c6:	8c 93       	st	X, r24
	PORTA.PIN1CTRL |= (1 << 3);
     6c8:	51 96       	adiw	r26, 0x11	; 17
     6ca:	8c 91       	ld	r24, X
     6cc:	51 97       	sbiw	r26, 0x11	; 17
     6ce:	88 60       	ori	r24, 0x08	; 8
     6d0:	51 96       	adiw	r26, 0x11	; 17
     6d2:	8c 93       	st	X, r24
	TCA0.SINGLE.CTRLB |= (1 << 5);				// Enable Compare Pa1
     6d4:	81 81       	ldd	r24, Z+1	; 0x01
     6d6:	80 62       	ori	r24, 0x20	; 32
     6d8:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SINGLE.CTRLA |= (1 << 1);				// Enable PWM PA1
     6da:	80 81       	ld	r24, Z
     6dc:	82 60       	ori	r24, 0x02	; 2
     6de:	80 83       	st	Z, r24
	TCA0.SINGLE.CMP1 = dutyCycle2;					// Duty cycle
     6e0:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <dutyCycle2>
     6e4:	90 91 04 40 	lds	r25, 0x4004	; 0x804004 <dutyCycle2+0x1>
     6e8:	82 a7       	std	Z+42, r24	; 0x2a
     6ea:	93 a7       	std	Z+43, r25	; 0x2b
     6ec:	08 95       	ret

000006ee <ST7586_send_data>:
	ST7586_send_data(_data, array_length);
	//	USART1_sendString("set pixel");
}

void ST7586_send_data(uint8_t data[], uint8_t dataSize)
{
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	8c 01       	movw	r16, r24
     6f8:	d6 2f       	mov	r29, r22
	
	ST7586_CSLOW();
     6fa:	e4 e0       	ldi	r30, 0x04	; 4
     6fc:	f4 e0       	ldi	r31, 0x04	; 4
     6fe:	80 81       	ld	r24, Z
     700:	8f 77       	andi	r24, 0x7F	; 127
     702:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < dataSize; i++)
     704:	c0 e0       	ldi	r28, 0x00	; 0
     706:	07 c0       	rjmp	.+14     	; 0x716 <ST7586_send_data+0x28>
	{
		ST7586_SERIALW(data[i]);
     708:	f8 01       	movw	r30, r16
     70a:	ec 0f       	add	r30, r28
     70c:	f1 1d       	adc	r31, r1
     70e:	80 81       	ld	r24, Z
     710:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_0_send_char>

void ST7586_send_data(uint8_t data[], uint8_t dataSize)
{
	
	ST7586_CSLOW();
	for (uint8_t i = 0; i < dataSize; i++)
     714:	cf 5f       	subi	r28, 0xFF	; 255
     716:	cd 17       	cp	r28, r29
     718:	b8 f3       	brcs	.-18     	; 0x708 <ST7586_send_data+0x1a>
	{
		ST7586_SERIALW(data[i]);
	}
	ST7586_CSHIGH();
     71a:	e4 e0       	ldi	r30, 0x04	; 4
     71c:	f4 e0       	ldi	r31, 0x04	; 4
     71e:	80 81       	ld	r24, Z
     720:	80 68       	ori	r24, 0x80	; 128
     722:	80 83       	st	Z, r24
}
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	08 95       	ret

0000072e <__set_pixel>:
	TCA0.SINGLE.CMP1 = dutyCycle2;					// Duty cycle

}

void __set_pixel (int x1, int y1, int x2, bool color, uint8_t _data[], int array_length)		// with x2,y2 will not be limited as it is not creating any hindrence
{
     72e:	af 92       	push	r10
     730:	bf 92       	push	r11
     732:	cf 92       	push	r12
     734:	df 92       	push	r13
     736:	ef 92       	push	r14
     738:	ff 92       	push	r15
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	00 d0       	rcall	.+0      	; 0x744 <__set_pixel+0x16>
     744:	00 d0       	rcall	.+0      	; 0x746 <__set_pixel+0x18>
     746:	cd b7       	in	r28, 0x3d	; 61
     748:	de b7       	in	r29, 0x3e	; 62
     74a:	5c 01       	movw	r10, r24
     74c:	f6 2e       	mov	r15, r22
     74e:	6a 01       	movw	r12, r20
	uint8_t tempArgs[4];
	//uint8_t _data[3] = {0xC0, 0xF2, 0xDC};
	ST7586_cmd(SETCOLUMNADDRESS);	// Set Column Address
     750:	8a e2       	ldi	r24, 0x2A	; 42
     752:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	// Stupid display addressing. Why requiring two bytes, when the max value is 127 for columns / 160 for rows???
	tempArgs[0] = 0;
     756:	19 82       	std	Y+1, r1	; 0x01
	tempArgs[1] = x1/3;
     758:	23 e0       	ldi	r18, 0x03	; 3
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	c5 01       	movw	r24, r10
     75e:	b9 01       	movw	r22, r18
     760:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__divmodhi4>
     764:	6a 83       	std	Y+2, r22	; 0x02
	tempArgs[2] = 0;
     766:	1b 82       	std	Y+3, r1	; 0x03
	tempArgs[3] = x2/3;
     768:	c6 01       	movw	r24, r12
     76a:	b9 01       	movw	r22, r18
     76c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__divmodhi4>
     770:	6c 83       	std	Y+4, r22	; 0x04
	ST7586_send_data(tempArgs, 4);
     772:	64 e0       	ldi	r22, 0x04	; 4
     774:	ce 01       	movw	r24, r28
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	0e 94 77 03 	call	0x6ee	; 0x6ee <ST7586_send_data>
	ST7586_cmd(SETROWADDRESS);		// Set Row Address
     77c:	8b e2       	ldi	r24, 0x2B	; 43
     77e:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	tempArgs[0] = 0;
     782:	19 82       	std	Y+1, r1	; 0x01
	tempArgs[1] = y1;
     784:	fa 82       	std	Y+2, r15	; 0x02
	tempArgs[2] = 0;
     786:	1b 82       	std	Y+3, r1	; 0x03
	tempArgs[3] = 159;
     788:	8f e9       	ldi	r24, 0x9F	; 159
     78a:	8c 83       	std	Y+4, r24	; 0x04
	ST7586_send_data(tempArgs, 4);
     78c:	64 e0       	ldi	r22, 0x04	; 4
     78e:	ce 01       	movw	r24, r28
     790:	01 96       	adiw	r24, 0x01	; 1
     792:	0e 94 77 03 	call	0x6ee	; 0x6ee <ST7586_send_data>
	ST7586_cmd(WRITEDISPLAYDATA);
     796:	8c e2       	ldi	r24, 0x2C	; 44
     798:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	ST7586_send_data(_data, array_length);
     79c:	6e 2d       	mov	r22, r14
     79e:	c8 01       	movw	r24, r16
     7a0:	0e 94 77 03 	call	0x6ee	; 0x6ee <ST7586_send_data>
	//	USART1_sendString("set pixel");
}
     7a4:	24 96       	adiw	r28, 0x04	; 4
     7a6:	cd bf       	out	0x3d, r28	; 61
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	df 90       	pop	r13
     7b8:	cf 90       	pop	r12
     7ba:	bf 90       	pop	r11
     7bc:	af 90       	pop	r10
     7be:	08 95       	ret

000007c0 <_print_icon>:
		ST7586_SERIALW(data[i]);
	}
	ST7586_CSHIGH();
}
void _print_icon(int x1, int y1, int x2, uint8_t *font, uint8_t height , uint8_t width)		//function to print array of uint_8 of any no. of elements, by giving x1,y1,x2,y2
{																							//width should be a multiple of 8 and the icon should also be generated with the width as multiple of 8(GLCD fount creator) but this length could be limited my reducing the x2 as the multiple of 3
     7c0:	2f 92       	push	r2
     7c2:	3f 92       	push	r3
     7c4:	4f 92       	push	r4
     7c6:	5f 92       	push	r5
     7c8:	6f 92       	push	r6
     7ca:	7f 92       	push	r7
     7cc:	8f 92       	push	r8
     7ce:	9f 92       	push	r9
     7d0:	af 92       	push	r10
     7d2:	bf 92       	push	r11
     7d4:	cf 92       	push	r12
     7d6:	df 92       	push	r13
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	28 97       	sbiw	r28, 0x08	; 8
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	de bf       	out	0x3e, r29	; 62
     7ee:	89 83       	std	Y+1, r24	; 0x01
     7f0:	9a 83       	std	Y+2, r25	; 0x02
     7f2:	4b 83       	std	Y+3, r20	; 0x03
     7f4:	5c 83       	std	Y+4, r21	; 0x04
     7f6:	39 01       	movw	r6, r18
			}
		}
		__set_pixel(x1, (_length+y1), x2, 1, &_buff[0], buff_length);
		i=0;
	}
}
     7f8:	8d b7       	in	r24, 0x3d	; 61
     7fa:	9e b7       	in	r25, 0x3e	; 62
     7fc:	8f 83       	std	Y+7, r24	; 0x07
     7fe:	98 87       	std	Y+8, r25	; 0x08
	}
	ST7586_CSHIGH();
}
void _print_icon(int x1, int y1, int x2, uint8_t *font, uint8_t height , uint8_t width)		//function to print array of uint_8 of any no. of elements, by giving x1,y1,x2,y2
{																							//width should be a multiple of 8 and the icon should also be generated with the width as multiple of 8(GLCD fount creator) but this length could be limited my reducing the x2 as the multiple of 3
	int new_pos = 0, buff_length = (width*3);
     800:	8e 2d       	mov	r24, r14
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	2c 01       	movw	r4, r24
     806:	44 0c       	add	r4, r4
     808:	55 1c       	adc	r5, r5
     80a:	48 0e       	add	r4, r24
     80c:	59 1e       	adc	r5, r25
	uint8_t array_data = 0;

	for(int _length = 0; _length < height; _length++)
     80e:	21 2c       	mov	r2, r1
     810:	31 2c       	mov	r3, r1
	}
	ST7586_CSHIGH();
}
void _print_icon(int x1, int y1, int x2, uint8_t *font, uint8_t height , uint8_t width)		//function to print array of uint_8 of any no. of elements, by giving x1,y1,x2,y2
{																							//width should be a multiple of 8 and the icon should also be generated with the width as multiple of 8(GLCD fount creator) but this length could be limited my reducing the x2 as the multiple of 3
	int new_pos = 0, buff_length = (width*3);
     812:	c1 2c       	mov	r12, r1
     814:	d1 2c       	mov	r13, r1
     816:	6d 83       	std	Y+5, r22	; 0x05
     818:	7e 83       	std	Y+6, r23	; 0x06
     81a:	a0 2e       	mov	r10, r16
     81c:	be 2c       	mov	r11, r14
	uint8_t array_data = 0;

	for(int _length = 0; _length < height; _length++)
     81e:	5f c0       	rjmp	.+190    	; 0x8de <_print_icon+0x11e>
	{
     820:	8d b6       	in	r8, 0x3d	; 61
     822:	9e b6       	in	r9, 0x3e	; 62
		uint8_t _buff[buff_length];
     824:	8d b7       	in	r24, 0x3d	; 61
     826:	9e b7       	in	r25, 0x3e	; 62
     828:	84 19       	sub	r24, r4
     82a:	95 09       	sbc	r25, r5
     82c:	8d bf       	out	0x3d, r24	; 61
     82e:	9e bf       	out	0x3e, r25	; 62
     830:	0d b7       	in	r16, 0x3d	; 61
     832:	1e b7       	in	r17, 0x3e	; 62
     834:	0f 5f       	subi	r16, 0xFF	; 255
     836:	1f 4f       	sbci	r17, 0xFF	; 255
     838:	98 01       	movw	r18, r16
		for (int i = 0; i < buff_length; i++)			// to make the buff initialize with 0
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	05 c0       	rjmp	.+10     	; 0x84a <_print_icon+0x8a>
		{
			_buff[i] = 0x00;
     840:	f9 01       	movw	r30, r18
     842:	e8 0f       	add	r30, r24
     844:	f9 1f       	adc	r31, r25
     846:	10 82       	st	Z, r1
	uint8_t array_data = 0;

	for(int _length = 0; _length < height; _length++)
	{
		uint8_t _buff[buff_length];
		for (int i = 0; i < buff_length; i++)			// to make the buff initialize with 0
     848:	01 96       	adiw	r24, 0x01	; 1
     84a:	84 15       	cp	r24, r4
     84c:	95 05       	cpc	r25, r5
     84e:	c4 f3       	brlt	.-16     	; 0x840 <_print_icon+0x80>
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	29 c0       	rjmp	.+82     	; 0x8ac <_print_icon+0xec>
			_buff[i] = 0x00;
		}
		uint8_t i = 0, k = 0;
		for(int _width = 0; _width < (width/8); _width++)
		{
			array_data = pgm_read_byte(&(font[new_pos]));
     85a:	f3 01       	movw	r30, r6
     85c:	ec 0d       	add	r30, r12
     85e:	fd 1d       	adc	r31, r13
     860:	e4 90       	lpm	r14, Z
			new_pos++;
     862:	9f ef       	ldi	r25, 0xFF	; 255
     864:	c9 1a       	sub	r12, r25
     866:	d9 0a       	sbc	r13, r25
			for (int j = 7; j >= 0; j--)
     868:	87 e0       	ldi	r24, 0x07	; 7
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	1b c0       	rjmp	.+54     	; 0x8a4 <_print_icon+0xe4>
			{
				if (array_data & (1<<j))
     86e:	ee 2d       	mov	r30, r14
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	08 2e       	mov	r0, r24
     874:	02 c0       	rjmp	.+4      	; 0x87a <_print_icon+0xba>
     876:	f5 95       	asr	r31
     878:	e7 95       	ror	r30
     87a:	0a 94       	dec	r0
     87c:	e2 f7       	brpl	.-8      	; 0x876 <_print_icon+0xb6>
     87e:	e0 ff       	sbrs	r30, 0
     880:	0b c0       	rjmp	.+22     	; 0x898 <_print_icon+0xd8>
				{
					_buff[i] = _buff[i] | pre_def[k];
     882:	d9 01       	movw	r26, r18
     884:	a7 0f       	add	r26, r23
     886:	b1 1d       	adc	r27, r1
     888:	fc 90       	ld	r15, X
     88a:	e6 2f       	mov	r30, r22
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	e0 50       	subi	r30, 0x00	; 0
     890:	f0 4c       	sbci	r31, 0xC0	; 192
     892:	e0 81       	ld	r30, Z
     894:	ef 29       	or	r30, r15
     896:	ec 93       	st	X, r30
				}
				if(++k > 2)
     898:	6f 5f       	subi	r22, 0xFF	; 255
     89a:	63 30       	cpi	r22, 0x03	; 3
     89c:	10 f0       	brcs	.+4      	; 0x8a2 <_print_icon+0xe2>
				{
					k = 0;
					i++;
     89e:	7f 5f       	subi	r23, 0xFF	; 255
				{
					_buff[i] = _buff[i] | pre_def[k];
				}
				if(++k > 2)
				{
					k = 0;
     8a0:	60 e0       	ldi	r22, 0x00	; 0
		uint8_t i = 0, k = 0;
		for(int _width = 0; _width < (width/8); _width++)
		{
			array_data = pgm_read_byte(&(font[new_pos]));
			new_pos++;
			for (int j = 7; j >= 0; j--)
     8a2:	01 97       	sbiw	r24, 0x01	; 1
     8a4:	99 23       	and	r25, r25
     8a6:	1c f7       	brge	.-58     	; 0x86e <_print_icon+0xae>
		for (int i = 0; i < buff_length; i++)			// to make the buff initialize with 0
		{
			_buff[i] = 0x00;
		}
		uint8_t i = 0, k = 0;
		for(int _width = 0; _width < (width/8); _width++)
     8a8:	4f 5f       	subi	r20, 0xFF	; 255
     8aa:	5f 4f       	sbci	r21, 0xFF	; 255
     8ac:	8b 2d       	mov	r24, r11
     8ae:	86 95       	lsr	r24
     8b0:	86 95       	lsr	r24
     8b2:	86 95       	lsr	r24
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	48 17       	cp	r20, r24
     8b8:	59 07       	cpc	r21, r25
     8ba:	7c f2       	brlt	.-98     	; 0x85a <_print_icon+0x9a>
					k = 0;
					i++;
				}
			}
		}
		__set_pixel(x1, (_length+y1), x2, 1, &_buff[0], buff_length);
     8bc:	6d 81       	ldd	r22, Y+5	; 0x05
     8be:	7e 81       	ldd	r23, Y+6	; 0x06
     8c0:	62 0d       	add	r22, r2
     8c2:	73 1d       	adc	r23, r3
     8c4:	72 01       	movw	r14, r4
     8c6:	21 e0       	ldi	r18, 0x01	; 1
     8c8:	4b 81       	ldd	r20, Y+3	; 0x03
     8ca:	5c 81       	ldd	r21, Y+4	; 0x04
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	9a 81       	ldd	r25, Y+2	; 0x02
     8d0:	0e 94 97 03 	call	0x72e	; 0x72e <__set_pixel>
     8d4:	8d be       	out	0x3d, r8	; 61
     8d6:	9e be       	out	0x3e, r9	; 62
void _print_icon(int x1, int y1, int x2, uint8_t *font, uint8_t height , uint8_t width)		//function to print array of uint_8 of any no. of elements, by giving x1,y1,x2,y2
{																							//width should be a multiple of 8 and the icon should also be generated with the width as multiple of 8(GLCD fount creator) but this length could be limited my reducing the x2 as the multiple of 3
	int new_pos = 0, buff_length = (width*3);
	uint8_t array_data = 0;

	for(int _length = 0; _length < height; _length++)
     8d8:	8f ef       	ldi	r24, 0xFF	; 255
     8da:	28 1a       	sub	r2, r24
     8dc:	38 0a       	sbc	r3, r24
     8de:	8a 2d       	mov	r24, r10
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	28 16       	cp	r2, r24
     8e4:	39 06       	cpc	r3, r25
     8e6:	0c f4       	brge	.+2      	; 0x8ea <_print_icon+0x12a>
     8e8:	9b cf       	rjmp	.-202    	; 0x820 <_print_icon+0x60>
			}
		}
		__set_pixel(x1, (_length+y1), x2, 1, &_buff[0], buff_length);
		i=0;
	}
}
     8ea:	8f 81       	ldd	r24, Y+7	; 0x07
     8ec:	98 85       	ldd	r25, Y+8	; 0x08
     8ee:	8d bf       	out	0x3d, r24	; 61
     8f0:	9e bf       	out	0x3e, r25	; 62
     8f2:	28 96       	adiw	r28, 0x08	; 8
     8f4:	cd bf       	out	0x3d, r28	; 61
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	ff 90       	pop	r15
     902:	ef 90       	pop	r14
     904:	df 90       	pop	r13
     906:	cf 90       	pop	r12
     908:	bf 90       	pop	r11
     90a:	af 90       	pop	r10
     90c:	9f 90       	pop	r9
     90e:	8f 90       	pop	r8
     910:	7f 90       	pop	r7
     912:	6f 90       	pop	r6
     914:	5f 90       	pop	r5
     916:	4f 90       	pop	r4
     918:	3f 90       	pop	r3
     91a:	2f 90       	pop	r2
     91c:	08 95       	ret

0000091e <main>:
void ST7586_send_data(uint8_t data[], uint8_t dataSize);



int main(void)
{   _PROTECTED_WRITE (CLKCTRL.OSCHFCTRLA, ((CLKCTRL_FREQSEL_24M_gc)|(CLKCTRL_AUTOTUNE_bm)));			//To increase clock freq
     91e:	95 e2       	ldi	r25, 0x25	; 37
     920:	88 ed       	ldi	r24, 0xD8	; 216
     922:	84 bf       	out	0x34, r24	; 52
     924:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PORTB_DIR |= (1<<4);  // data/cmd
     928:	e0 e2       	ldi	r30, 0x20	; 32
     92a:	f4 e0       	ldi	r31, 0x04	; 4
     92c:	80 81       	ld	r24, Z
     92e:	80 61       	ori	r24, 0x10	; 16
     930:	80 83       	st	Z, r24
	PORTC_DIR |= (1<<5); //Reset pin
     932:	e0 e4       	ldi	r30, 0x40	; 64
     934:	f4 e0       	ldi	r31, 0x04	; 4
     936:	80 81       	ld	r24, Z
     938:	80 62       	ori	r24, 0x20	; 32
     93a:	80 83       	st	Z, r24
	TCA0_PWM_init();
     93c:	0e 94 3b 03 	call	0x676	; 0x676 <TCA0_PWM_init>
	Sensor_init();
     940:	0e 94 cc 02 	call	0x598	; 0x598 <Sensor_init>
	USART1_init(9600);
     944:	80 e8       	ldi	r24, 0x80	; 128
     946:	95 e2       	ldi	r25, 0x25	; 37
     948:	0e 94 be 01 	call	0x37c	; 0x37c <USART1_init>
	ADC0_init();
     94c:	0e 94 21 03 	call	0x642	; 0x642 <ADC0_init>
	SPI_0_init();
     950:	0e 94 1b 02 	call	0x436	; 0x436 <SPI_0_init>
	ST7586_init(1);
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	0e 94 d0 05 	call	0xba0	; 0xba0 <ST7586_init>
	_print_icon(25,25,32,low_battery_15x32,15,32);
     95a:	68 94       	set
     95c:	ee 24       	eor	r14, r14
     95e:	e5 f8       	bld	r14, 5
     960:	f1 2c       	mov	r15, r1
     962:	0f e0       	ldi	r16, 0x0F	; 15
     964:	10 e0       	ldi	r17, 0x00	; 0
     966:	2a e6       	ldi	r18, 0x6A	; 106
     968:	31 e0       	ldi	r19, 0x01	; 1
     96a:	40 e2       	ldi	r20, 0x20	; 32
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	69 e1       	ldi	r22, 0x19	; 25
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	89 e1       	ldi	r24, 0x19	; 25
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_print_icon>
	while (1)
	{   uint8_t i = 200;
		float pressure = 0.0;
     97a:	c1 2c       	mov	r12, r1
     97c:	d1 2c       	mov	r13, r1
     97e:	76 01       	movw	r14, r12
	ADC0_init();
	SPI_0_init();
	ST7586_init(1);
	_print_icon(25,25,32,low_battery_15x32,15,32);
	while (1)
	{   uint8_t i = 200;
     980:	c8 ec       	ldi	r28, 0xC8	; 200
		float pressure = 0.0;
		
		while(i)
     982:	11 c0       	rjmp	.+34     	; 0x9a6 <main+0x88>
		{
			pressure = pressure + pressureRead();
     984:	0e 94 d5 02 	call	0x5aa	; 0x5aa <pressureRead>
     988:	9b 01       	movw	r18, r22
     98a:	ac 01       	movw	r20, r24
     98c:	c7 01       	movw	r24, r14
     98e:	b6 01       	movw	r22, r12
     990:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__addsf3>
     994:	6b 01       	movw	r12, r22
     996:	7c 01       	movw	r14, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     998:	8f e6       	ldi	r24, 0x6F	; 111
     99a:	97 e1       	ldi	r25, 0x17	; 23
     99c:	01 97       	sbiw	r24, 0x01	; 1
     99e:	f1 f7       	brne	.-4      	; 0x99c <main+0x7e>
     9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <main+0x84>
     9a2:	00 00       	nop
			_delay_us(1000);
			i--;
     9a4:	c1 50       	subi	r28, 0x01	; 1
	_print_icon(25,25,32,low_battery_15x32,15,32);
	while (1)
	{   uint8_t i = 200;
		float pressure = 0.0;
		
		while(i)
     9a6:	c1 11       	cpse	r28, r1
     9a8:	ed cf       	rjmp	.-38     	; 0x984 <main+0x66>
		{
			pressure = pressure + pressureRead();
			_delay_us(1000);
			i--;
		}
	float	final_pressure = ((pressure/200)*51.7149); //final pressure in mmHg
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	48 e4       	ldi	r20, 0x48	; 72
     9b0:	53 e4       	ldi	r21, 0x43	; 67
     9b2:	c7 01       	movw	r24, r14
     9b4:	b6 01       	movw	r22, r12
     9b6:	0e 94 00 07 	call	0xe00	; 0xe00 <__divsf3>
     9ba:	2f e0       	ldi	r18, 0x0F	; 15
     9bc:	3c ed       	ldi	r19, 0xDC	; 220
     9be:	4e e4       	ldi	r20, 0x4E	; 78
     9c0:	52 e4       	ldi	r21, 0x42	; 66
     9c2:	0e 94 5f 08 	call	0x10be	; 0x10be <__mulsf3>
	USART1_sendFloat(final_pressure,2);
     9c6:	42 e0       	ldi	r20, 0x02	; 2
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	0e 94 11 02 	call	0x422	; 0x422 <USART1_sendFloat>
	
	int count = 0;
	count = ADC0_read(channel_1);
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	0e 94 2e 03 	call	0x65c	; 0x65c <ADC0_read>
	
	dutyCycle1 = 0.3663004*count + 1500;
     9d4:	bc 01       	movw	r22, r24
     9d6:	99 0f       	add	r25, r25
     9d8:	88 0b       	sbc	r24, r24
     9da:	99 0b       	sbc	r25, r25
     9dc:	0e 94 aa 07 	call	0xf54	; 0xf54 <__floatsisf>
     9e0:	2a eb       	ldi	r18, 0xBA	; 186
     9e2:	3b e8       	ldi	r19, 0x8B	; 139
     9e4:	4b eb       	ldi	r20, 0xBB	; 187
     9e6:	5e e3       	ldi	r21, 0x3E	; 62
     9e8:	0e 94 5f 08 	call	0x10be	; 0x10be <__mulsf3>
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e8       	ldi	r19, 0x80	; 128
     9f0:	4b eb       	ldi	r20, 0xBB	; 187
     9f2:	54 e4       	ldi	r21, 0x44	; 68
     9f4:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__addsf3>
     9f8:	0e 94 72 07 	call	0xee4	; 0xee4 <__fixsfsi>
     9fc:	60 93 05 40 	sts	0x4005, r22	; 0x804005 <dutyCycle1>
     a00:	70 93 06 40 	sts	0x4006, r23	; 0x804006 <dutyCycle1+0x1>
	TCA0.SINGLE.CMP0 = dutyCycle1;
     a04:	60 93 28 0a 	sts	0x0A28, r22	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7e0a28>
     a08:	70 93 29 0a 	sts	0x0A29, r23	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7e0a29>
		
	}
     a0c:	b6 cf       	rjmp	.-148    	; 0x97a <main+0x5c>

00000a0e <ST7586_data>:
}

uint16_t ST7586_getVOP()
{
	return (display_vop);
}
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	8c 01       	movw	r16, r24
     a18:	d6 2f       	mov	r29, r22
     a1a:	e4 e0       	ldi	r30, 0x04	; 4
     a1c:	f4 e0       	ldi	r31, 0x04	; 4
     a1e:	80 81       	ld	r24, Z
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	80 83       	st	Z, r24
     a24:	c0 e0       	ldi	r28, 0x00	; 0
     a26:	08 c0       	rjmp	.+16     	; 0xa38 <ST7586_data+0x2a>
     a28:	f8 01       	movw	r30, r16
     a2a:	ec 0f       	add	r30, r28
     a2c:	f1 1d       	adc	r31, r1
     a2e:	80 81       	ld	r24, Z
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_0_send_char>
     a36:	cf 5f       	subi	r28, 0xFF	; 255
     a38:	cd 17       	cp	r28, r29
     a3a:	b0 f3       	brcs	.-20     	; 0xa28 <ST7586_data+0x1a>
     a3c:	e4 e0       	ldi	r30, 0x04	; 4
     a3e:	f4 e0       	ldi	r31, 0x04	; 4
     a40:	80 81       	ld	r24, Z
     a42:	80 68       	ori	r24, 0x80	; 128
     a44:	80 83       	st	Z, r24
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	08 95       	ret

00000a50 <ST7586_cmd>:
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	c4 e0       	ldi	r28, 0x04	; 4
     a5a:	d4 e0       	ldi	r29, 0x04	; 4
     a5c:	98 81       	ld	r25, Y
     a5e:	9f 77       	andi	r25, 0x7F	; 127
     a60:	98 83       	st	Y, r25
     a62:	00 e2       	ldi	r16, 0x20	; 32
     a64:	14 e0       	ldi	r17, 0x04	; 4
     a66:	f8 01       	movw	r30, r16
     a68:	94 81       	ldd	r25, Z+4	; 0x04
     a6a:	9f 7e       	andi	r25, 0xEF	; 239
     a6c:	94 83       	std	Z+4, r25	; 0x04
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_0_send_char>
     a74:	f8 01       	movw	r30, r16
     a76:	84 81       	ldd	r24, Z+4	; 0x04
     a78:	80 61       	ori	r24, 0x10	; 16
     a7a:	84 83       	std	Z+4, r24	; 0x04
     a7c:	88 81       	ld	r24, Y
     a7e:	80 68       	ori	r24, 0x80	; 128
     a80:	88 83       	st	Y, r24
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	08 95       	ret

00000a8c <ST7586_setDispPosition>:
		ST7586_data(fillArray,ST7586_DISPLAYSIZE_X/3);
	}
}

void ST7586_setDispPosition(uint16_t x1, uint8_t y1, uint16_t x2, uint8_t y2)
{
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	00 d0       	rcall	.+0      	; 0xa9e <ST7586_setDispPosition+0x12>
     a9e:	00 d0       	rcall	.+0      	; 0xaa0 <ST7586_setDispPosition+0x14>
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
	uint8_t tempArgs[4];
	// Check if it's outside the display sizes, and if x1/y1 is smaller than x2/y2
	if ((x1 > ST7586_DISPLAYSIZE_X-1) || (x2 > ST7586_DISPLAYSIZE_X-1) || (y1 > ST7586_DISPLAYSIZE_Y) || (y2 > ST7586_DISPLAYSIZE_Y))
     aa4:	80 39       	cpi	r24, 0x90	; 144
     aa6:	31 e0       	ldi	r19, 0x01	; 1
     aa8:	93 07       	cpc	r25, r19
     aaa:	a8 f5       	brcc	.+106    	; 0xb16 <ST7586_setDispPosition+0x8a>
     aac:	40 39       	cpi	r20, 0x90	; 144
     aae:	31 e0       	ldi	r19, 0x01	; 1
     ab0:	53 07       	cpc	r21, r19
     ab2:	88 f5       	brcc	.+98     	; 0xb16 <ST7586_setDispPosition+0x8a>
     ab4:	69 3c       	cpi	r22, 0xC9	; 201
     ab6:	78 f5       	brcc	.+94     	; 0xb16 <ST7586_setDispPosition+0x8a>
     ab8:	29 3c       	cpi	r18, 0xC9	; 201
     aba:	68 f5       	brcc	.+90     	; 0xb16 <ST7586_setDispPosition+0x8a>
		return;
	if ((x1>x2) || (y1>y2))
     abc:	48 17       	cp	r20, r24
     abe:	59 07       	cpc	r21, r25
     ac0:	50 f1       	brcs	.+84     	; 0xb16 <ST7586_setDispPosition+0x8a>
     ac2:	26 17       	cp	r18, r22
     ac4:	40 f1       	brcs	.+80     	; 0xb16 <ST7586_setDispPosition+0x8a>
     ac6:	c2 2e       	mov	r12, r18
     ac8:	7a 01       	movw	r14, r20
     aca:	d6 2e       	mov	r13, r22
     acc:	8c 01       	movw	r16, r24
		return;
	
	ST7586_cmd(SETCOLUMNADDRESS);	// Set Column Address
     ace:	8a e2       	ldi	r24, 0x2A	; 42
     ad0:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	// Stupid display addressing. Why requiring two bytes, when the max value is 127 for columns / 160 for rows???
	tempArgs[0] = 0;
     ad4:	19 82       	std	Y+1, r1	; 0x01
	tempArgs[1] = x1/3;
     ad6:	98 01       	movw	r18, r16
     ad8:	ab ea       	ldi	r26, 0xAB	; 171
     ada:	ba ea       	ldi	r27, 0xAA	; 170
     adc:	0e 94 84 0a 	call	0x1508	; 0x1508 <__umulhisi3>
     ae0:	96 95       	lsr	r25
     ae2:	87 95       	ror	r24
     ae4:	8a 83       	std	Y+2, r24	; 0x02
	tempArgs[2] = 0;
     ae6:	1b 82       	std	Y+3, r1	; 0x03
	tempArgs[3] = x2/3;
     ae8:	97 01       	movw	r18, r14
     aea:	0e 94 84 0a 	call	0x1508	; 0x1508 <__umulhisi3>
     aee:	96 95       	lsr	r25
     af0:	87 95       	ror	r24
     af2:	8c 83       	std	Y+4, r24	; 0x04
	ST7586_data(tempArgs, 4);
     af4:	64 e0       	ldi	r22, 0x04	; 4
     af6:	ce 01       	movw	r24, r28
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	0e 94 07 05 	call	0xa0e	; 0xa0e <ST7586_data>
	ST7586_cmd(SETROWADDRESS);		// Set Row Address
     afe:	8b e2       	ldi	r24, 0x2B	; 43
     b00:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	tempArgs[0] = 0;
     b04:	19 82       	std	Y+1, r1	; 0x01
	tempArgs[1] = y1;
     b06:	da 82       	std	Y+2, r13	; 0x02
	tempArgs[2] = 0;
     b08:	1b 82       	std	Y+3, r1	; 0x03
	tempArgs[3] = y2;
     b0a:	cc 82       	std	Y+4, r12	; 0x04
	ST7586_data(tempArgs, 4);
     b0c:	64 e0       	ldi	r22, 0x04	; 4
     b0e:	ce 01       	movw	r24, r28
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	0e 94 07 05 	call	0xa0e	; 0xa0e <ST7586_data>
}
     b16:	24 96       	adiw	r28, 0x04	; 4
     b18:	cd bf       	out	0x3d, r28	; 61
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	ff 90       	pop	r15
     b26:	ef 90       	pop	r14
     b28:	df 90       	pop	r13
     b2a:	cf 90       	pop	r12
     b2c:	08 95       	ret

00000b2e <ST7586_fill>:
{
	return (display_vop);
}

void ST7586_fill(uint8_t color)
{
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62
     b38:	c5 58       	subi	r28, 0x85	; 133
     b3a:	d1 09       	sbc	r29, r1
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	de bf       	out	0x3e, r29	; 62
	uint8_t fillArray[ST7586_DISPLAYSIZE_X/3];
	
	for (uint8_t i = 0; i < (ST7586_DISPLAYSIZE_X / 3); i++)
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0f c0       	rjmp	.+30     	; 0xb62 <ST7586_fill+0x34>
	{
		fillArray[i] = pgm_read_byte(&(columnColorToByte[color]));
     b44:	29 2f       	mov	r18, r25
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	e8 2f       	mov	r30, r24
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	ea 55       	subi	r30, 0x5A	; 90
     b4e:	fe 4f       	sbci	r31, 0xFE	; 254
     b50:	e4 91       	lpm	r30, Z
     b52:	a1 e0       	ldi	r26, 0x01	; 1
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	ac 0f       	add	r26, r28
     b58:	bd 1f       	adc	r27, r29
     b5a:	a2 0f       	add	r26, r18
     b5c:	b3 1f       	adc	r27, r19
     b5e:	ec 93       	st	X, r30

void ST7586_fill(uint8_t color)
{
	uint8_t fillArray[ST7586_DISPLAYSIZE_X/3];
	
	for (uint8_t i = 0; i < (ST7586_DISPLAYSIZE_X / 3); i++)
     b60:	9f 5f       	subi	r25, 0xFF	; 255
     b62:	95 38       	cpi	r25, 0x85	; 133
     b64:	78 f3       	brcs	.-34     	; 0xb44 <ST7586_fill+0x16>
	{
		fillArray[i] = pgm_read_byte(&(columnColorToByte[color]));
	}
	
	ST7586_setDispPosition(0,0,ST7586_DISPLAYSIZE_X-1,ST7586_DISPLAYSIZE_Y-1);
     b66:	27 ec       	ldi	r18, 0xC7	; 199
     b68:	4f e8       	ldi	r20, 0x8F	; 143
     b6a:	51 e0       	ldi	r21, 0x01	; 1
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 46 05 	call	0xa8c	; 0xa8c <ST7586_setDispPosition>
	ST7586_cmd(WRITEDISPLAYDATA);
     b76:	8c e2       	ldi	r24, 0x2C	; 44
     b78:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	for (uint8_t y = 0; y < ST7586_DISPLAYSIZE_Y; y++)
     b7c:	10 e0       	ldi	r17, 0x00	; 0
     b7e:	06 c0       	rjmp	.+12     	; 0xb8c <ST7586_fill+0x5e>
	{
		ST7586_data(fillArray,ST7586_DISPLAYSIZE_X/3);
     b80:	65 e8       	ldi	r22, 0x85	; 133
     b82:	ce 01       	movw	r24, r28
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	0e 94 07 05 	call	0xa0e	; 0xa0e <ST7586_data>
		fillArray[i] = pgm_read_byte(&(columnColorToByte[color]));
	}
	
	ST7586_setDispPosition(0,0,ST7586_DISPLAYSIZE_X-1,ST7586_DISPLAYSIZE_Y-1);
	ST7586_cmd(WRITEDISPLAYDATA);
	for (uint8_t y = 0; y < ST7586_DISPLAYSIZE_Y; y++)
     b8a:	1f 5f       	subi	r17, 0xFF	; 255
     b8c:	18 3c       	cpi	r17, 0xC8	; 200
     b8e:	c0 f3       	brcs	.-16     	; 0xb80 <ST7586_fill+0x52>
	{
		ST7586_data(fillArray,ST7586_DISPLAYSIZE_X/3);
	}
}
     b90:	cb 57       	subi	r28, 0x7B	; 123
     b92:	df 4f       	sbci	r29, 0xFF	; 255
     b94:	cd bf       	out	0x3d, r28	; 61
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	08 95       	ret

00000ba0 <ST7586_init>:
// 	ST7586_cmd(DISPLAYONOFF | 1);		// Turn display on
// 	//ST7586_fill(ST7586_COLOR_WHITE);
// }

void ST7586_init(char monochrome)
{
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <ST7586_init+0xa>
     baa:	00 d0       	rcall	.+0      	; 0xbac <ST7586_init+0xc>
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	18 2f       	mov	r17, r24
	uint8_t argsArray[4];
	dataSerial.firstTime = 1;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	80 93 d0 40 	sts	0x40D0, r24	; 0x8040d0 <dataSerial+0x2>
	
	ST7586_CSHIGH();
     bb8:	e4 e0       	ldi	r30, 0x04	; 4
     bba:	f4 e0       	ldi	r31, 0x04	; 4
     bbc:	80 81       	ld	r24, Z
     bbe:	80 68       	ori	r24, 0x80	; 128
     bc0:	80 83       	st	Z, r24
	ST7586_DATAMODE();
     bc2:	e0 e2       	ldi	r30, 0x20	; 32
     bc4:	f4 e0       	ldi	r31, 0x04	; 4
     bc6:	84 81       	ldd	r24, Z+4	; 0x04
     bc8:	80 61       	ori	r24, 0x10	; 16
     bca:	84 83       	std	Z+4, r24	; 0x04
	
	ST7586_CLRRST();
     bcc:	e0 e4       	ldi	r30, 0x40	; 64
     bce:	f4 e0       	ldi	r31, 0x04	; 4
     bd0:	84 81       	ldd	r24, Z+4	; 0x04
     bd2:	80 62       	ori	r24, 0x20	; 32
     bd4:	84 83       	std	Z+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bd6:	81 ee       	ldi	r24, 0xE1	; 225
     bd8:	94 e0       	ldi	r25, 0x04	; 4
     bda:	01 97       	sbiw	r24, 0x01	; 1
     bdc:	f1 f7       	brne	.-4      	; 0xbda <ST7586_init+0x3a>
     bde:	00 c0       	rjmp	.+0      	; 0xbe0 <ST7586_init+0x40>
     be0:	00 00       	nop
	_delay_ms(5);
	ST7586_SETRST();
     be2:	84 81       	ldd	r24, Z+4	; 0x04
     be4:	8f 7d       	andi	r24, 0xDF	; 223
     be6:	84 83       	std	Z+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     be8:	96 e0       	ldi	r25, 0x06	; 6
     bea:	9a 95       	dec	r25
     bec:	f1 f7       	brne	.-4      	; 0xbea <ST7586_init+0x4a>
     bee:	00 c0       	rjmp	.+0      	; 0xbf0 <ST7586_init+0x50>
	_delay_us(20);
	ST7586_CLRRST();					// Power-ON -> reset display and wait ~120ms
     bf0:	84 81       	ldd	r24, Z+4	; 0x04
     bf2:	80 62       	ori	r24, 0x20	; 32
     bf4:	84 83       	std	Z+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bf6:	8f e2       	ldi	r24, 0x2F	; 47
     bf8:	95 e7       	ldi	r25, 0x75	; 117
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	f1 f7       	brne	.-4      	; 0xbfa <ST7586_init+0x5a>
     bfe:	00 c0       	rjmp	.+0      	; 0xc00 <ST7586_init+0x60>
     c00:	00 00       	nop
	_delay_ms(120);
	
	/* Skip OTP Stuff from the datasheet, not sure if it's always required */
	ST7586_cmd(RESET);
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
     c08:	8f e2       	ldi	r24, 0x2F	; 47
     c0a:	95 e7       	ldi	r25, 0x75	; 117
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <ST7586_init+0x6c>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <ST7586_init+0x72>
     c12:	00 00       	nop
	_delay_ms(120);
	ST7586_cmd(POWERSAVE | 1);			// Sleep out mode
     c14:	81 e1       	ldi	r24, 0x11	; 17
     c16:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	ST7586_cmd(DISPLAYONOFF);			// Disply OFF
     c1a:	88 e2       	ldi	r24, 0x28	; 40
     c1c:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	ST7586_cmd(SETVOP);					// Set Vop to 0x0F0
     c20:	80 ec       	ldi	r24, 0xC0	; 192
     c22:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	argsArray[0] = (uint8_t)(display_vop & 0x00FF); argsArray[1] = (uint8_t)(display_vop >> 8);
     c26:	90 91 07 40 	lds	r25, 0x4007	; 0x804007 <display_vop>
     c2a:	80 91 08 40 	lds	r24, 0x4008	; 0x804008 <display_vop+0x1>
     c2e:	99 83       	std	Y+1, r25	; 0x01
     c30:	8a 83       	std	Y+2, r24	; 0x02
	ST7586_data(argsArray,2);
     c32:	62 e0       	ldi	r22, 0x02	; 2
     c34:	ce 01       	movw	r24, r28
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	0e 94 07 05 	call	0xa0e	; 0xa0e <ST7586_data>
	ST7586_cmd(BIASSYSTEM);				// BIAS System Ratio 1/14
     c3c:	83 ec       	ldi	r24, 0xC3	; 195
     c3e:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	argsArray[0] = 0x05;
     c42:	05 e0       	ldi	r16, 0x05	; 5
     c44:	09 83       	std	Y+1, r16	; 0x01
	ST7586_data(argsArray,1);
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	ce 01       	movw	r24, r28
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	0e 94 07 05 	call	0xa0e	; 0xa0e <ST7586_data>
	ST7586_cmd(BOOSTERLEVEL);			// Set Booster Level to x8
     c50:	84 ec       	ldi	r24, 0xC4	; 196
     c52:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	argsArray[0] = 0x05;
     c56:	09 83       	std	Y+1, r16	; 0x01
	ST7586_data(argsArray,1);
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	ce 01       	movw	r24, r28
     c5c:	01 96       	adiw	r24, 0x01	; 1
     c5e:	0e 94 07 05 	call	0xa0e	; 0xa0e <ST7586_data>
	ST7586_cmd(ANALOGCONTROL);			// enable analog circuit
     c62:	80 ed       	ldi	r24, 0xD0	; 208
     c64:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	argsArray[0] = 0xd1;
     c68:	81 ed       	ldi	r24, 0xD1	; 209
     c6a:	89 83       	std	Y+1, r24	; 0x01
	ST7586_data(argsArray,1);
     c6c:	61 e0       	ldi	r22, 0x01	; 1
     c6e:	ce 01       	movw	r24, r28
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	0e 94 07 05 	call	0xa0e	; 0xa0e <ST7586_data>
	ST7586_cmd(FOSCDIVIDER);			// Set FOSC Divider to "not divide"
     c76:	83 eb       	ldi	r24, 0xB3	; 179
     c78:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	argsArray[0] = 0;
     c7c:	19 82       	std	Y+1, r1	; 0x01
	ST7586_data(argsArray,1);
     c7e:	61 e0       	ldi	r22, 0x01	; 1
     c80:	ce 01       	movw	r24, r28
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	0e 94 07 05 	call	0xa0e	; 0xa0e <ST7586_data>
	ST7586_cmd(NLINEINVERSION);			// Set N-Line Inversion ( 8B, dunno why)
     c88:	85 eb       	ldi	r24, 0xB5	; 181
     c8a:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	argsArray[0] = 0x8B;
     c8e:	8b e8       	ldi	r24, 0x8B	; 139
     c90:	89 83       	std	Y+1, r24	; 0x01
	ST7586_data(argsArray,1);
     c92:	61 e0       	ldi	r22, 0x01	; 1
     c94:	ce 01       	movw	r24, r28
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	0e 94 07 05 	call	0xa0e	; 0xa0e <ST7586_data>
	ST7586_cmd(DISPLAYMODE | monochrome);	// Set Display mode to grayscale or monochrome, when "monochrome" is 1
     c9c:	81 2f       	mov	r24, r17
     c9e:	88 63       	ori	r24, 0x38	; 56
     ca0:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	ST7586_cmd(ENABLEDDRAMINTERFACE);	// Enable DDRAM interface
     ca4:	8a e3       	ldi	r24, 0x3A	; 58
     ca6:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	argsArray[0] = ENABLEDDRAMINTERFACE_FIXARG;
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	89 83       	std	Y+1, r24	; 0x01
	ST7586_data(argsArray,1);
     cae:	61 e0       	ldi	r22, 0x01	; 1
     cb0:	ce 01       	movw	r24, r28
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	0e 94 07 05 	call	0xa0e	; 0xa0e <ST7586_data>
	ST7586_cmd(DISPLAYCONTROL);			// Normal display scan direction
     cb8:	86 e3       	ldi	r24, 0x36	; 54
     cba:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	argsArray[0] = 0;
     cbe:	19 82       	std	Y+1, r1	; 0x01
	ST7586_data(argsArray,1);
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	ce 01       	movw	r24, r28
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	0e 94 07 05 	call	0xa0e	; 0xa0e <ST7586_data>
	ST7586_cmd(DISPLAYDUTY);			// Display duty. Set to 9F when duty is 160.
     cca:	80 eb       	ldi	r24, 0xB0	; 176
     ccc:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	argsArray[0] = 0x9F;
     cd0:	8f e9       	ldi	r24, 0x9F	; 159
     cd2:	89 83       	std	Y+1, r24	; 0x01
	ST7586_data(argsArray,1);
     cd4:	61 e0       	ldi	r22, 0x01	; 1
     cd6:	ce 01       	movw	r24, r28
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	0e 94 07 05 	call	0xa0e	; 0xa0e <ST7586_data>
	ST7586_cmd(FRAMERATEGRAYMODE | monochrome);		// Display Frame Rate in Grayscale/Monochrome Mode (77Hz for all Temperatures)
     cde:	81 2f       	mov	r24, r17
     ce0:	80 6f       	ori	r24, 0xF0	; 240
     ce2:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	argsArray[0] = 0x12;argsArray[2] = 0x12;	// Todo: Proper testing with various temperatures for the right framerates!
     ce6:	82 e1       	ldi	r24, 0x12	; 18
     ce8:	89 83       	std	Y+1, r24	; 0x01
     cea:	8b 83       	std	Y+3, r24	; 0x03
	argsArray[3] = 0x12;argsArray[4] = 0x12;
     cec:	8c 83       	std	Y+4, r24	; 0x04
     cee:	8d 83       	std	Y+5, r24	; 0x05
	ST7586_data(argsArray,4);
     cf0:	64 e0       	ldi	r22, 0x04	; 4
     cf2:	ce 01       	movw	r24, r28
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	0e 94 07 05 	call	0xa0e	; 0xa0e <ST7586_data>
	ST7586_cmd(INVERSEDISPLAY);			// No display inversion (Normal Display)
     cfa:	80 e2       	ldi	r24, 0x20	; 32
     cfc:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	ST7586_cmd(DISPLAYONOFF | 1);		// Turn display on
     d00:	89 e2       	ldi	r24, 0x29	; 41
     d02:	0e 94 28 05 	call	0xa50	; 0xa50 <ST7586_cmd>
	ST7586_fill(ST7586_COLOR_WHITE);
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	0e 94 97 05 	call	0xb2e	; 0xb2e <ST7586_fill>
}
     d0c:	24 96       	adiw	r28, 0x04	; 4
     d0e:	cd bf       	out	0x3d, r28	; 61
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	08 95       	ret

00000d1c <__subsf3>:
     d1c:	50 58       	subi	r21, 0x80	; 128

00000d1e <__addsf3>:
     d1e:	bb 27       	eor	r27, r27
     d20:	aa 27       	eor	r26, r26
     d22:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__addsf3x>
     d26:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_round>
     d2a:	0e 94 12 08 	call	0x1024	; 0x1024 <__fp_pscA>
     d2e:	38 f0       	brcs	.+14     	; 0xd3e <__addsf3+0x20>
     d30:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_pscB>
     d34:	20 f0       	brcs	.+8      	; 0xd3e <__addsf3+0x20>
     d36:	39 f4       	brne	.+14     	; 0xd46 <__addsf3+0x28>
     d38:	9f 3f       	cpi	r25, 0xFF	; 255
     d3a:	19 f4       	brne	.+6      	; 0xd42 <__addsf3+0x24>
     d3c:	26 f4       	brtc	.+8      	; 0xd46 <__addsf3+0x28>
     d3e:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>
     d42:	0e f4       	brtc	.+2      	; 0xd46 <__addsf3+0x28>
     d44:	e0 95       	com	r30
     d46:	e7 fb       	bst	r30, 7
     d48:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>

00000d4c <__addsf3x>:
     d4c:	e9 2f       	mov	r30, r25
     d4e:	0e 94 31 08 	call	0x1062	; 0x1062 <__fp_split3>
     d52:	58 f3       	brcs	.-42     	; 0xd2a <__addsf3+0xc>
     d54:	ba 17       	cp	r27, r26
     d56:	62 07       	cpc	r22, r18
     d58:	73 07       	cpc	r23, r19
     d5a:	84 07       	cpc	r24, r20
     d5c:	95 07       	cpc	r25, r21
     d5e:	20 f0       	brcs	.+8      	; 0xd68 <__addsf3x+0x1c>
     d60:	79 f4       	brne	.+30     	; 0xd80 <__addsf3x+0x34>
     d62:	a6 f5       	brtc	.+104    	; 0xdcc <__addsf3x+0x80>
     d64:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__fp_zero>
     d68:	0e f4       	brtc	.+2      	; 0xd6c <__addsf3x+0x20>
     d6a:	e0 95       	com	r30
     d6c:	0b 2e       	mov	r0, r27
     d6e:	ba 2f       	mov	r27, r26
     d70:	a0 2d       	mov	r26, r0
     d72:	0b 01       	movw	r0, r22
     d74:	b9 01       	movw	r22, r18
     d76:	90 01       	movw	r18, r0
     d78:	0c 01       	movw	r0, r24
     d7a:	ca 01       	movw	r24, r20
     d7c:	a0 01       	movw	r20, r0
     d7e:	11 24       	eor	r1, r1
     d80:	ff 27       	eor	r31, r31
     d82:	59 1b       	sub	r21, r25
     d84:	99 f0       	breq	.+38     	; 0xdac <__addsf3x+0x60>
     d86:	59 3f       	cpi	r21, 0xF9	; 249
     d88:	50 f4       	brcc	.+20     	; 0xd9e <__addsf3x+0x52>
     d8a:	50 3e       	cpi	r21, 0xE0	; 224
     d8c:	68 f1       	brcs	.+90     	; 0xde8 <__addsf3x+0x9c>
     d8e:	1a 16       	cp	r1, r26
     d90:	f0 40       	sbci	r31, 0x00	; 0
     d92:	a2 2f       	mov	r26, r18
     d94:	23 2f       	mov	r18, r19
     d96:	34 2f       	mov	r19, r20
     d98:	44 27       	eor	r20, r20
     d9a:	58 5f       	subi	r21, 0xF8	; 248
     d9c:	f3 cf       	rjmp	.-26     	; 0xd84 <__addsf3x+0x38>
     d9e:	46 95       	lsr	r20
     da0:	37 95       	ror	r19
     da2:	27 95       	ror	r18
     da4:	a7 95       	ror	r26
     da6:	f0 40       	sbci	r31, 0x00	; 0
     da8:	53 95       	inc	r21
     daa:	c9 f7       	brne	.-14     	; 0xd9e <__addsf3x+0x52>
     dac:	7e f4       	brtc	.+30     	; 0xdcc <__addsf3x+0x80>
     dae:	1f 16       	cp	r1, r31
     db0:	ba 0b       	sbc	r27, r26
     db2:	62 0b       	sbc	r22, r18
     db4:	73 0b       	sbc	r23, r19
     db6:	84 0b       	sbc	r24, r20
     db8:	ba f0       	brmi	.+46     	; 0xde8 <__addsf3x+0x9c>
     dba:	91 50       	subi	r25, 0x01	; 1
     dbc:	a1 f0       	breq	.+40     	; 0xde6 <__addsf3x+0x9a>
     dbe:	ff 0f       	add	r31, r31
     dc0:	bb 1f       	adc	r27, r27
     dc2:	66 1f       	adc	r22, r22
     dc4:	77 1f       	adc	r23, r23
     dc6:	88 1f       	adc	r24, r24
     dc8:	c2 f7       	brpl	.-16     	; 0xdba <__addsf3x+0x6e>
     dca:	0e c0       	rjmp	.+28     	; 0xde8 <__addsf3x+0x9c>
     dcc:	ba 0f       	add	r27, r26
     dce:	62 1f       	adc	r22, r18
     dd0:	73 1f       	adc	r23, r19
     dd2:	84 1f       	adc	r24, r20
     dd4:	48 f4       	brcc	.+18     	; 0xde8 <__addsf3x+0x9c>
     dd6:	87 95       	ror	r24
     dd8:	77 95       	ror	r23
     dda:	67 95       	ror	r22
     ddc:	b7 95       	ror	r27
     dde:	f7 95       	ror	r31
     de0:	9e 3f       	cpi	r25, 0xFE	; 254
     de2:	08 f0       	brcs	.+2      	; 0xde6 <__addsf3x+0x9a>
     de4:	b0 cf       	rjmp	.-160    	; 0xd46 <__addsf3+0x28>
     de6:	93 95       	inc	r25
     de8:	88 0f       	add	r24, r24
     dea:	08 f0       	brcs	.+2      	; 0xdee <__addsf3x+0xa2>
     dec:	99 27       	eor	r25, r25
     dee:	ee 0f       	add	r30, r30
     df0:	97 95       	ror	r25
     df2:	87 95       	ror	r24
     df4:	08 95       	ret

00000df6 <__cmpsf2>:
     df6:	0e 94 e5 07 	call	0xfca	; 0xfca <__fp_cmp>
     dfa:	08 f4       	brcc	.+2      	; 0xdfe <__cmpsf2+0x8>
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	08 95       	ret

00000e00 <__divsf3>:
     e00:	0e 94 14 07 	call	0xe28	; 0xe28 <__divsf3x>
     e04:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_round>
     e08:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_pscB>
     e0c:	58 f0       	brcs	.+22     	; 0xe24 <__divsf3+0x24>
     e0e:	0e 94 12 08 	call	0x1024	; 0x1024 <__fp_pscA>
     e12:	40 f0       	brcs	.+16     	; 0xe24 <__divsf3+0x24>
     e14:	29 f4       	brne	.+10     	; 0xe20 <__divsf3+0x20>
     e16:	5f 3f       	cpi	r21, 0xFF	; 255
     e18:	29 f0       	breq	.+10     	; 0xe24 <__divsf3+0x24>
     e1a:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>
     e1e:	51 11       	cpse	r21, r1
     e20:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_szero>
     e24:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>

00000e28 <__divsf3x>:
     e28:	0e 94 31 08 	call	0x1062	; 0x1062 <__fp_split3>
     e2c:	68 f3       	brcs	.-38     	; 0xe08 <__divsf3+0x8>

00000e2e <__divsf3_pse>:
     e2e:	99 23       	and	r25, r25
     e30:	b1 f3       	breq	.-20     	; 0xe1e <__divsf3+0x1e>
     e32:	55 23       	and	r21, r21
     e34:	91 f3       	breq	.-28     	; 0xe1a <__divsf3+0x1a>
     e36:	95 1b       	sub	r25, r21
     e38:	55 0b       	sbc	r21, r21
     e3a:	bb 27       	eor	r27, r27
     e3c:	aa 27       	eor	r26, r26
     e3e:	62 17       	cp	r22, r18
     e40:	73 07       	cpc	r23, r19
     e42:	84 07       	cpc	r24, r20
     e44:	38 f0       	brcs	.+14     	; 0xe54 <__divsf3_pse+0x26>
     e46:	9f 5f       	subi	r25, 0xFF	; 255
     e48:	5f 4f       	sbci	r21, 0xFF	; 255
     e4a:	22 0f       	add	r18, r18
     e4c:	33 1f       	adc	r19, r19
     e4e:	44 1f       	adc	r20, r20
     e50:	aa 1f       	adc	r26, r26
     e52:	a9 f3       	breq	.-22     	; 0xe3e <__divsf3_pse+0x10>
     e54:	35 d0       	rcall	.+106    	; 0xec0 <__divsf3_pse+0x92>
     e56:	0e 2e       	mov	r0, r30
     e58:	3a f0       	brmi	.+14     	; 0xe68 <__divsf3_pse+0x3a>
     e5a:	e0 e8       	ldi	r30, 0x80	; 128
     e5c:	32 d0       	rcall	.+100    	; 0xec2 <__divsf3_pse+0x94>
     e5e:	91 50       	subi	r25, 0x01	; 1
     e60:	50 40       	sbci	r21, 0x00	; 0
     e62:	e6 95       	lsr	r30
     e64:	00 1c       	adc	r0, r0
     e66:	ca f7       	brpl	.-14     	; 0xe5a <__divsf3_pse+0x2c>
     e68:	2b d0       	rcall	.+86     	; 0xec0 <__divsf3_pse+0x92>
     e6a:	fe 2f       	mov	r31, r30
     e6c:	29 d0       	rcall	.+82     	; 0xec0 <__divsf3_pse+0x92>
     e6e:	66 0f       	add	r22, r22
     e70:	77 1f       	adc	r23, r23
     e72:	88 1f       	adc	r24, r24
     e74:	bb 1f       	adc	r27, r27
     e76:	26 17       	cp	r18, r22
     e78:	37 07       	cpc	r19, r23
     e7a:	48 07       	cpc	r20, r24
     e7c:	ab 07       	cpc	r26, r27
     e7e:	b0 e8       	ldi	r27, 0x80	; 128
     e80:	09 f0       	breq	.+2      	; 0xe84 <__divsf3_pse+0x56>
     e82:	bb 0b       	sbc	r27, r27
     e84:	80 2d       	mov	r24, r0
     e86:	bf 01       	movw	r22, r30
     e88:	ff 27       	eor	r31, r31
     e8a:	93 58       	subi	r25, 0x83	; 131
     e8c:	5f 4f       	sbci	r21, 0xFF	; 255
     e8e:	3a f0       	brmi	.+14     	; 0xe9e <__divsf3_pse+0x70>
     e90:	9e 3f       	cpi	r25, 0xFE	; 254
     e92:	51 05       	cpc	r21, r1
     e94:	78 f0       	brcs	.+30     	; 0xeb4 <__divsf3_pse+0x86>
     e96:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>
     e9a:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_szero>
     e9e:	5f 3f       	cpi	r21, 0xFF	; 255
     ea0:	e4 f3       	brlt	.-8      	; 0xe9a <__divsf3_pse+0x6c>
     ea2:	98 3e       	cpi	r25, 0xE8	; 232
     ea4:	d4 f3       	brlt	.-12     	; 0xe9a <__divsf3_pse+0x6c>
     ea6:	86 95       	lsr	r24
     ea8:	77 95       	ror	r23
     eaa:	67 95       	ror	r22
     eac:	b7 95       	ror	r27
     eae:	f7 95       	ror	r31
     eb0:	9f 5f       	subi	r25, 0xFF	; 255
     eb2:	c9 f7       	brne	.-14     	; 0xea6 <__divsf3_pse+0x78>
     eb4:	88 0f       	add	r24, r24
     eb6:	91 1d       	adc	r25, r1
     eb8:	96 95       	lsr	r25
     eba:	87 95       	ror	r24
     ebc:	97 f9       	bld	r25, 7
     ebe:	08 95       	ret
     ec0:	e1 e0       	ldi	r30, 0x01	; 1
     ec2:	66 0f       	add	r22, r22
     ec4:	77 1f       	adc	r23, r23
     ec6:	88 1f       	adc	r24, r24
     ec8:	bb 1f       	adc	r27, r27
     eca:	62 17       	cp	r22, r18
     ecc:	73 07       	cpc	r23, r19
     ece:	84 07       	cpc	r24, r20
     ed0:	ba 07       	cpc	r27, r26
     ed2:	20 f0       	brcs	.+8      	; 0xedc <__divsf3_pse+0xae>
     ed4:	62 1b       	sub	r22, r18
     ed6:	73 0b       	sbc	r23, r19
     ed8:	84 0b       	sbc	r24, r20
     eda:	ba 0b       	sbc	r27, r26
     edc:	ee 1f       	adc	r30, r30
     ede:	88 f7       	brcc	.-30     	; 0xec2 <__divsf3_pse+0x94>
     ee0:	e0 95       	com	r30
     ee2:	08 95       	ret

00000ee4 <__fixsfsi>:
     ee4:	0e 94 79 07 	call	0xef2	; 0xef2 <__fixunssfsi>
     ee8:	68 94       	set
     eea:	b1 11       	cpse	r27, r1
     eec:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_szero>
     ef0:	08 95       	ret

00000ef2 <__fixunssfsi>:
     ef2:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_splitA>
     ef6:	88 f0       	brcs	.+34     	; 0xf1a <__fixunssfsi+0x28>
     ef8:	9f 57       	subi	r25, 0x7F	; 127
     efa:	98 f0       	brcs	.+38     	; 0xf22 <__fixunssfsi+0x30>
     efc:	b9 2f       	mov	r27, r25
     efe:	99 27       	eor	r25, r25
     f00:	b7 51       	subi	r27, 0x17	; 23
     f02:	b0 f0       	brcs	.+44     	; 0xf30 <__fixunssfsi+0x3e>
     f04:	e1 f0       	breq	.+56     	; 0xf3e <__fixunssfsi+0x4c>
     f06:	66 0f       	add	r22, r22
     f08:	77 1f       	adc	r23, r23
     f0a:	88 1f       	adc	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	1a f0       	brmi	.+6      	; 0xf16 <__fixunssfsi+0x24>
     f10:	ba 95       	dec	r27
     f12:	c9 f7       	brne	.-14     	; 0xf06 <__fixunssfsi+0x14>
     f14:	14 c0       	rjmp	.+40     	; 0xf3e <__fixunssfsi+0x4c>
     f16:	b1 30       	cpi	r27, 0x01	; 1
     f18:	91 f0       	breq	.+36     	; 0xf3e <__fixunssfsi+0x4c>
     f1a:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__fp_zero>
     f1e:	b1 e0       	ldi	r27, 0x01	; 1
     f20:	08 95       	ret
     f22:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__fp_zero>
     f26:	67 2f       	mov	r22, r23
     f28:	78 2f       	mov	r23, r24
     f2a:	88 27       	eor	r24, r24
     f2c:	b8 5f       	subi	r27, 0xF8	; 248
     f2e:	39 f0       	breq	.+14     	; 0xf3e <__fixunssfsi+0x4c>
     f30:	b9 3f       	cpi	r27, 0xF9	; 249
     f32:	cc f3       	brlt	.-14     	; 0xf26 <__fixunssfsi+0x34>
     f34:	86 95       	lsr	r24
     f36:	77 95       	ror	r23
     f38:	67 95       	ror	r22
     f3a:	b3 95       	inc	r27
     f3c:	d9 f7       	brne	.-10     	; 0xf34 <__fixunssfsi+0x42>
     f3e:	3e f4       	brtc	.+14     	; 0xf4e <__fixunssfsi+0x5c>
     f40:	90 95       	com	r25
     f42:	80 95       	com	r24
     f44:	70 95       	com	r23
     f46:	61 95       	neg	r22
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	8f 4f       	sbci	r24, 0xFF	; 255
     f4c:	9f 4f       	sbci	r25, 0xFF	; 255
     f4e:	08 95       	ret

00000f50 <__floatunsisf>:
     f50:	e8 94       	clt
     f52:	09 c0       	rjmp	.+18     	; 0xf66 <__floatsisf+0x12>

00000f54 <__floatsisf>:
     f54:	97 fb       	bst	r25, 7
     f56:	3e f4       	brtc	.+14     	; 0xf66 <__floatsisf+0x12>
     f58:	90 95       	com	r25
     f5a:	80 95       	com	r24
     f5c:	70 95       	com	r23
     f5e:	61 95       	neg	r22
     f60:	7f 4f       	sbci	r23, 0xFF	; 255
     f62:	8f 4f       	sbci	r24, 0xFF	; 255
     f64:	9f 4f       	sbci	r25, 0xFF	; 255
     f66:	99 23       	and	r25, r25
     f68:	a9 f0       	breq	.+42     	; 0xf94 <__floatsisf+0x40>
     f6a:	f9 2f       	mov	r31, r25
     f6c:	96 e9       	ldi	r25, 0x96	; 150
     f6e:	bb 27       	eor	r27, r27
     f70:	93 95       	inc	r25
     f72:	f6 95       	lsr	r31
     f74:	87 95       	ror	r24
     f76:	77 95       	ror	r23
     f78:	67 95       	ror	r22
     f7a:	b7 95       	ror	r27
     f7c:	f1 11       	cpse	r31, r1
     f7e:	f8 cf       	rjmp	.-16     	; 0xf70 <__floatsisf+0x1c>
     f80:	fa f4       	brpl	.+62     	; 0xfc0 <__floatsisf+0x6c>
     f82:	bb 0f       	add	r27, r27
     f84:	11 f4       	brne	.+4      	; 0xf8a <__floatsisf+0x36>
     f86:	60 ff       	sbrs	r22, 0
     f88:	1b c0       	rjmp	.+54     	; 0xfc0 <__floatsisf+0x6c>
     f8a:	6f 5f       	subi	r22, 0xFF	; 255
     f8c:	7f 4f       	sbci	r23, 0xFF	; 255
     f8e:	8f 4f       	sbci	r24, 0xFF	; 255
     f90:	9f 4f       	sbci	r25, 0xFF	; 255
     f92:	16 c0       	rjmp	.+44     	; 0xfc0 <__floatsisf+0x6c>
     f94:	88 23       	and	r24, r24
     f96:	11 f0       	breq	.+4      	; 0xf9c <__floatsisf+0x48>
     f98:	96 e9       	ldi	r25, 0x96	; 150
     f9a:	11 c0       	rjmp	.+34     	; 0xfbe <__floatsisf+0x6a>
     f9c:	77 23       	and	r23, r23
     f9e:	21 f0       	breq	.+8      	; 0xfa8 <__floatsisf+0x54>
     fa0:	9e e8       	ldi	r25, 0x8E	; 142
     fa2:	87 2f       	mov	r24, r23
     fa4:	76 2f       	mov	r23, r22
     fa6:	05 c0       	rjmp	.+10     	; 0xfb2 <__floatsisf+0x5e>
     fa8:	66 23       	and	r22, r22
     faa:	71 f0       	breq	.+28     	; 0xfc8 <__floatsisf+0x74>
     fac:	96 e8       	ldi	r25, 0x86	; 134
     fae:	86 2f       	mov	r24, r22
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	2a f0       	brmi	.+10     	; 0xfc0 <__floatsisf+0x6c>
     fb6:	9a 95       	dec	r25
     fb8:	66 0f       	add	r22, r22
     fba:	77 1f       	adc	r23, r23
     fbc:	88 1f       	adc	r24, r24
     fbe:	da f7       	brpl	.-10     	; 0xfb6 <__floatsisf+0x62>
     fc0:	88 0f       	add	r24, r24
     fc2:	96 95       	lsr	r25
     fc4:	87 95       	ror	r24
     fc6:	97 f9       	bld	r25, 7
     fc8:	08 95       	ret

00000fca <__fp_cmp>:
     fca:	99 0f       	add	r25, r25
     fcc:	00 08       	sbc	r0, r0
     fce:	55 0f       	add	r21, r21
     fd0:	aa 0b       	sbc	r26, r26
     fd2:	e0 e8       	ldi	r30, 0x80	; 128
     fd4:	fe ef       	ldi	r31, 0xFE	; 254
     fd6:	16 16       	cp	r1, r22
     fd8:	17 06       	cpc	r1, r23
     fda:	e8 07       	cpc	r30, r24
     fdc:	f9 07       	cpc	r31, r25
     fde:	c0 f0       	brcs	.+48     	; 0x1010 <__fp_cmp+0x46>
     fe0:	12 16       	cp	r1, r18
     fe2:	13 06       	cpc	r1, r19
     fe4:	e4 07       	cpc	r30, r20
     fe6:	f5 07       	cpc	r31, r21
     fe8:	98 f0       	brcs	.+38     	; 0x1010 <__fp_cmp+0x46>
     fea:	62 1b       	sub	r22, r18
     fec:	73 0b       	sbc	r23, r19
     fee:	84 0b       	sbc	r24, r20
     ff0:	95 0b       	sbc	r25, r21
     ff2:	39 f4       	brne	.+14     	; 0x1002 <__fp_cmp+0x38>
     ff4:	0a 26       	eor	r0, r26
     ff6:	61 f0       	breq	.+24     	; 0x1010 <__fp_cmp+0x46>
     ff8:	23 2b       	or	r18, r19
     ffa:	24 2b       	or	r18, r20
     ffc:	25 2b       	or	r18, r21
     ffe:	21 f4       	brne	.+8      	; 0x1008 <__fp_cmp+0x3e>
    1000:	08 95       	ret
    1002:	0a 26       	eor	r0, r26
    1004:	09 f4       	brne	.+2      	; 0x1008 <__fp_cmp+0x3e>
    1006:	a1 40       	sbci	r26, 0x01	; 1
    1008:	a6 95       	lsr	r26
    100a:	8f ef       	ldi	r24, 0xFF	; 255
    100c:	81 1d       	adc	r24, r1
    100e:	81 1d       	adc	r24, r1
    1010:	08 95       	ret

00001012 <__fp_inf>:
    1012:	97 f9       	bld	r25, 7
    1014:	9f 67       	ori	r25, 0x7F	; 127
    1016:	80 e8       	ldi	r24, 0x80	; 128
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	08 95       	ret

0000101e <__fp_nan>:
    101e:	9f ef       	ldi	r25, 0xFF	; 255
    1020:	80 ec       	ldi	r24, 0xC0	; 192
    1022:	08 95       	ret

00001024 <__fp_pscA>:
    1024:	00 24       	eor	r0, r0
    1026:	0a 94       	dec	r0
    1028:	16 16       	cp	r1, r22
    102a:	17 06       	cpc	r1, r23
    102c:	18 06       	cpc	r1, r24
    102e:	09 06       	cpc	r0, r25
    1030:	08 95       	ret

00001032 <__fp_pscB>:
    1032:	00 24       	eor	r0, r0
    1034:	0a 94       	dec	r0
    1036:	12 16       	cp	r1, r18
    1038:	13 06       	cpc	r1, r19
    103a:	14 06       	cpc	r1, r20
    103c:	05 06       	cpc	r0, r21
    103e:	08 95       	ret

00001040 <__fp_round>:
    1040:	09 2e       	mov	r0, r25
    1042:	03 94       	inc	r0
    1044:	00 0c       	add	r0, r0
    1046:	11 f4       	brne	.+4      	; 0x104c <__fp_round+0xc>
    1048:	88 23       	and	r24, r24
    104a:	52 f0       	brmi	.+20     	; 0x1060 <__fp_round+0x20>
    104c:	bb 0f       	add	r27, r27
    104e:	40 f4       	brcc	.+16     	; 0x1060 <__fp_round+0x20>
    1050:	bf 2b       	or	r27, r31
    1052:	11 f4       	brne	.+4      	; 0x1058 <__fp_round+0x18>
    1054:	60 ff       	sbrs	r22, 0
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <__fp_round+0x20>
    1058:	6f 5f       	subi	r22, 0xFF	; 255
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	8f 4f       	sbci	r24, 0xFF	; 255
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	08 95       	ret

00001062 <__fp_split3>:
    1062:	57 fd       	sbrc	r21, 7
    1064:	90 58       	subi	r25, 0x80	; 128
    1066:	44 0f       	add	r20, r20
    1068:	55 1f       	adc	r21, r21
    106a:	59 f0       	breq	.+22     	; 0x1082 <__fp_splitA+0x10>
    106c:	5f 3f       	cpi	r21, 0xFF	; 255
    106e:	71 f0       	breq	.+28     	; 0x108c <__fp_splitA+0x1a>
    1070:	47 95       	ror	r20

00001072 <__fp_splitA>:
    1072:	88 0f       	add	r24, r24
    1074:	97 fb       	bst	r25, 7
    1076:	99 1f       	adc	r25, r25
    1078:	61 f0       	breq	.+24     	; 0x1092 <__fp_splitA+0x20>
    107a:	9f 3f       	cpi	r25, 0xFF	; 255
    107c:	79 f0       	breq	.+30     	; 0x109c <__fp_splitA+0x2a>
    107e:	87 95       	ror	r24
    1080:	08 95       	ret
    1082:	12 16       	cp	r1, r18
    1084:	13 06       	cpc	r1, r19
    1086:	14 06       	cpc	r1, r20
    1088:	55 1f       	adc	r21, r21
    108a:	f2 cf       	rjmp	.-28     	; 0x1070 <__fp_split3+0xe>
    108c:	46 95       	lsr	r20
    108e:	f1 df       	rcall	.-30     	; 0x1072 <__fp_splitA>
    1090:	08 c0       	rjmp	.+16     	; 0x10a2 <__fp_splitA+0x30>
    1092:	16 16       	cp	r1, r22
    1094:	17 06       	cpc	r1, r23
    1096:	18 06       	cpc	r1, r24
    1098:	99 1f       	adc	r25, r25
    109a:	f1 cf       	rjmp	.-30     	; 0x107e <__fp_splitA+0xc>
    109c:	86 95       	lsr	r24
    109e:	71 05       	cpc	r23, r1
    10a0:	61 05       	cpc	r22, r1
    10a2:	08 94       	sec
    10a4:	08 95       	ret

000010a6 <__fp_zero>:
    10a6:	e8 94       	clt

000010a8 <__fp_szero>:
    10a8:	bb 27       	eor	r27, r27
    10aa:	66 27       	eor	r22, r22
    10ac:	77 27       	eor	r23, r23
    10ae:	cb 01       	movw	r24, r22
    10b0:	97 f9       	bld	r25, 7
    10b2:	08 95       	ret

000010b4 <__gesf2>:
    10b4:	0e 94 e5 07 	call	0xfca	; 0xfca <__fp_cmp>
    10b8:	08 f4       	brcc	.+2      	; 0x10bc <__gesf2+0x8>
    10ba:	8f ef       	ldi	r24, 0xFF	; 255
    10bc:	08 95       	ret

000010be <__mulsf3>:
    10be:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__mulsf3x>
    10c2:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_round>
    10c6:	0e 94 12 08 	call	0x1024	; 0x1024 <__fp_pscA>
    10ca:	38 f0       	brcs	.+14     	; 0x10da <__mulsf3+0x1c>
    10cc:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_pscB>
    10d0:	20 f0       	brcs	.+8      	; 0x10da <__mulsf3+0x1c>
    10d2:	95 23       	and	r25, r21
    10d4:	11 f0       	breq	.+4      	; 0x10da <__mulsf3+0x1c>
    10d6:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>
    10da:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>
    10de:	11 24       	eor	r1, r1
    10e0:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_szero>

000010e4 <__mulsf3x>:
    10e4:	0e 94 31 08 	call	0x1062	; 0x1062 <__fp_split3>
    10e8:	70 f3       	brcs	.-36     	; 0x10c6 <__mulsf3+0x8>

000010ea <__mulsf3_pse>:
    10ea:	95 9f       	mul	r25, r21
    10ec:	c1 f3       	breq	.-16     	; 0x10de <__mulsf3+0x20>
    10ee:	95 0f       	add	r25, r21
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	55 1f       	adc	r21, r21
    10f4:	62 9f       	mul	r22, r18
    10f6:	f0 01       	movw	r30, r0
    10f8:	72 9f       	mul	r23, r18
    10fa:	bb 27       	eor	r27, r27
    10fc:	f0 0d       	add	r31, r0
    10fe:	b1 1d       	adc	r27, r1
    1100:	63 9f       	mul	r22, r19
    1102:	aa 27       	eor	r26, r26
    1104:	f0 0d       	add	r31, r0
    1106:	b1 1d       	adc	r27, r1
    1108:	aa 1f       	adc	r26, r26
    110a:	64 9f       	mul	r22, r20
    110c:	66 27       	eor	r22, r22
    110e:	b0 0d       	add	r27, r0
    1110:	a1 1d       	adc	r26, r1
    1112:	66 1f       	adc	r22, r22
    1114:	82 9f       	mul	r24, r18
    1116:	22 27       	eor	r18, r18
    1118:	b0 0d       	add	r27, r0
    111a:	a1 1d       	adc	r26, r1
    111c:	62 1f       	adc	r22, r18
    111e:	73 9f       	mul	r23, r19
    1120:	b0 0d       	add	r27, r0
    1122:	a1 1d       	adc	r26, r1
    1124:	62 1f       	adc	r22, r18
    1126:	83 9f       	mul	r24, r19
    1128:	a0 0d       	add	r26, r0
    112a:	61 1d       	adc	r22, r1
    112c:	22 1f       	adc	r18, r18
    112e:	74 9f       	mul	r23, r20
    1130:	33 27       	eor	r19, r19
    1132:	a0 0d       	add	r26, r0
    1134:	61 1d       	adc	r22, r1
    1136:	23 1f       	adc	r18, r19
    1138:	84 9f       	mul	r24, r20
    113a:	60 0d       	add	r22, r0
    113c:	21 1d       	adc	r18, r1
    113e:	82 2f       	mov	r24, r18
    1140:	76 2f       	mov	r23, r22
    1142:	6a 2f       	mov	r22, r26
    1144:	11 24       	eor	r1, r1
    1146:	9f 57       	subi	r25, 0x7F	; 127
    1148:	50 40       	sbci	r21, 0x00	; 0
    114a:	9a f0       	brmi	.+38     	; 0x1172 <__mulsf3_pse+0x88>
    114c:	f1 f0       	breq	.+60     	; 0x118a <__mulsf3_pse+0xa0>
    114e:	88 23       	and	r24, r24
    1150:	4a f0       	brmi	.+18     	; 0x1164 <__mulsf3_pse+0x7a>
    1152:	ee 0f       	add	r30, r30
    1154:	ff 1f       	adc	r31, r31
    1156:	bb 1f       	adc	r27, r27
    1158:	66 1f       	adc	r22, r22
    115a:	77 1f       	adc	r23, r23
    115c:	88 1f       	adc	r24, r24
    115e:	91 50       	subi	r25, 0x01	; 1
    1160:	50 40       	sbci	r21, 0x00	; 0
    1162:	a9 f7       	brne	.-22     	; 0x114e <__mulsf3_pse+0x64>
    1164:	9e 3f       	cpi	r25, 0xFE	; 254
    1166:	51 05       	cpc	r21, r1
    1168:	80 f0       	brcs	.+32     	; 0x118a <__mulsf3_pse+0xa0>
    116a:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>
    116e:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_szero>
    1172:	5f 3f       	cpi	r21, 0xFF	; 255
    1174:	e4 f3       	brlt	.-8      	; 0x116e <__mulsf3_pse+0x84>
    1176:	98 3e       	cpi	r25, 0xE8	; 232
    1178:	d4 f3       	brlt	.-12     	; 0x116e <__mulsf3_pse+0x84>
    117a:	86 95       	lsr	r24
    117c:	77 95       	ror	r23
    117e:	67 95       	ror	r22
    1180:	b7 95       	ror	r27
    1182:	f7 95       	ror	r31
    1184:	e7 95       	ror	r30
    1186:	9f 5f       	subi	r25, 0xFF	; 255
    1188:	c1 f7       	brne	.-16     	; 0x117a <__mulsf3_pse+0x90>
    118a:	fe 2b       	or	r31, r30
    118c:	88 0f       	add	r24, r24
    118e:	91 1d       	adc	r25, r1
    1190:	96 95       	lsr	r25
    1192:	87 95       	ror	r24
    1194:	97 f9       	bld	r25, 7
    1196:	08 95       	ret

00001198 <pow>:
    1198:	fa 01       	movw	r30, r20
    119a:	ee 0f       	add	r30, r30
    119c:	ff 1f       	adc	r31, r31
    119e:	30 96       	adiw	r30, 0x00	; 0
    11a0:	21 05       	cpc	r18, r1
    11a2:	31 05       	cpc	r19, r1
    11a4:	a1 f1       	breq	.+104    	; 0x120e <pow+0x76>
    11a6:	61 15       	cp	r22, r1
    11a8:	71 05       	cpc	r23, r1
    11aa:	61 f4       	brne	.+24     	; 0x11c4 <pow+0x2c>
    11ac:	80 38       	cpi	r24, 0x80	; 128
    11ae:	bf e3       	ldi	r27, 0x3F	; 63
    11b0:	9b 07       	cpc	r25, r27
    11b2:	49 f1       	breq	.+82     	; 0x1206 <pow+0x6e>
    11b4:	68 94       	set
    11b6:	90 38       	cpi	r25, 0x80	; 128
    11b8:	81 05       	cpc	r24, r1
    11ba:	61 f0       	breq	.+24     	; 0x11d4 <pow+0x3c>
    11bc:	80 38       	cpi	r24, 0x80	; 128
    11be:	bf ef       	ldi	r27, 0xFF	; 255
    11c0:	9b 07       	cpc	r25, r27
    11c2:	41 f0       	breq	.+16     	; 0x11d4 <pow+0x3c>
    11c4:	99 23       	and	r25, r25
    11c6:	4a f5       	brpl	.+82     	; 0x121a <pow+0x82>
    11c8:	ff 3f       	cpi	r31, 0xFF	; 255
    11ca:	e1 05       	cpc	r30, r1
    11cc:	31 05       	cpc	r19, r1
    11ce:	21 05       	cpc	r18, r1
    11d0:	19 f1       	breq	.+70     	; 0x1218 <pow+0x80>
    11d2:	e8 94       	clt
    11d4:	08 94       	sec
    11d6:	e7 95       	ror	r30
    11d8:	d9 01       	movw	r26, r18
    11da:	aa 23       	and	r26, r26
    11dc:	29 f4       	brne	.+10     	; 0x11e8 <pow+0x50>
    11de:	ab 2f       	mov	r26, r27
    11e0:	be 2f       	mov	r27, r30
    11e2:	f8 5f       	subi	r31, 0xF8	; 248
    11e4:	d0 f3       	brcs	.-12     	; 0x11da <pow+0x42>
    11e6:	10 c0       	rjmp	.+32     	; 0x1208 <pow+0x70>
    11e8:	ff 5f       	subi	r31, 0xFF	; 255
    11ea:	70 f4       	brcc	.+28     	; 0x1208 <pow+0x70>
    11ec:	a6 95       	lsr	r26
    11ee:	e0 f7       	brcc	.-8      	; 0x11e8 <pow+0x50>
    11f0:	f7 39       	cpi	r31, 0x97	; 151
    11f2:	50 f0       	brcs	.+20     	; 0x1208 <pow+0x70>
    11f4:	19 f0       	breq	.+6      	; 0x11fc <pow+0x64>
    11f6:	ff 3a       	cpi	r31, 0xAF	; 175
    11f8:	38 f4       	brcc	.+14     	; 0x1208 <pow+0x70>
    11fa:	9f 77       	andi	r25, 0x7F	; 127
    11fc:	9f 93       	push	r25
    11fe:	0d d0       	rcall	.+26     	; 0x121a <pow+0x82>
    1200:	0f 90       	pop	r0
    1202:	07 fc       	sbrc	r0, 7
    1204:	90 58       	subi	r25, 0x80	; 128
    1206:	08 95       	ret
    1208:	46 f0       	brts	.+16     	; 0x121a <pow+0x82>
    120a:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	80 e8       	ldi	r24, 0x80	; 128
    1214:	9f e3       	ldi	r25, 0x3F	; 63
    1216:	08 95       	ret
    1218:	4f e7       	ldi	r20, 0x7F	; 127
    121a:	9f 77       	andi	r25, 0x7F	; 127
    121c:	5f 93       	push	r21
    121e:	4f 93       	push	r20
    1220:	3f 93       	push	r19
    1222:	2f 93       	push	r18
    1224:	0e 94 c7 09 	call	0x138e	; 0x138e <log>
    1228:	2f 91       	pop	r18
    122a:	3f 91       	pop	r19
    122c:	4f 91       	pop	r20
    122e:	5f 91       	pop	r21
    1230:	0e 94 5f 08 	call	0x10be	; 0x10be <__mulsf3>
    1234:	0c 94 24 09 	jmp	0x1248	; 0x1248 <exp>
    1238:	29 f4       	brne	.+10     	; 0x1244 <pow+0xac>
    123a:	16 f0       	brts	.+4      	; 0x1240 <pow+0xa8>
    123c:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>
    1240:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__fp_zero>
    1244:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>

00001248 <exp>:
    1248:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_splitA>
    124c:	a8 f3       	brcs	.-22     	; 0x1238 <pow+0xa0>
    124e:	96 38       	cpi	r25, 0x86	; 134
    1250:	a0 f7       	brcc	.-24     	; 0x123a <pow+0xa2>
    1252:	07 f8       	bld	r0, 7
    1254:	0f 92       	push	r0
    1256:	e8 94       	clt
    1258:	2b e3       	ldi	r18, 0x3B	; 59
    125a:	3a ea       	ldi	r19, 0xAA	; 170
    125c:	48 eb       	ldi	r20, 0xB8	; 184
    125e:	5f e7       	ldi	r21, 0x7F	; 127
    1260:	0e 94 75 08 	call	0x10ea	; 0x10ea <__mulsf3_pse>
    1264:	0f 92       	push	r0
    1266:	0f 92       	push	r0
    1268:	0f 92       	push	r0
    126a:	4d b7       	in	r20, 0x3d	; 61
    126c:	5e b7       	in	r21, 0x3e	; 62
    126e:	0f 92       	push	r0
    1270:	0e 94 0f 0a 	call	0x141e	; 0x141e <modf>
    1274:	e8 ee       	ldi	r30, 0xE8	; 232
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	0e 94 56 09 	call	0x12ac	; 0x12ac <__fp_powser>
    127c:	4f 91       	pop	r20
    127e:	5f 91       	pop	r21
    1280:	ef 91       	pop	r30
    1282:	ff 91       	pop	r31
    1284:	e5 95       	asr	r30
    1286:	ee 1f       	adc	r30, r30
    1288:	ff 1f       	adc	r31, r31
    128a:	49 f0       	breq	.+18     	; 0x129e <exp+0x56>
    128c:	fe 57       	subi	r31, 0x7E	; 126
    128e:	e0 68       	ori	r30, 0x80	; 128
    1290:	44 27       	eor	r20, r20
    1292:	ee 0f       	add	r30, r30
    1294:	44 1f       	adc	r20, r20
    1296:	fa 95       	dec	r31
    1298:	e1 f7       	brne	.-8      	; 0x1292 <exp+0x4a>
    129a:	41 95       	neg	r20
    129c:	55 0b       	sbc	r21, r21
    129e:	0e 94 89 09 	call	0x1312	; 0x1312 <ldexp>
    12a2:	0f 90       	pop	r0
    12a4:	07 fe       	sbrs	r0, 7
    12a6:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <inverse>
    12aa:	08 95       	ret

000012ac <__fp_powser>:
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	1f 93       	push	r17
    12b2:	0f 93       	push	r16
    12b4:	ff 92       	push	r15
    12b6:	ef 92       	push	r14
    12b8:	df 92       	push	r13
    12ba:	7b 01       	movw	r14, r22
    12bc:	8c 01       	movw	r16, r24
    12be:	68 94       	set
    12c0:	06 c0       	rjmp	.+12     	; 0x12ce <__fp_powser+0x22>
    12c2:	da 2e       	mov	r13, r26
    12c4:	ef 01       	movw	r28, r30
    12c6:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__mulsf3x>
    12ca:	fe 01       	movw	r30, r28
    12cc:	e8 94       	clt
    12ce:	a5 91       	lpm	r26, Z+
    12d0:	25 91       	lpm	r18, Z+
    12d2:	35 91       	lpm	r19, Z+
    12d4:	45 91       	lpm	r20, Z+
    12d6:	55 91       	lpm	r21, Z+
    12d8:	a6 f3       	brts	.-24     	; 0x12c2 <__fp_powser+0x16>
    12da:	ef 01       	movw	r28, r30
    12dc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__addsf3x>
    12e0:	fe 01       	movw	r30, r28
    12e2:	97 01       	movw	r18, r14
    12e4:	a8 01       	movw	r20, r16
    12e6:	da 94       	dec	r13
    12e8:	69 f7       	brne	.-38     	; 0x12c4 <__fp_powser+0x18>
    12ea:	df 90       	pop	r13
    12ec:	ef 90       	pop	r14
    12ee:	ff 90       	pop	r15
    12f0:	0f 91       	pop	r16
    12f2:	1f 91       	pop	r17
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <inverse>:
    12fa:	9b 01       	movw	r18, r22
    12fc:	ac 01       	movw	r20, r24
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	80 e8       	ldi	r24, 0x80	; 128
    1304:	9f e3       	ldi	r25, 0x3F	; 63
    1306:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__divsf3>
    130a:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>
    130e:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <__fp_mpack>

00001312 <ldexp>:
    1312:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_splitA>
    1316:	d8 f3       	brcs	.-10     	; 0x130e <inverse+0x14>
    1318:	99 23       	and	r25, r25
    131a:	c9 f3       	breq	.-14     	; 0x130e <inverse+0x14>
    131c:	94 0f       	add	r25, r20
    131e:	51 1d       	adc	r21, r1
    1320:	a3 f3       	brvs	.-24     	; 0x130a <inverse+0x10>
    1322:	91 50       	subi	r25, 0x01	; 1
    1324:	50 40       	sbci	r21, 0x00	; 0
    1326:	94 f0       	brlt	.+36     	; 0x134c <ldexp+0x3a>
    1328:	59 f0       	breq	.+22     	; 0x1340 <ldexp+0x2e>
    132a:	88 23       	and	r24, r24
    132c:	32 f0       	brmi	.+12     	; 0x133a <ldexp+0x28>
    132e:	66 0f       	add	r22, r22
    1330:	77 1f       	adc	r23, r23
    1332:	88 1f       	adc	r24, r24
    1334:	91 50       	subi	r25, 0x01	; 1
    1336:	50 40       	sbci	r21, 0x00	; 0
    1338:	c1 f7       	brne	.-16     	; 0x132a <ldexp+0x18>
    133a:	9e 3f       	cpi	r25, 0xFE	; 254
    133c:	51 05       	cpc	r21, r1
    133e:	2c f7       	brge	.-54     	; 0x130a <inverse+0x10>
    1340:	88 0f       	add	r24, r24
    1342:	91 1d       	adc	r25, r1
    1344:	96 95       	lsr	r25
    1346:	87 95       	ror	r24
    1348:	97 f9       	bld	r25, 7
    134a:	08 95       	ret
    134c:	5f 3f       	cpi	r21, 0xFF	; 255
    134e:	ac f0       	brlt	.+42     	; 0x137a <ldexp+0x68>
    1350:	98 3e       	cpi	r25, 0xE8	; 232
    1352:	9c f0       	brlt	.+38     	; 0x137a <ldexp+0x68>
    1354:	bb 27       	eor	r27, r27
    1356:	86 95       	lsr	r24
    1358:	77 95       	ror	r23
    135a:	67 95       	ror	r22
    135c:	b7 95       	ror	r27
    135e:	08 f4       	brcc	.+2      	; 0x1362 <ldexp+0x50>
    1360:	b1 60       	ori	r27, 0x01	; 1
    1362:	93 95       	inc	r25
    1364:	c1 f7       	brne	.-16     	; 0x1356 <ldexp+0x44>
    1366:	bb 0f       	add	r27, r27
    1368:	58 f7       	brcc	.-42     	; 0x1340 <ldexp+0x2e>
    136a:	11 f4       	brne	.+4      	; 0x1370 <ldexp+0x5e>
    136c:	60 ff       	sbrs	r22, 0
    136e:	e8 cf       	rjmp	.-48     	; 0x1340 <ldexp+0x2e>
    1370:	6f 5f       	subi	r22, 0xFF	; 255
    1372:	7f 4f       	sbci	r23, 0xFF	; 255
    1374:	8f 4f       	sbci	r24, 0xFF	; 255
    1376:	9f 4f       	sbci	r25, 0xFF	; 255
    1378:	e3 cf       	rjmp	.-58     	; 0x1340 <ldexp+0x2e>
    137a:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_szero>
    137e:	16 f0       	brts	.+4      	; 0x1384 <ldexp+0x72>
    1380:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <__fp_mpack>
    1384:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>
    1388:	68 94       	set
    138a:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>

0000138e <log>:
    138e:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_splitA>
    1392:	a8 f3       	brcs	.-22     	; 0x137e <ldexp+0x6c>
    1394:	99 23       	and	r25, r25
    1396:	c1 f3       	breq	.-16     	; 0x1388 <ldexp+0x76>
    1398:	ae f3       	brts	.-22     	; 0x1384 <ldexp+0x72>
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	1f 93       	push	r17
    13a0:	0f 93       	push	r16
    13a2:	ff 92       	push	r15
    13a4:	c9 2f       	mov	r28, r25
    13a6:	dd 27       	eor	r29, r29
    13a8:	88 23       	and	r24, r24
    13aa:	2a f0       	brmi	.+10     	; 0x13b6 <log+0x28>
    13ac:	21 97       	sbiw	r28, 0x01	; 1
    13ae:	66 0f       	add	r22, r22
    13b0:	77 1f       	adc	r23, r23
    13b2:	88 1f       	adc	r24, r24
    13b4:	da f7       	brpl	.-10     	; 0x13ac <log+0x1e>
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e8       	ldi	r20, 0x80	; 128
    13bc:	5f eb       	ldi	r21, 0xBF	; 191
    13be:	9f e3       	ldi	r25, 0x3F	; 63
    13c0:	88 39       	cpi	r24, 0x98	; 152
    13c2:	20 f0       	brcs	.+8      	; 0x13cc <log+0x3e>
    13c4:	80 3e       	cpi	r24, 0xE0	; 224
    13c6:	38 f0       	brcs	.+14     	; 0x13d6 <log+0x48>
    13c8:	21 96       	adiw	r28, 0x01	; 1
    13ca:	8f 77       	andi	r24, 0x7F	; 127
    13cc:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__addsf3>
    13d0:	e0 e1       	ldi	r30, 0x10	; 16
    13d2:	f1 e0       	ldi	r31, 0x01	; 1
    13d4:	04 c0       	rjmp	.+8      	; 0x13de <log+0x50>
    13d6:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__addsf3>
    13da:	ed e3       	ldi	r30, 0x3D	; 61
    13dc:	f1 e0       	ldi	r31, 0x01	; 1
    13de:	0e 94 56 09 	call	0x12ac	; 0x12ac <__fp_powser>
    13e2:	8b 01       	movw	r16, r22
    13e4:	be 01       	movw	r22, r28
    13e6:	ec 01       	movw	r28, r24
    13e8:	fb 2e       	mov	r15, r27
    13ea:	6f 57       	subi	r22, 0x7F	; 127
    13ec:	71 09       	sbc	r23, r1
    13ee:	75 95       	asr	r23
    13f0:	77 1f       	adc	r23, r23
    13f2:	88 0b       	sbc	r24, r24
    13f4:	99 0b       	sbc	r25, r25
    13f6:	0e 94 aa 07 	call	0xf54	; 0xf54 <__floatsisf>
    13fa:	28 e1       	ldi	r18, 0x18	; 24
    13fc:	32 e7       	ldi	r19, 0x72	; 114
    13fe:	41 e3       	ldi	r20, 0x31	; 49
    1400:	5f e3       	ldi	r21, 0x3F	; 63
    1402:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__mulsf3x>
    1406:	af 2d       	mov	r26, r15
    1408:	98 01       	movw	r18, r16
    140a:	ae 01       	movw	r20, r28
    140c:	ff 90       	pop	r15
    140e:	0f 91       	pop	r16
    1410:	1f 91       	pop	r17
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__addsf3x>
    141a:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_round>

0000141e <modf>:
    141e:	fa 01       	movw	r30, r20
    1420:	dc 01       	movw	r26, r24
    1422:	aa 0f       	add	r26, r26
    1424:	bb 1f       	adc	r27, r27
    1426:	9b 01       	movw	r18, r22
    1428:	ac 01       	movw	r20, r24
    142a:	bf 57       	subi	r27, 0x7F	; 127
    142c:	28 f4       	brcc	.+10     	; 0x1438 <modf+0x1a>
    142e:	22 27       	eor	r18, r18
    1430:	33 27       	eor	r19, r19
    1432:	44 27       	eor	r20, r20
    1434:	50 78       	andi	r21, 0x80	; 128
    1436:	20 c0       	rjmp	.+64     	; 0x1478 <modf+0x5a>
    1438:	b7 51       	subi	r27, 0x17	; 23
    143a:	90 f4       	brcc	.+36     	; 0x1460 <modf+0x42>
    143c:	ab 2f       	mov	r26, r27
    143e:	00 24       	eor	r0, r0
    1440:	46 95       	lsr	r20
    1442:	37 95       	ror	r19
    1444:	27 95       	ror	r18
    1446:	01 1c       	adc	r0, r1
    1448:	a3 95       	inc	r26
    144a:	d2 f3       	brmi	.-12     	; 0x1440 <modf+0x22>
    144c:	00 20       	and	r0, r0
    144e:	71 f0       	breq	.+28     	; 0x146c <modf+0x4e>
    1450:	22 0f       	add	r18, r18
    1452:	33 1f       	adc	r19, r19
    1454:	44 1f       	adc	r20, r20
    1456:	b3 95       	inc	r27
    1458:	da f3       	brmi	.-10     	; 0x1450 <modf+0x32>
    145a:	0e d0       	rcall	.+28     	; 0x1478 <modf+0x5a>
    145c:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__subsf3>
    1460:	61 30       	cpi	r22, 0x01	; 1
    1462:	71 05       	cpc	r23, r1
    1464:	a0 e8       	ldi	r26, 0x80	; 128
    1466:	8a 07       	cpc	r24, r26
    1468:	b9 46       	sbci	r27, 0x69	; 105
    146a:	30 f4       	brcc	.+12     	; 0x1478 <modf+0x5a>
    146c:	9b 01       	movw	r18, r22
    146e:	ac 01       	movw	r20, r24
    1470:	66 27       	eor	r22, r22
    1472:	77 27       	eor	r23, r23
    1474:	88 27       	eor	r24, r24
    1476:	90 78       	andi	r25, 0x80	; 128
    1478:	30 96       	adiw	r30, 0x00	; 0
    147a:	21 f0       	breq	.+8      	; 0x1484 <modf+0x66>
    147c:	20 83       	st	Z, r18
    147e:	31 83       	std	Z+1, r19	; 0x01
    1480:	42 83       	std	Z+2, r20	; 0x02
    1482:	53 83       	std	Z+3, r21	; 0x03
    1484:	08 95       	ret

00001486 <__fp_mpack>:
    1486:	9f 3f       	cpi	r25, 0xFF	; 255
    1488:	31 f0       	breq	.+12     	; 0x1496 <__fp_mpack_finite+0xc>

0000148a <__fp_mpack_finite>:
    148a:	91 50       	subi	r25, 0x01	; 1
    148c:	20 f4       	brcc	.+8      	; 0x1496 <__fp_mpack_finite+0xc>
    148e:	87 95       	ror	r24
    1490:	77 95       	ror	r23
    1492:	67 95       	ror	r22
    1494:	b7 95       	ror	r27
    1496:	88 0f       	add	r24, r24
    1498:	91 1d       	adc	r25, r1
    149a:	96 95       	lsr	r25
    149c:	87 95       	ror	r24
    149e:	97 f9       	bld	r25, 7
    14a0:	08 95       	ret

000014a2 <__divmodhi4>:
    14a2:	97 fb       	bst	r25, 7
    14a4:	07 2e       	mov	r0, r23
    14a6:	16 f4       	brtc	.+4      	; 0x14ac <__divmodhi4+0xa>
    14a8:	00 94       	com	r0
    14aa:	07 d0       	rcall	.+14     	; 0x14ba <__divmodhi4_neg1>
    14ac:	77 fd       	sbrc	r23, 7
    14ae:	09 d0       	rcall	.+18     	; 0x14c2 <__divmodhi4_neg2>
    14b0:	0e 94 93 0a 	call	0x1526	; 0x1526 <__udivmodhi4>
    14b4:	07 fc       	sbrc	r0, 7
    14b6:	05 d0       	rcall	.+10     	; 0x14c2 <__divmodhi4_neg2>
    14b8:	3e f4       	brtc	.+14     	; 0x14c8 <__divmodhi4_exit>

000014ba <__divmodhi4_neg1>:
    14ba:	90 95       	com	r25
    14bc:	81 95       	neg	r24
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	08 95       	ret

000014c2 <__divmodhi4_neg2>:
    14c2:	70 95       	com	r23
    14c4:	61 95       	neg	r22
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255

000014c8 <__divmodhi4_exit>:
    14c8:	08 95       	ret

000014ca <__divmodsi4>:
    14ca:	05 2e       	mov	r0, r21
    14cc:	97 fb       	bst	r25, 7
    14ce:	1e f4       	brtc	.+6      	; 0x14d6 <__divmodsi4+0xc>
    14d0:	00 94       	com	r0
    14d2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__negsi2>
    14d6:	57 fd       	sbrc	r21, 7
    14d8:	07 d0       	rcall	.+14     	; 0x14e8 <__divmodsi4_neg2>
    14da:	0e 94 a7 0a 	call	0x154e	; 0x154e <__udivmodsi4>
    14de:	07 fc       	sbrc	r0, 7
    14e0:	03 d0       	rcall	.+6      	; 0x14e8 <__divmodsi4_neg2>
    14e2:	4e f4       	brtc	.+18     	; 0x14f6 <__divmodsi4_exit>
    14e4:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__negsi2>

000014e8 <__divmodsi4_neg2>:
    14e8:	50 95       	com	r21
    14ea:	40 95       	com	r20
    14ec:	30 95       	com	r19
    14ee:	21 95       	neg	r18
    14f0:	3f 4f       	sbci	r19, 0xFF	; 255
    14f2:	4f 4f       	sbci	r20, 0xFF	; 255
    14f4:	5f 4f       	sbci	r21, 0xFF	; 255

000014f6 <__divmodsi4_exit>:
    14f6:	08 95       	ret

000014f8 <__negsi2>:
    14f8:	90 95       	com	r25
    14fa:	80 95       	com	r24
    14fc:	70 95       	com	r23
    14fe:	61 95       	neg	r22
    1500:	7f 4f       	sbci	r23, 0xFF	; 255
    1502:	8f 4f       	sbci	r24, 0xFF	; 255
    1504:	9f 4f       	sbci	r25, 0xFF	; 255
    1506:	08 95       	ret

00001508 <__umulhisi3>:
    1508:	a2 9f       	mul	r26, r18
    150a:	b0 01       	movw	r22, r0
    150c:	b3 9f       	mul	r27, r19
    150e:	c0 01       	movw	r24, r0
    1510:	a3 9f       	mul	r26, r19
    1512:	70 0d       	add	r23, r0
    1514:	81 1d       	adc	r24, r1
    1516:	11 24       	eor	r1, r1
    1518:	91 1d       	adc	r25, r1
    151a:	b2 9f       	mul	r27, r18
    151c:	70 0d       	add	r23, r0
    151e:	81 1d       	adc	r24, r1
    1520:	11 24       	eor	r1, r1
    1522:	91 1d       	adc	r25, r1
    1524:	08 95       	ret

00001526 <__udivmodhi4>:
    1526:	aa 1b       	sub	r26, r26
    1528:	bb 1b       	sub	r27, r27
    152a:	51 e1       	ldi	r21, 0x11	; 17
    152c:	07 c0       	rjmp	.+14     	; 0x153c <__udivmodhi4_ep>

0000152e <__udivmodhi4_loop>:
    152e:	aa 1f       	adc	r26, r26
    1530:	bb 1f       	adc	r27, r27
    1532:	a6 17       	cp	r26, r22
    1534:	b7 07       	cpc	r27, r23
    1536:	10 f0       	brcs	.+4      	; 0x153c <__udivmodhi4_ep>
    1538:	a6 1b       	sub	r26, r22
    153a:	b7 0b       	sbc	r27, r23

0000153c <__udivmodhi4_ep>:
    153c:	88 1f       	adc	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	5a 95       	dec	r21
    1542:	a9 f7       	brne	.-22     	; 0x152e <__udivmodhi4_loop>
    1544:	80 95       	com	r24
    1546:	90 95       	com	r25
    1548:	bc 01       	movw	r22, r24
    154a:	cd 01       	movw	r24, r26
    154c:	08 95       	ret

0000154e <__udivmodsi4>:
    154e:	a1 e2       	ldi	r26, 0x21	; 33
    1550:	1a 2e       	mov	r1, r26
    1552:	aa 1b       	sub	r26, r26
    1554:	bb 1b       	sub	r27, r27
    1556:	fd 01       	movw	r30, r26
    1558:	0d c0       	rjmp	.+26     	; 0x1574 <__udivmodsi4_ep>

0000155a <__udivmodsi4_loop>:
    155a:	aa 1f       	adc	r26, r26
    155c:	bb 1f       	adc	r27, r27
    155e:	ee 1f       	adc	r30, r30
    1560:	ff 1f       	adc	r31, r31
    1562:	a2 17       	cp	r26, r18
    1564:	b3 07       	cpc	r27, r19
    1566:	e4 07       	cpc	r30, r20
    1568:	f5 07       	cpc	r31, r21
    156a:	20 f0       	brcs	.+8      	; 0x1574 <__udivmodsi4_ep>
    156c:	a2 1b       	sub	r26, r18
    156e:	b3 0b       	sbc	r27, r19
    1570:	e4 0b       	sbc	r30, r20
    1572:	f5 0b       	sbc	r31, r21

00001574 <__udivmodsi4_ep>:
    1574:	66 1f       	adc	r22, r22
    1576:	77 1f       	adc	r23, r23
    1578:	88 1f       	adc	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	1a 94       	dec	r1
    157e:	69 f7       	brne	.-38     	; 0x155a <__udivmodsi4_loop>
    1580:	60 95       	com	r22
    1582:	70 95       	com	r23
    1584:	80 95       	com	r24
    1586:	90 95       	com	r25
    1588:	9b 01       	movw	r18, r22
    158a:	ac 01       	movw	r20, r24
    158c:	bd 01       	movw	r22, r26
    158e:	cf 01       	movw	r24, r30
    1590:	08 95       	ret

00001592 <_exit>:
    1592:	f8 94       	cli

00001594 <__stop_program>:
    1594:	ff cf       	rjmp	.-2      	; 0x1594 <__stop_program>
