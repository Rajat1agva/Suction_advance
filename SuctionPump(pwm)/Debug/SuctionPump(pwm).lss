
SuctionPump(pwm).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00804000  00003a50  00003ae4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003a  008040b6  008040b6  00003b9a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003b9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003bcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00003c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000066a9  00000000  00000000  00003dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f58  00000000  00000000  0000a475  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015d5  00000000  00000000  0000d3cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000071c  00000000  00000000  0000e9a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000029de  00000000  00000000  0000f0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000257b  00000000  00000000  00011a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  00014019  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__ctors_end>
       4:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
       8:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
       c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      10:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      14:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      18:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      1c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      20:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      24:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      28:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      2c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      30:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      34:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      38:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      3c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      40:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      44:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      48:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      4c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      50:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      54:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      58:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      5c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      60:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      64:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      68:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      6c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      70:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      74:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      78:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      7c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      80:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      84:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      88:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      8c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      90:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      94:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      98:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      9c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      a0:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      a4:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      a8:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      ac:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      b0:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      b4:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      b8:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      bc:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      c0:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      c4:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      c8:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      cc:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      d0:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      d4:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      d8:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      dc:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      e0:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      e4:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__bad_interrupt>
      e8:	07 63       	ori	r16, 0x37	; 55
      ea:	42 36       	cpi	r20, 0x62	; 98
      ec:	b7 9b       	sbis	0x16, 7	; 22
      ee:	d8 a7       	std	Y+40, r29	; 0x28
      f0:	1a 39       	cpi	r17, 0x9A	; 154
      f2:	68 56       	subi	r22, 0x68	; 104
      f4:	18 ae       	std	Y+56, r1	; 0x38
      f6:	ba ab       	std	Y+50, r27	; 0x32
      f8:	55 8c       	ldd	r5, Z+29	; 0x1d
      fa:	1d 3c       	cpi	r17, 0xCD	; 205
      fc:	b7 cc       	rjmp	.-1682   	; 0xfffffa6c <__eeprom_end+0xff7efa6c>
      fe:	57 63       	ori	r21, 0x37	; 55
     100:	bd 6d       	ori	r27, 0xDD	; 221
     102:	ed fd       	.word	0xfded	; ????
     104:	75 3e       	cpi	r23, 0xE5	; 229
     106:	f6 17       	cp	r31, r22
     108:	72 31       	cpi	r23, 0x12	; 18
     10a:	bf 00       	.word	0x00bf	; ????
     10c:	00 00       	nop
     10e:	80 3f       	cpi	r24, 0xF0	; 240
     110:	08 00       	.word	0x0008	; ????
     112:	00 00       	nop
     114:	be 92       	st	-X, r11
     116:	24 49       	sbci	r18, 0x94	; 148
     118:	12 3e       	cpi	r17, 0xE2	; 226
     11a:	ab aa       	std	Y+51, r10	; 0x33
     11c:	aa 2a       	or	r10, r26
     11e:	be cd       	rjmp	.-1156   	; 0xfffffc9c <__eeprom_end+0xff7efc9c>
     120:	cc cc       	rjmp	.-1640   	; 0xfffffaba <__eeprom_end+0xff7efaba>
     122:	4c 3e       	cpi	r20, 0xEC	; 236
     124:	00 00       	nop
     126:	00 80       	ld	r0, Z
     128:	be ab       	std	Y+54, r27	; 0x36
     12a:	aa aa       	std	Y+50, r10	; 0x32
     12c:	aa 3e       	cpi	r26, 0xEA	; 234
     12e:	00 00       	nop
     130:	00 00       	nop
     132:	bf 00       	.word	0x00bf	; ????
     134:	00 00       	nop
     136:	80 3f       	cpi	r24, 0xF0	; 240
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	00 08       	sbc	r0, r0
     13e:	41 78       	andi	r20, 0x81	; 129
     140:	d3 bb       	out	0x13, r29	; 19
     142:	43 87       	std	Z+11, r20	; 0x0b
     144:	d1 13       	cpse	r29, r17
     146:	3d 19       	sub	r19, r13
     148:	0e 3c       	cpi	r16, 0xCE	; 206
     14a:	c3 bd       	out	0x23, r28	; 35
     14c:	42 82       	std	Z+2, r4	; 0x02
     14e:	ad 2b       	or	r26, r29
     150:	3e 68       	ori	r19, 0x8E	; 142
     152:	ec 82       	std	Y+4, r14	; 0x04
     154:	76 be       	out	0x36, r7	; 54
     156:	d9 8f       	std	Y+25, r29	; 0x19
     158:	e1 a9       	ldd	r30, Z+49	; 0x31
     15a:	3e 4c       	sbci	r19, 0xCE	; 206
     15c:	80 ef       	ldi	r24, 0xF0	; 240
     15e:	ff be       	out	0x3f, r15	; 63
     160:	01 c4       	rjmp	.+2050   	; 0x964 <__LOCK_REGION_LENGTH__+0x564>
     162:	ff 7f       	andi	r31, 0xFF	; 255
     164:	3f 00       	.word	0x003f	; ????
     166:	00 00       	nop
	...

0000016a <__trampolines_end>:
     16a:	00 00       	nop
     16c:	00 0c       	add	r0, r0
     16e:	00 00       	nop
     170:	00 00       	nop
     172:	00 1c       	adc	r0, r0
     174:	00 00       	nop
     176:	00 00       	nop
     178:	00 1c       	adc	r0, r0
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	00 0c       	add	r0, r0
     180:	00 00       	nop
     182:	00 00       	nop
     184:	00 0c       	add	r0, r0
     186:	00 00       	nop
     188:	30 00       	.word	0x0030	; ????
     18a:	00 0c       	add	r0, r0
     18c:	00 00       	nop
     18e:	30 01       	movw	r6, r0
     190:	80 0c       	add	r8, r0
     192:	00 00       	nop
     194:	3e e1       	ldi	r19, 0x1E	; 30
     196:	f7 0c       	add	r15, r7
     198:	00 fe       	sbrs	r0, 0
     19a:	7f f1       	brie	.+94     	; 0x1fa <battery_SOC4_15x32>
     19c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     19e:	e1 fe       	sbrs	r14, 1
     1a0:	73 33       	cpi	r23, 0x33	; 51
     1a2:	99 8f       	std	Y+25, r25	; 0x19
     1a4:	f1 8c       	ldd	r15, Z+25	; 0x19
     1a6:	33 33       	cpi	r19, 0x33	; 51
     1a8:	99 8e       	std	Y+25, r9	; 0x19
     1aa:	31 8c       	ldd	r3, Z+25	; 0x19
     1ac:	33 31       	cpi	r19, 0x13	; 19
     1ae:	99 8c       	ldd	r9, Y+25	; 0x19
     1b0:	31 8c       	ldd	r3, Z+25	; 0x19
     1b2:	33 31       	cpi	r19, 0x13	; 19
     1b4:	99 8c       	ldd	r9, Y+25	; 0x19
     1b6:	31 8c       	ldd	r3, Z+25	; 0x19
     1b8:	33 31       	cpi	r19, 0x13	; 19
     1ba:	99 8c       	ldd	r9, Y+25	; 0x19
     1bc:	31 8c       	ldd	r3, Z+25	; 0x19
     1be:	33 31       	cpi	r19, 0x13	; 19
     1c0:	99 8c       	ldd	r9, Y+25	; 0x19
     1c2:	30 fc       	sbrc	r3, 0
     1c4:	33 31       	cpi	r19, 0x13	; 19
     1c6:	99 8c       	ldd	r9, Y+25	; 0x19
     1c8:	31 f8       	bld	r3, 1
     1ca:	7b bb       	out	0x1b, r23	; 27
     1cc:	dd de       	rcall	.-582    	; 0xffffff88 <__eeprom_end+0xff7eff88>
     1ce:	79 80       	ldd	r7, Y+1	; 0x01
     1d0:	7b bb       	out	0x1b, r23	; 27
     1d2:	dd de       	rcall	.-582    	; 0xffffff8e <__eeprom_end+0xff7eff8e>
     1d4:	79 fc       	.word	0xfc79	; ????
     1d6:	00 00       	nop
     1d8:	00 00       	nop
     1da:	03 fe       	sbrs	r0, 3
     1dc:	00 00       	nop
     1de:	00 00       	nop
     1e0:	03 06       	cpc	r0, r19
     1e2:	00 00       	nop
     1e4:	00 00       	nop
     1e6:	03 06       	cpc	r0, r19
     1e8:	00 00       	nop
     1ea:	00 00       	nop
     1ec:	03 06       	cpc	r0, r19
     1ee:	00 00       	nop
     1f0:	00 00       	nop
     1f2:	03 fe       	sbrs	r0, 3
     1f4:	00 00       	nop
     1f6:	00 00       	nop
     1f8:	01 fc       	sbrc	r0, 1

000001fa <battery_SOC4_15x32>:
     1fa:	7f ff ff c0 80 00 00 20 be fe ff a0 bf 7f 7f a0     ....... ........
     20a:	bf bf bf b8 9f df df a4 af ef ef a4 b7 f7 f7 a4     ................
     21a:	bb fb fb a4 bd fd fd b8 be fe fe a0 bf 7f 7f 20     ............... 
     22a:	bf bf bf a0 80 00 00 20 7f ff ff c0                 ....... ....

00000236 <system24x36>:
	...
     256:	00 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
     266:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
     276:	01 01 00 00 00 00 00 00 00 00 00 00 00 01 01 01     ................
     286:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
     296:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     2a6:	01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01     ................
     2b6:	01 01 00 00 00 00 01 01 01 01 01 01 00 00 00 00     ................
     2c6:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
     2d6:	01 01 01 01 01 00 00 00 00 00 00 01 01 01 01 01     ................
	...
     2ee:	01 01 01 01 01 00 00 00 00 00 01 01 01 01 01 00     ................
	...
     306:	00 01 01 01 01 01 00 00 00 00 01 01 01 01 01 00     ................
	...
     31e:	00 01 01 01 01 01 00 00 00 00 01 01 01 01 01 00     ................
	...
     336:	00 01 01 01 01 01 00 00 00 00 01 01 01 01 00 00     ................
	...
     34e:	00 00 01 01 01 01 00 00 00 01 01 01 01 01 00 00     ................
	...
     366:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     37e:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     396:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     3ae:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     3c6:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     3de:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     3f6:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     40e:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     426:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     43e:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     456:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     46e:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     486:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
     49e:	00 00 01 01 01 01 01 00 00 00 01 01 01 01 00 00     ................
	...
     4b6:	00 00 01 01 01 01 00 00 00 00 01 01 01 01 01 00     ................
	...
     4ce:	00 01 01 01 01 01 00 00 00 00 01 01 01 01 01 00     ................
	...
     4e6:	00 01 01 01 01 01 00 00 00 00 01 01 01 01 01 00     ................
	...
     4fe:	00 01 01 01 01 01 00 00 00 00 00 01 01 01 01 01     ................
	...
     516:	01 01 01 01 01 00 00 00 00 00 00 01 01 01 01 01     ................
	...
     52e:	01 01 01 01 01 00 00 00 00 00 00 00 01 01 01 01     ................
     53e:	01 01 00 00 00 00 01 01 01 01 01 01 00 00 00 00     ................
     54e:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     55e:	01 01 01 01 00 00 00 00 00 00 00 00 00 01 01 01     ................
     56e:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
     57e:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
     58e:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     5b6:	00 00 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     5ce:	00 00 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     5e6:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     5fe:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
     60e:	00 00 00 00 00 00 00 01 01 01 01 01 01 01 00 00     ................
	...
     626:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
	...
     63e:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
	...
     656:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
	...
     676:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     68e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     6a6:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     6be:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     6d6:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     6ee:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     706:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     71e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     736:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     74e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     766:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     77e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     796:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     7ae:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     7c6:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     7de:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     7f6:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     80e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     826:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     83e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     856:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     86e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     886:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
     896:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     8a6:	01 01 01 01 00 00 00 00 00 00 00 01 01 01 01 01     ................
     8b6:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     8c6:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     8d6:	01 01 01 01 00 00 00 00 00 00 00 01 01 01 01 01     ................
     8e6:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
     8fe:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
     90e:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     91e:	01 01 00 00 00 00 00 00 00 00 00 01 01 01 01 01     ................
     92e:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
     93e:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     94e:	01 01 01 01 00 00 00 00 00 00 00 01 01 01 01 01     ................
     95e:	00 00 00 00 00 00 01 01 01 01 01 01 01 00 00 00     ................
     96e:	00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 01     ................
     97e:	01 01 01 01 01 00 00 00 00 00 00 01 00 00 00 00     ................
	...
     996:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     9ae:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     9c6:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     9de:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     9f6:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     a0e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     a26:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     a3e:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     a56:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     a6e:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
     a7e:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
	...
     a9a:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
     ab2:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
     aca:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     ae2:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
     af2:	00 00 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
	...
     b0e:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
     b26:	00 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
     b3e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     b56:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
     b66:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
	...
     b82:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
     b9a:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     bb2:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
     bc2:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
	...
     bde:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
     bf6:	00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c06:	01 01 01 01 01 01 01 00 00 00 01 01 01 01 01 01     ................
     c16:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 00     ................
     c26:	00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c36:	01 01 01 01 01 01 01 00 00 00 01 01 01 01 01 01     ................
     c46:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 00     ................
     c56:	00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 00     ................
	...
     c6e:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c7e:	01 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
     c8e:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
     c9e:	00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     cae:	01 01 01 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
     cbe:	00 00 00 00 00 01 01 01 01 01 01 01 00 00 00 00     ................
     cce:	00 00 01 01 01 00 00 00 00 00 00 00 00 00 00 01     ................
     cde:	01 01 01 01 01 00 00 00 00 00 01 00 00 00 00 00     ................
     cee:	00 00 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
	...
     d0e:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d26:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d3e:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d56:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d6e:	01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
     d7e:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
	...
     d9a:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
     db2:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
     dc2:	00 00 00 00 01 01 01 01 01 01 01 01 01 00 00 00     ................
	...
     dde:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
     df6:	01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
     e0e:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
	...
     e2a:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
     e42:	00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
     e5e:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e76:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     e8e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     ea6:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     ebe:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     ed6:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     eee:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     f06:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     f1e:	01 01 01 01 01 00 00 00 00 01 00 00 00 00 00 00     ................
	...
     f36:	01 01 01 01 01 00 00 00 00 01 01 01 00 00 00 00     ................
     f46:	00 00 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
     f56:	00 01 01 01 01 01 01 00 00 00 00 00 00 01 01 01     ................
     f66:	01 01 01 01 00 00 00 00 00 01 01 01 01 01 01 01     ................
     f76:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
     f86:	00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     f96:	01 01 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
     fa6:	01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
     fda:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
     ff2:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    100a:	00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1022:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    1032:	00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01     ................
	...
    104e:	00 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    1066:	00 00 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    107e:	00 01 01 01 01 01 00 01 01 01 01 01 00 00 00 00     ................
	...
    1096:	01 01 01 01 01 00 00 01 01 01 01 01 00 00 00 00     ................
    10a6:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 01     ................
    10b6:	01 01 01 01 00 00 00 00 00 00 00 00 00 00 01 01     ................
    10c6:	01 01 01 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
    10d6:	00 00 00 00 00 01 01 01 01 01 00 00 00 00 00 01     ................
    10e6:	01 01 01 01 00 00 00 00 00 00 00 00 00 01 01 01     ................
    10f6:	01 00 00 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
    1106:	00 00 00 00 01 01 01 01 01 00 00 00 00 00 00 01     ................
    1116:	01 01 01 01 00 00 00 00 00 00 00 01 01 01 01 01     ................
    1126:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
    1136:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 01     ................
    1146:	01 01 01 01 00 00 00 00 00 01 01 01 01 01 00 00     ................
    1156:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
    1166:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 01     ................
    1176:	01 01 01 01 00 00 00 00 01 01 01 01 00 00 00 00     ................
    1186:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
    1196:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    11a6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    11b6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    11c6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    11d6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    11e6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
	...
    1202:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    121a:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1232:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    124a:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1262:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    127a:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1292:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    12aa:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    12c2:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    12da:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    12f2:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    130a:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 01     ................
    131a:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    132a:	01 01 01 00 00 00 00 01 01 01 01 01 01 01 01 01     ................
    133a:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 01     ................
    134a:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    135a:	01 01 01 00 00 00 00 01 01 01 01 01 01 01 01 01     ................
    136a:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 01     ................
    137a:	01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
    138a:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 00     ................
	...
    13a6:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    13be:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    13d6:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    13ee:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1406:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    141e:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1436:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    144e:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
	...
    1466:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1476:	01 01 00 00 00 00 00 00 00 00 00 01 01 01 01 01     ................
    1486:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
    1496:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    14a6:	01 01 01 01 01 00 00 00 00 00 00 01 01 00 00 00     ................
    14b6:	00 00 00 00 00 00 01 01 01 01 01 01 01 00 00 00     ................
	...
    14d6:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    14ee:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1506:	00 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    151e:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1536:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    154e:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1566:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    157e:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1596:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    15ae:	00 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    15c6:	00 01 01 01 01 01 00 00 00 00 01 00 00 00 00 00     ................
	...
    15de:	01 01 01 01 01 01 00 00 00 00 01 01 01 00 00 00     ................
	...
    15f6:	01 01 01 01 01 00 00 00 00 00 01 01 01 01 01 01     ................
    1606:	00 00 00 00 00 00 01 01 01 01 01 01 01 00 00 00     ................
    1616:	00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1626:	01 01 01 01 00 00 00 00 00 00 01 01 01 01 01 01     ................
    1636:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
    1646:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1656:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    1666:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1682:	00 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
    1692:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
    16a2:	01 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    16b2:	01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
    16c2:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    16d2:	01 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    16e2:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    16f2:	00 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    170a:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1722:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    1732:	00 00 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
	...
    174e:	00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    1766:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    177e:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1796:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    17ae:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    17c6:	00 01 01 01 01 01 00 00 00 00 01 01 01 01 01 01     ................
    17d6:	01 00 00 00 00 00 00 00 00 01 01 01 01 01 00 00     ................
    17e6:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
    17f6:	00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1806:	01 01 01 01 01 00 00 00 00 01 01 01 01 01 01 01     ................
    1816:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
    1826:	00 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
    1836:	01 01 01 01 01 01 00 00 00 01 01 01 01 01 01 00     ................
	...
    184e:	00 01 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
    1866:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
    187e:	00 00 01 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    1896:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    18ae:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    18c6:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    18de:	00 00 00 01 01 01 01 01 00 00 01 01 01 01 00 00     ................
	...
    18f6:	00 00 00 01 01 01 01 01 00 00 01 01 01 01 01 00     ................
	...
    190e:	00 00 00 01 01 01 01 01 00 00 01 01 01 01 01 00     ................
	...
    1926:	00 00 00 01 01 01 01 01 00 00 01 01 01 01 01 00     ................
	...
    193e:	00 00 01 01 01 01 01 00 00 00 00 01 01 01 01 01     ................
	...
    1956:	00 00 01 01 01 01 01 00 00 00 00 01 01 01 01 01     ................
    1966:	01 00 00 00 00 00 00 00 00 01 01 01 01 01 00 00     ................
    1976:	00 00 00 00 01 01 01 01 01 01 00 00 00 00 00 01     ................
    1986:	01 01 01 01 01 01 00 00 00 00 00 00 00 01 01 01     ................
    1996:	01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00     ................
    19a6:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
    19b6:	01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 01     ................
    19c6:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00     ................
	...
    19ee:	00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    19fe:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
    1a0e:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 00     ................
    1a1e:	00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1a2e:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
    1a3e:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 00     ................
	...
    1a5e:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1a76:	00 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1a8e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1aa6:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1abe:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1ace:	00 00 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
	...
    1aea:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1b02:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1b1a:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1b32:	00 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1b4a:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b62:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b7a:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1b8a:	00 00 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
	...
    1ba6:	00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    1bbe:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1bd6:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1bee:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1c06:	00 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1c1e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c36:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c4e:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1c5e:	00 00 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
	...
    1c7a:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1c92:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1caa:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1cc2:	00 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    1cda:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1cf2:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d0a:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1d1a:	00 00 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
	...
    1d3e:	00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    1d4e:	00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01     ................
    1d5e:	01 01 01 00 00 00 00 00 00 00 00 00 00 01 01 01     ................
    1d6e:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
    1d7e:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1d8e:	01 01 01 01 01 00 00 00 00 00 00 01 01 01 01 01     ................
    1d9e:	01 01 00 00 00 00 00 01 01 01 01 01 01 01 00 00     ................
    1dae:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    1dbe:	00 01 01 01 01 01 00 00 00 00 01 01 01 01 01 01     ................
	...
    1dd6:	00 01 01 01 01 01 01 00 00 00 01 01 01 01 01 00     ................
	...
    1dee:	00 00 01 01 01 01 01 00 00 00 01 01 01 01 01 00     ................
	...
    1e06:	00 00 01 01 01 01 01 00 00 00 01 01 01 01 01 00     ................
	...
    1e1e:	00 00 01 01 01 01 01 00 00 00 01 01 01 01 01 00     ................
	...
    1e36:	00 00 01 01 01 01 01 00 00 00 01 01 01 01 01 01     ................
	...
    1e4e:	00 00 01 01 01 01 01 00 00 00 00 01 01 01 01 01     ................
	...
    1e66:	00 00 01 01 01 01 00 00 00 00 00 01 01 01 01 01     ................
    1e76:	01 01 00 00 00 00 00 00 00 01 01 01 01 01 00 00     ................
    1e86:	00 00 00 00 01 01 01 01 01 01 01 00 00 00 00 00     ................
    1e96:	00 01 01 01 01 00 00 00 00 00 00 00 00 01 01 01     ................
    1ea6:	01 01 01 01 01 00 00 00 01 01 01 01 00 00 00 00     ................
    1eb6:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
    1ec6:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    1ed6:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00     ................
    1ee6:	00 00 00 00 00 01 01 01 01 01 01 01 01 01 01 01     ................
    1ef6:	01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01     ................
    1f06:	01 00 00 00 01 01 01 01 01 01 01 01 01 00 00 00     ................
    1f16:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 01     ................
    1f26:	01 01 01 01 01 01 00 00 00 00 01 01 01 01 01 00     ................
	...
    1f3e:	01 01 01 01 01 01 01 00 00 00 01 01 01 01 01 00     ................
	...
    1f56:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
    1f6e:	00 00 01 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    1f86:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    1f9e:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    1fb6:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    1fce:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    1fe6:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 01 00     ................
	...
    1ffe:	00 00 01 01 01 01 01 01 00 00 01 01 01 01 01 00     ................
	...
    2016:	00 00 01 01 01 01 01 00 00 00 01 01 01 01 01 01     ................
	...
    202e:	00 01 01 01 01 01 01 00 00 00 00 01 01 01 01 01     ................
    203e:	01 01 00 00 00 00 00 01 01 01 01 01 01 01 00 00     ................
    204e:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
    205e:	01 01 01 01 01 00 00 00 00 00 00 00 00 01 01 01     ................
    206e:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
    207e:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
    208e:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    209e:	00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    20ae:	00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01     ................
    20be:	01 01 00 00 00 00 00 00 00 00 00 00 00 01 01 01     ................
    20ce:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
    20de:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
    20ee:	01 01 01 01 00 00 00 00 00 00 00 01 01 01 01 01     ................
    20fe:	01 01 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
    210e:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    211e:	01 01 01 01 01 01 00 00 00 00 01 01 01 01 01 00     ................
	...
    2136:	00 01 01 01 01 01 00 00 00 00 01 01 01 01 01 00     ................
	...
    214e:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
    2166:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
    217e:	00 00 01 01 01 01 01 00 00 01 01 01 01 01 00 00     ................
	...
    2196:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    21ae:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    21c6:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    21de:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 00 00     ................
	...
    21f6:	00 00 00 01 01 01 01 01 00 01 01 01 01 01 01 00     ................
	...
    220e:	00 00 00 01 01 01 01 01 00 00 01 01 01 01 01 00     ................
	...
    2226:	00 00 00 01 01 01 01 01 00 00 01 01 01 01 01 01     ................
	...
    223e:	00 00 01 01 01 01 01 01 00 00 00 01 01 01 01 01     ................
    224e:	01 01 00 00 00 00 00 00 01 01 01 01 01 01 01 01     ................
    225e:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    226e:	01 01 01 01 01 01 01 01 00 00 00 00 01 01 01 01     ................
    227e:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    228e:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
    229e:	01 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    22ae:	01 01 01 01 01 01 01 00 00 00 00 01 01 01 01 00     ................
	...
    22ce:	00 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    22e6:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    22fe:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    2316:	00 00 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
	...
    232e:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    2346:	00 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    235e:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    236e:	00 00 00 00 00 00 00 01 01 01 01 01 01 00 00 00     ................
	...
    238a:	00 00 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    23a2:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    23b2:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    23ca:	01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00     ................
	...
    23e2:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
    23f2:	00 00 00 00                                         ....

000023f6 <columnColorToByte>:
    23f6:	00 4a 92 ff                                         .J..

000023fa <__ctors_end>:
    23fa:	11 24       	eor	r1, r1
    23fc:	1f be       	out	0x3f, r1	; 63
    23fe:	cf ef       	ldi	r28, 0xFF	; 255
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	df e7       	ldi	r29, 0x7F	; 127
    2404:	de bf       	out	0x3e, r29	; 62

00002406 <__do_copy_data>:
    2406:	10 e4       	ldi	r17, 0x40	; 64
    2408:	a0 e0       	ldi	r26, 0x00	; 0
    240a:	b0 e4       	ldi	r27, 0x40	; 64
    240c:	e0 e5       	ldi	r30, 0x50	; 80
    240e:	fa e3       	ldi	r31, 0x3A	; 58
    2410:	00 e0       	ldi	r16, 0x00	; 0
    2412:	0b bf       	out	0x3b, r16	; 59
    2414:	02 c0       	rjmp	.+4      	; 0x241a <__do_copy_data+0x14>
    2416:	07 90       	elpm	r0, Z+
    2418:	0d 92       	st	X+, r0
    241a:	a6 3b       	cpi	r26, 0xB6	; 182
    241c:	b1 07       	cpc	r27, r17
    241e:	d9 f7       	brne	.-10     	; 0x2416 <__do_copy_data+0x10>

00002420 <__do_clear_bss>:
    2420:	20 e4       	ldi	r18, 0x40	; 64
    2422:	a6 eb       	ldi	r26, 0xB6	; 182
    2424:	b0 e4       	ldi	r27, 0x40	; 64
    2426:	01 c0       	rjmp	.+2      	; 0x242a <.do_clear_bss_start>

00002428 <.do_clear_bss_loop>:
    2428:	1d 92       	st	X+, r1

0000242a <.do_clear_bss_start>:
    242a:	a0 3f       	cpi	r26, 0xF0	; 240
    242c:	b2 07       	cpc	r27, r18
    242e:	e1 f7       	brne	.-8      	; 0x2428 <.do_clear_bss_loop>
    2430:	0e 94 54 18 	call	0x30a8	; 0x30a8 <main>
    2434:	0c 94 26 1d 	jmp	0x3a4c	; 0x3a4c <_exit>

00002438 <__bad_interrupt>:
    2438:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000243c <reverse>:
{
	for (uint8_t i = 0; i < arSize; i++)
	{
		array[i] = c;
	}
}
    243c:	61 50       	subi	r22, 0x01	; 1
    243e:	71 09       	sbc	r23, r1
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	0e c0       	rjmp	.+28     	; 0x2462 <reverse+0x26>
    2446:	dc 01       	movw	r26, r24
    2448:	a2 0f       	add	r26, r18
    244a:	b3 1f       	adc	r27, r19
    244c:	4c 91       	ld	r20, X
    244e:	fc 01       	movw	r30, r24
    2450:	e6 0f       	add	r30, r22
    2452:	f7 1f       	adc	r31, r23
    2454:	50 81       	ld	r21, Z
    2456:	5c 93       	st	X, r21
    2458:	40 83       	st	Z, r20
    245a:	2f 5f       	subi	r18, 0xFF	; 255
    245c:	3f 4f       	sbci	r19, 0xFF	; 255
    245e:	61 50       	subi	r22, 0x01	; 1
    2460:	71 09       	sbc	r23, r1
    2462:	26 17       	cp	r18, r22
    2464:	37 07       	cpc	r19, r23
    2466:	7c f3       	brlt	.-34     	; 0x2446 <reverse+0xa>
    2468:	08 95       	ret

0000246a <intToStr>:
    246a:	cf 92       	push	r12
    246c:	df 92       	push	r13
    246e:	ef 92       	push	r14
    2470:	ff 92       	push	r15
    2472:	0f 93       	push	r16
    2474:	1f 93       	push	r17
    2476:	cf 93       	push	r28
    2478:	df 93       	push	r29
    247a:	8a 01       	movw	r16, r20
    247c:	69 01       	movw	r12, r18
    247e:	c0 e0       	ldi	r28, 0x00	; 0
    2480:	d0 e0       	ldi	r29, 0x00	; 0
    2482:	11 c0       	rjmp	.+34     	; 0x24a6 <intToStr+0x3c>
    2484:	78 01       	movw	r14, r16
    2486:	ec 0e       	add	r14, r28
    2488:	fd 1e       	adc	r15, r29
    248a:	2a e0       	ldi	r18, 0x0A	; 10
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e0       	ldi	r20, 0x00	; 0
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__divmodsi4>
    2496:	60 5d       	subi	r22, 0xD0	; 208
    2498:	f7 01       	movw	r30, r14
    249a:	60 83       	st	Z, r22
    249c:	62 2f       	mov	r22, r18
    249e:	73 2f       	mov	r23, r19
    24a0:	84 2f       	mov	r24, r20
    24a2:	95 2f       	mov	r25, r21
    24a4:	21 96       	adiw	r28, 0x01	; 1
    24a6:	61 15       	cp	r22, r1
    24a8:	71 05       	cpc	r23, r1
    24aa:	81 05       	cpc	r24, r1
    24ac:	91 05       	cpc	r25, r1
    24ae:	51 f7       	brne	.-44     	; 0x2484 <intToStr+0x1a>
    24b0:	06 c0       	rjmp	.+12     	; 0x24be <intToStr+0x54>
    24b2:	f8 01       	movw	r30, r16
    24b4:	ec 0f       	add	r30, r28
    24b6:	fd 1f       	adc	r31, r29
    24b8:	80 e3       	ldi	r24, 0x30	; 48
    24ba:	80 83       	st	Z, r24
    24bc:	21 96       	adiw	r28, 0x01	; 1
    24be:	cc 15       	cp	r28, r12
    24c0:	dd 05       	cpc	r29, r13
    24c2:	bc f3       	brlt	.-18     	; 0x24b2 <intToStr+0x48>
    24c4:	be 01       	movw	r22, r28
    24c6:	c8 01       	movw	r24, r16
    24c8:	0e 94 1e 12 	call	0x243c	; 0x243c <reverse>
    24cc:	f8 01       	movw	r30, r16
    24ce:	ec 0f       	add	r30, r28
    24d0:	fd 1f       	adc	r31, r29
    24d2:	10 82       	st	Z, r1
    24d4:	ce 01       	movw	r24, r28
    24d6:	df 91       	pop	r29
    24d8:	cf 91       	pop	r28
    24da:	1f 91       	pop	r17
    24dc:	0f 91       	pop	r16
    24de:	ff 90       	pop	r15
    24e0:	ef 90       	pop	r14
    24e2:	df 90       	pop	r13
    24e4:	cf 90       	pop	r12
    24e6:	08 95       	ret

000024e8 <ftoa>:
    24e8:	8f 92       	push	r8
    24ea:	9f 92       	push	r9
    24ec:	af 92       	push	r10
    24ee:	bf 92       	push	r11
    24f0:	cf 92       	push	r12
    24f2:	df 92       	push	r13
    24f4:	ef 92       	push	r14
    24f6:	ff 92       	push	r15
    24f8:	0f 93       	push	r16
    24fa:	1f 93       	push	r17
    24fc:	cf 93       	push	r28
    24fe:	df 93       	push	r29
    2500:	6b 01       	movw	r12, r22
    2502:	7c 01       	movw	r14, r24
    2504:	8a 01       	movw	r16, r20
    2506:	e9 01       	movw	r28, r18
    2508:	0e 94 cf 19 	call	0x339e	; 0x339e <__fixsfsi>
    250c:	4b 01       	movw	r8, r22
    250e:	5c 01       	movw	r10, r24
    2510:	07 2e       	mov	r0, r23
    2512:	00 0c       	add	r0, r0
    2514:	88 0b       	sbc	r24, r24
    2516:	99 0b       	sbc	r25, r25
    2518:	0e 94 07 1a 	call	0x340e	; 0x340e <__floatsisf>
    251c:	9b 01       	movw	r18, r22
    251e:	ac 01       	movw	r20, r24
    2520:	c7 01       	movw	r24, r14
    2522:	b6 01       	movw	r22, r12
    2524:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
    2528:	6b 01       	movw	r12, r22
    252a:	7c 01       	movw	r14, r24
    252c:	b4 01       	movw	r22, r8
    252e:	99 20       	and	r9, r9
    2530:	24 f4       	brge	.+8      	; 0x253a <ftoa+0x52>
    2532:	66 27       	eor	r22, r22
    2534:	77 27       	eor	r23, r23
    2536:	68 19       	sub	r22, r8
    2538:	79 09       	sbc	r23, r9
    253a:	07 2e       	mov	r0, r23
    253c:	00 0c       	add	r0, r0
    253e:	88 0b       	sbc	r24, r24
    2540:	99 0b       	sbc	r25, r25
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	a8 01       	movw	r20, r16
    2548:	0e 94 35 12 	call	0x246a	; 0x246a <intToStr>
    254c:	5c 01       	movw	r10, r24
    254e:	20 97       	sbiw	r28, 0x00	; 0
    2550:	81 f1       	breq	.+96     	; 0x25b2 <ftoa+0xca>
    2552:	f8 01       	movw	r30, r16
    2554:	e8 0f       	add	r30, r24
    2556:	f9 1f       	adc	r31, r25
    2558:	8e e2       	ldi	r24, 0x2E	; 46
    255a:	80 83       	st	Z, r24
    255c:	be 01       	movw	r22, r28
    255e:	0d 2e       	mov	r0, r29
    2560:	00 0c       	add	r0, r0
    2562:	88 0b       	sbc	r24, r24
    2564:	99 0b       	sbc	r25, r25
    2566:	0e 94 07 1a 	call	0x340e	; 0x340e <__floatsisf>
    256a:	9b 01       	movw	r18, r22
    256c:	ac 01       	movw	r20, r24
    256e:	60 e0       	ldi	r22, 0x00	; 0
    2570:	70 e0       	ldi	r23, 0x00	; 0
    2572:	80 e2       	ldi	r24, 0x20	; 32
    2574:	91 e4       	ldi	r25, 0x41	; 65
    2576:	0e 94 29 1b 	call	0x3652	; 0x3652 <pow>
    257a:	9b 01       	movw	r18, r22
    257c:	ac 01       	movw	r20, r24
    257e:	c7 01       	movw	r24, r14
    2580:	b6 01       	movw	r22, r12
    2582:	0e 94 bc 1a 	call	0x3578	; 0x3578 <__mulsf3>
    2586:	2f ef       	ldi	r18, 0xFF	; 255
    2588:	a2 1a       	sub	r10, r18
    258a:	b2 0a       	sbc	r11, r18
    258c:	0e 94 cf 19 	call	0x339e	; 0x339e <__fixsfsi>
    2590:	9b 01       	movw	r18, r22
    2592:	77 23       	and	r23, r23
    2594:	24 f4       	brge	.+8      	; 0x259e <ftoa+0xb6>
    2596:	22 27       	eor	r18, r18
    2598:	33 27       	eor	r19, r19
    259a:	26 1b       	sub	r18, r22
    259c:	37 0b       	sbc	r19, r23
    259e:	a8 01       	movw	r20, r16
    25a0:	4a 0d       	add	r20, r10
    25a2:	5b 1d       	adc	r21, r11
    25a4:	b9 01       	movw	r22, r18
    25a6:	33 0f       	add	r19, r19
    25a8:	88 0b       	sbc	r24, r24
    25aa:	99 0b       	sbc	r25, r25
    25ac:	9e 01       	movw	r18, r28
    25ae:	0e 94 35 12 	call	0x246a	; 0x246a <intToStr>
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	1f 91       	pop	r17
    25b8:	0f 91       	pop	r16
    25ba:	ff 90       	pop	r15
    25bc:	ef 90       	pop	r14
    25be:	df 90       	pop	r13
    25c0:	cf 90       	pop	r12
    25c2:	bf 90       	pop	r11
    25c4:	af 90       	pop	r10
    25c6:	9f 90       	pop	r9
    25c8:	8f 90       	pop	r8
    25ca:	08 95       	ret

000025cc <USART1_init>:
    25cc:	e0 e4       	ldi	r30, 0x40	; 64
    25ce:	f4 e0       	ldi	r31, 0x04	; 4
    25d0:	20 81       	ld	r18, Z
    25d2:	2d 7f       	andi	r18, 0xFD	; 253
    25d4:	20 83       	st	Z, r18
    25d6:	20 81       	ld	r18, Z
    25d8:	21 60       	ori	r18, 0x01	; 1
    25da:	20 83       	st	Z, r18
    25dc:	bc 01       	movw	r22, r24
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatunsisf>
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e8       	ldi	r20, 0x80	; 128
    25ec:	51 e4       	ldi	r21, 0x41	; 65
    25ee:	0e 94 bc 1a 	call	0x3578	; 0x3578 <__mulsf3>
    25f2:	9b 01       	movw	r18, r22
    25f4:	ac 01       	movw	r20, r24
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	7b e1       	ldi	r23, 0x1B	; 27
    25fa:	87 eb       	ldi	r24, 0xB7	; 183
    25fc:	9e e4       	ldi	r25, 0x4E	; 78
    25fe:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__divsf3>
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	40 e0       	ldi	r20, 0x00	; 0
    2608:	5f e3       	ldi	r21, 0x3F	; 63
    260a:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
    260e:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__fixunssfsi>
    2612:	e0 e2       	ldi	r30, 0x20	; 32
    2614:	f8 e0       	ldi	r31, 0x08	; 8
    2616:	60 87       	std	Z+8, r22	; 0x08
    2618:	71 87       	std	Z+9, r23	; 0x09
    261a:	86 81       	ldd	r24, Z+6	; 0x06
    261c:	80 6c       	ori	r24, 0xC0	; 192
    261e:	86 83       	std	Z+6, r24	; 0x06
    2620:	08 95       	ret

00002622 <USART1_sendChar>:
    2622:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7e0824>
    2626:	95 ff       	sbrs	r25, 5
    2628:	fc cf       	rjmp	.-8      	; 0x2622 <USART1_sendChar>
    262a:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
    262e:	08 95       	ret

00002630 <USART1_sendString>:
    2630:	0f 93       	push	r16
    2632:	1f 93       	push	r17
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	8c 01       	movw	r16, r24
    263a:	c0 e0       	ldi	r28, 0x00	; 0
    263c:	d0 e0       	ldi	r29, 0x00	; 0
    263e:	07 c0       	rjmp	.+14     	; 0x264e <USART1_sendString+0x1e>
    2640:	f8 01       	movw	r30, r16
    2642:	ec 0f       	add	r30, r28
    2644:	fd 1f       	adc	r31, r29
    2646:	80 81       	ld	r24, Z
    2648:	0e 94 11 13 	call	0x2622	; 0x2622 <USART1_sendChar>
    264c:	21 96       	adiw	r28, 0x01	; 1
    264e:	f8 01       	movw	r30, r16
    2650:	01 90       	ld	r0, Z+
    2652:	00 20       	and	r0, r0
    2654:	e9 f7       	brne	.-6      	; 0x2650 <USART1_sendString+0x20>
    2656:	31 97       	sbiw	r30, 0x01	; 1
    2658:	e0 1b       	sub	r30, r16
    265a:	f1 0b       	sbc	r31, r17
    265c:	ce 17       	cp	r28, r30
    265e:	df 07       	cpc	r29, r31
    2660:	78 f3       	brcs	.-34     	; 0x2640 <USART1_sendString+0x10>
    2662:	8a e0       	ldi	r24, 0x0A	; 10
    2664:	0e 94 11 13 	call	0x2622	; 0x2622 <USART1_sendChar>
    2668:	df 91       	pop	r29
    266a:	cf 91       	pop	r28
    266c:	1f 91       	pop	r17
    266e:	0f 91       	pop	r16
    2670:	08 95       	ret

00002672 <USART1_sendFloat>:
    2672:	9a 01       	movw	r18, r20
    2674:	4a eb       	ldi	r20, 0xBA	; 186
    2676:	50 e4       	ldi	r21, 0x40	; 64
    2678:	0e 94 74 12 	call	0x24e8	; 0x24e8 <ftoa>
    267c:	8a eb       	ldi	r24, 0xBA	; 186
    267e:	90 e4       	ldi	r25, 0x40	; 64
    2680:	0e 94 18 13 	call	0x2630	; 0x2630 <USART1_sendString>
    2684:	08 95       	ret

00002686 <SPI_0_init>:
    2686:	e0 e0       	ldi	r30, 0x00	; 0
    2688:	f4 e0       	ldi	r31, 0x04	; 4
    268a:	80 81       	ld	r24, Z
    268c:	80 68       	ori	r24, 0x80	; 128
    268e:	80 83       	st	Z, r24
    2690:	a4 e0       	ldi	r26, 0x04	; 4
    2692:	b4 e0       	ldi	r27, 0x04	; 4
    2694:	8c 91       	ld	r24, X
    2696:	80 68       	ori	r24, 0x80	; 128
    2698:	8c 93       	st	X, r24
    269a:	80 81       	ld	r24, Z
    269c:	80 61       	ori	r24, 0x10	; 16
    269e:	80 83       	st	Z, r24
    26a0:	80 81       	ld	r24, Z
    26a2:	8f 7d       	andi	r24, 0xDF	; 223
    26a4:	80 83       	st	Z, r24
    26a6:	80 81       	ld	r24, Z
    26a8:	80 64       	ori	r24, 0x40	; 64
    26aa:	80 83       	st	Z, r24
    26ac:	e0 e4       	ldi	r30, 0x40	; 64
    26ae:	f9 e0       	ldi	r31, 0x09	; 9
    26b0:	80 81       	ld	r24, Z
    26b2:	80 63       	ori	r24, 0x30	; 48
    26b4:	80 83       	st	Z, r24
    26b6:	80 81       	ld	r24, Z
    26b8:	81 60       	ori	r24, 0x01	; 1
    26ba:	80 83       	st	Z, r24
    26bc:	8c 91       	ld	r24, X
    26be:	80 68       	ori	r24, 0x80	; 128
    26c0:	8c 93       	st	X, r24
    26c2:	08 95       	ret

000026c4 <SPI_0_send_char>:
    26c4:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
    26c8:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
    26cc:	88 23       	and	r24, r24
    26ce:	e4 f7       	brge	.-8      	; 0x26c8 <SPI_0_send_char+0x4>
    26d0:	08 95       	ret

000026d2 <I2C_0_stop_transmission>:
    26d2:	e0 e0       	ldi	r30, 0x00	; 0
    26d4:	f9 e0       	ldi	r31, 0x09	; 9
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	85 83       	std	Z+5, r24	; 0x05
    26da:	83 e0       	ldi	r24, 0x03	; 3
    26dc:	84 83       	std	Z+4, r24	; 0x04
    26de:	08 95       	ret

000026e0 <I2C_0_initialization>:
    26e0:	e0 e0       	ldi	r30, 0x00	; 0
    26e2:	f9 e0       	ldi	r31, 0x09	; 9
    26e4:	80 81       	ld	r24, Z
    26e6:	8f 7e       	andi	r24, 0xEF	; 239
    26e8:	80 83       	st	Z, r24
    26ea:	80 81       	ld	r24, Z
    26ec:	83 7f       	andi	r24, 0xF3	; 243
    26ee:	80 83       	st	Z, r24
    26f0:	80 81       	ld	r24, Z
    26f2:	8d 7f       	andi	r24, 0xFD	; 253
    26f4:	80 83       	st	Z, r24
    26f6:	08 95       	ret

000026f8 <I2C_0_master_initialization>:
    26f8:	e0 e0       	ldi	r30, 0x00	; 0
    26fa:	f9 e0       	ldi	r31, 0x09	; 9
    26fc:	87 e6       	ldi	r24, 0x67	; 103
    26fe:	86 83       	std	Z+6, r24	; 0x06
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	85 83       	std	Z+5, r24	; 0x05
    2704:	83 81       	ldd	r24, Z+3	; 0x03
    2706:	8a 60       	ori	r24, 0x0A	; 10
    2708:	83 83       	std	Z+3, r24	; 0x03
    270a:	83 81       	ldd	r24, Z+3	; 0x03
    270c:	81 60       	ori	r24, 0x01	; 1
    270e:	83 83       	std	Z+3, r24	; 0x03
    2710:	08 95       	ret

00002712 <I2C_0_sendAddress>:
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	c8 2f       	mov	r28, r24
    2718:	d6 2f       	mov	r29, r22
    271a:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    271e:	83 70       	andi	r24, 0x03	; 3
    2720:	83 30       	cpi	r24, 0x03	; 3
    2722:	89 f4       	brne	.+34     	; 0x2746 <I2C_0_sendAddress+0x34>
    2724:	8e e3       	ldi	r24, 0x3E	; 62
    2726:	90 e4       	ldi	r25, 0x40	; 64
    2728:	0e 94 18 13 	call	0x2630	; 0x2630 <USART1_sendString>
    272c:	20 e6       	ldi	r18, 0x60	; 96
    272e:	3a ee       	ldi	r19, 0xEA	; 234
    2730:	01 c0       	rjmp	.+2      	; 0x2734 <I2C_0_sendAddress+0x22>
    2732:	9c 01       	movw	r18, r24
    2734:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    2738:	83 70       	andi	r24, 0x03	; 3
    273a:	83 30       	cpi	r24, 0x03	; 3
    273c:	21 f4       	brne	.+8      	; 0x2746 <I2C_0_sendAddress+0x34>
    273e:	c9 01       	movw	r24, r18
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	23 2b       	or	r18, r19
    2744:	b1 f7       	brne	.-20     	; 0x2732 <I2C_0_sendAddress+0x20>
    2746:	85 e0       	ldi	r24, 0x05	; 5
    2748:	80 93 05 09 	sts	0x0905, r24	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    274c:	dd 23       	and	r29, r29
    274e:	41 f0       	breq	.+16     	; 0x2760 <I2C_0_sendAddress+0x4e>
    2750:	8c 2f       	mov	r24, r28
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	88 0f       	add	r24, r24
    2756:	99 1f       	adc	r25, r25
    2758:	81 60       	ori	r24, 0x01	; 1
    275a:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
    275e:	04 c0       	rjmp	.+8      	; 0x2768 <I2C_0_sendAddress+0x56>
    2760:	8c 2f       	mov	r24, r28
    2762:	88 0f       	add	r24, r24
    2764:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
    2768:	80 e6       	ldi	r24, 0x60	; 96
    276a:	9a ee       	ldi	r25, 0xEA	; 234
    276c:	20 91 05 09 	lds	r18, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    2770:	24 ff       	sbrs	r18, 4
    2772:	06 c0       	rjmp	.+12     	; 0x2780 <I2C_0_sendAddress+0x6e>
    2774:	20 91 05 09 	lds	r18, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    2778:	26 fd       	sbrc	r18, 6
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <I2C_0_sendAddress+0x6e>
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	b1 f7       	brne	.-20     	; 0x276c <I2C_0_sendAddress+0x5a>
    2780:	89 2b       	or	r24, r25
    2782:	21 f4       	brne	.+8      	; 0x278c <I2C_0_sendAddress+0x7a>
    2784:	88 e4       	ldi	r24, 0x48	; 72
    2786:	90 e4       	ldi	r25, 0x40	; 64
    2788:	0e 94 18 13 	call	0x2630	; 0x2630 <USART1_sendString>
    278c:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    2790:	82 ff       	sbrs	r24, 2
    2792:	04 c0       	rjmp	.+8      	; 0x279c <I2C_0_sendAddress+0x8a>
    2794:	80 e5       	ldi	r24, 0x50	; 80
    2796:	90 e4       	ldi	r25, 0x40	; 64
    2798:	0e 94 18 13 	call	0x2630	; 0x2630 <USART1_sendString>
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	08 95       	ret

000027a2 <I2C_0_recieveData>:
    27a2:	cf 93       	push	r28
    27a4:	df 93       	push	r29
    27a6:	c0 e6       	ldi	r28, 0x60	; 96
    27a8:	da ee       	ldi	r29, 0xEA	; 234
    27aa:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    27ae:	88 23       	and	r24, r24
    27b0:	14 f0       	brlt	.+4      	; 0x27b6 <I2C_0_recieveData+0x14>
    27b2:	21 97       	sbiw	r28, 0x01	; 1
    27b4:	d1 f7       	brne	.-12     	; 0x27aa <I2C_0_recieveData+0x8>
    27b6:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    27ba:	83 fd       	sbrc	r24, 3
    27bc:	04 c0       	rjmp	.+8      	; 0x27c6 <I2C_0_recieveData+0x24>
    27be:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    27c2:	82 ff       	sbrs	r24, 2
    27c4:	06 c0       	rjmp	.+12     	; 0x27d2 <I2C_0_recieveData+0x30>
    27c6:	83 e8       	ldi	r24, 0x83	; 131
    27c8:	90 e4       	ldi	r25, 0x40	; 64
    27ca:	0e 94 18 13 	call	0x2630	; 0x2630 <USART1_sendString>
    27ce:	0e 94 69 13 	call	0x26d2	; 0x26d2 <I2C_0_stop_transmission>
    27d2:	cd 2b       	or	r28, r29
    27d4:	21 f4       	brne	.+8      	; 0x27de <I2C_0_recieveData+0x3c>
    27d6:	88 e4       	ldi	r24, 0x48	; 72
    27d8:	90 e4       	ldi	r25, 0x40	; 64
    27da:	0e 94 18 13 	call	0x2630	; 0x2630 <USART1_sendString>
    27de:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    27e2:	df 91       	pop	r29
    27e4:	cf 91       	pop	r28
    27e6:	08 95       	ret

000027e8 <Sensor_init>:
    27e8:	0e 94 70 13 	call	0x26e0	; 0x26e0 <I2C_0_initialization>
    27ec:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <I2C_0_master_initialization>
    27f0:	61 e0       	ldi	r22, 0x01	; 1
    27f2:	88 e7       	ldi	r24, 0x78	; 120
    27f4:	0e 94 89 13 	call	0x2712	; 0x2712 <I2C_0_sendAddress>
    27f8:	08 95       	ret

000027fa <pressureRead>:
    27fa:	cf 92       	push	r12
    27fc:	df 92       	push	r13
    27fe:	ef 92       	push	r14
    2800:	ff 92       	push	r15
    2802:	cf 93       	push	r28
    2804:	df 93       	push	r29
    2806:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <I2C_0_recieveData>
    280a:	8f 77       	andi	r24, 0x7F	; 127
    280c:	c8 2f       	mov	r28, r24
    280e:	d0 e0       	ldi	r29, 0x00	; 0
    2810:	dc 2f       	mov	r29, r28
    2812:	cc 27       	eor	r28, r28
    2814:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <I2C_0_recieveData>
    2818:	c8 2b       	or	r28, r24
    281a:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <I2C_0_recieveData>
    281e:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <I2C_0_recieveData>
    2822:	be 01       	movw	r22, r28
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	0e 94 05 1a 	call	0x340a	; 0x340a <__floatunsisf>
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 ed       	ldi	r19, 0xD0	; 208
    2830:	4c e4       	ldi	r20, 0x4C	; 76
    2832:	55 e4       	ldi	r21, 0x45	; 69
    2834:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__subsf3>
    2838:	2b e7       	ldi	r18, 0x7B	; 123
    283a:	34 e1       	ldi	r19, 0x14	; 20
    283c:	43 e8       	ldi	r20, 0x83	; 131
    283e:	53 e4       	ldi	r21, 0x43	; 67
    2840:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__divsf3>
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	a9 01       	movw	r20, r18
    284a:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
    284e:	6b 01       	movw	r12, r22
    2850:	7c 01       	movw	r14, r24
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	48 ec       	ldi	r20, 0xC8	; 200
    2858:	52 e4       	ldi	r21, 0x42	; 66
    285a:	0e 94 b7 1a 	call	0x356e	; 0x356e <__gesf2>
    285e:	18 16       	cp	r1, r24
    2860:	1c f4       	brge	.+6      	; 0x2868 <pressureRead+0x6e>
    2862:	c1 2c       	mov	r12, r1
    2864:	d1 2c       	mov	r13, r1
    2866:	76 01       	movw	r14, r12
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	a9 01       	movw	r20, r18
    286e:	c7 01       	movw	r24, r14
    2870:	b6 01       	movw	r22, r12
    2872:	0e 94 58 19 	call	0x32b0	; 0x32b0 <__cmpsf2>
    2876:	18 16       	cp	r1, r24
    2878:	1c f0       	brlt	.+6      	; 0x2880 <pressureRead+0x86>
    287a:	c1 2c       	mov	r12, r1
    287c:	d1 2c       	mov	r13, r1
    287e:	76 01       	movw	r14, r12
    2880:	c7 01       	movw	r24, r14
    2882:	b6 01       	movw	r22, r12
    2884:	df 91       	pop	r29
    2886:	cf 91       	pop	r28
    2888:	ff 90       	pop	r15
    288a:	ef 90       	pop	r14
    288c:	df 90       	pop	r13
    288e:	cf 90       	pop	r12
    2890:	08 95       	ret

00002892 <ADC0_init>:
    2892:	82 e8       	ldi	r24, 0x82	; 130
    2894:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    2898:	e0 e0       	ldi	r30, 0x00	; 0
    289a:	f6 e0       	ldi	r31, 0x06	; 6
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	82 83       	std	Z+2, r24	; 0x02
    28a0:	80 83       	st	Z, r24
    28a2:	08 95       	ret

000028a4 <ADC0_start>:
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
    28aa:	08 95       	ret

000028ac <ADC0_read>:
    28ac:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    28b0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <ADC0_start>
    28b4:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7e060d>
    28b8:	80 ff       	sbrs	r24, 0
    28ba:	fc cf       	rjmp	.-8      	; 0x28b4 <ADC0_read+0x8>
    28bc:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
    28c0:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
    28c4:	08 95       	ret

000028c6 <ST7586_data>:
    28c6:	0f 93       	push	r16
    28c8:	1f 93       	push	r17
    28ca:	cf 93       	push	r28
    28cc:	df 93       	push	r29
    28ce:	8c 01       	movw	r16, r24
    28d0:	d6 2f       	mov	r29, r22
    28d2:	e4 e0       	ldi	r30, 0x04	; 4
    28d4:	f4 e0       	ldi	r31, 0x04	; 4
    28d6:	80 81       	ld	r24, Z
    28d8:	8f 77       	andi	r24, 0x7F	; 127
    28da:	80 83       	st	Z, r24
    28dc:	c0 e0       	ldi	r28, 0x00	; 0
    28de:	07 c0       	rjmp	.+14     	; 0x28ee <ST7586_data+0x28>
    28e0:	f8 01       	movw	r30, r16
    28e2:	ec 0f       	add	r30, r28
    28e4:	f1 1d       	adc	r31, r1
    28e6:	80 81       	ld	r24, Z
    28e8:	0e 94 62 13 	call	0x26c4	; 0x26c4 <SPI_0_send_char>
    28ec:	cf 5f       	subi	r28, 0xFF	; 255
    28ee:	cd 17       	cp	r28, r29
    28f0:	b8 f3       	brcs	.-18     	; 0x28e0 <ST7586_data+0x1a>
    28f2:	e4 e0       	ldi	r30, 0x04	; 4
    28f4:	f4 e0       	ldi	r31, 0x04	; 4
    28f6:	80 81       	ld	r24, Z
    28f8:	80 68       	ori	r24, 0x80	; 128
    28fa:	80 83       	st	Z, r24
    28fc:	df 91       	pop	r29
    28fe:	cf 91       	pop	r28
    2900:	1f 91       	pop	r17
    2902:	0f 91       	pop	r16
    2904:	08 95       	ret

00002906 <ST7586_cmd>:
    2906:	0f 93       	push	r16
    2908:	1f 93       	push	r17
    290a:	cf 93       	push	r28
    290c:	df 93       	push	r29
    290e:	c4 e0       	ldi	r28, 0x04	; 4
    2910:	d4 e0       	ldi	r29, 0x04	; 4
    2912:	98 81       	ld	r25, Y
    2914:	9f 77       	andi	r25, 0x7F	; 127
    2916:	98 83       	st	Y, r25
    2918:	00 e2       	ldi	r16, 0x20	; 32
    291a:	14 e0       	ldi	r17, 0x04	; 4
    291c:	f8 01       	movw	r30, r16
    291e:	94 81       	ldd	r25, Z+4	; 0x04
    2920:	9f 7e       	andi	r25, 0xEF	; 239
    2922:	94 83       	std	Z+4, r25	; 0x04
    2924:	0e 94 62 13 	call	0x26c4	; 0x26c4 <SPI_0_send_char>
    2928:	f8 01       	movw	r30, r16
    292a:	84 81       	ldd	r24, Z+4	; 0x04
    292c:	80 61       	ori	r24, 0x10	; 16
    292e:	84 83       	std	Z+4, r24	; 0x04
    2930:	88 81       	ld	r24, Y
    2932:	80 68       	ori	r24, 0x80	; 128
    2934:	88 83       	st	Y, r24
    2936:	df 91       	pop	r29
    2938:	cf 91       	pop	r28
    293a:	1f 91       	pop	r17
    293c:	0f 91       	pop	r16
    293e:	08 95       	ret

00002940 <ST7586_setDispPosition>:
    2940:	cf 92       	push	r12
    2942:	df 92       	push	r13
    2944:	ef 92       	push	r14
    2946:	ff 92       	push	r15
    2948:	0f 93       	push	r16
    294a:	1f 93       	push	r17
    294c:	cf 93       	push	r28
    294e:	df 93       	push	r29
    2950:	00 d0       	rcall	.+0      	; 0x2952 <ST7586_setDispPosition+0x12>
    2952:	00 d0       	rcall	.+0      	; 0x2954 <ST7586_setDispPosition+0x14>
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
    2958:	80 39       	cpi	r24, 0x90	; 144
    295a:	31 e0       	ldi	r19, 0x01	; 1
    295c:	93 07       	cpc	r25, r19
    295e:	a8 f5       	brcc	.+106    	; 0x29ca <ST7586_setDispPosition+0x8a>
    2960:	40 39       	cpi	r20, 0x90	; 144
    2962:	31 e0       	ldi	r19, 0x01	; 1
    2964:	53 07       	cpc	r21, r19
    2966:	88 f5       	brcc	.+98     	; 0x29ca <ST7586_setDispPosition+0x8a>
    2968:	69 3c       	cpi	r22, 0xC9	; 201
    296a:	78 f5       	brcc	.+94     	; 0x29ca <ST7586_setDispPosition+0x8a>
    296c:	29 3c       	cpi	r18, 0xC9	; 201
    296e:	68 f5       	brcc	.+90     	; 0x29ca <ST7586_setDispPosition+0x8a>
    2970:	48 17       	cp	r20, r24
    2972:	59 07       	cpc	r21, r25
    2974:	50 f1       	brcs	.+84     	; 0x29ca <ST7586_setDispPosition+0x8a>
    2976:	26 17       	cp	r18, r22
    2978:	40 f1       	brcs	.+80     	; 0x29ca <ST7586_setDispPosition+0x8a>
    297a:	c2 2e       	mov	r12, r18
    297c:	7a 01       	movw	r14, r20
    297e:	d6 2e       	mov	r13, r22
    2980:	8c 01       	movw	r16, r24
    2982:	8a e2       	ldi	r24, 0x2A	; 42
    2984:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
    2988:	19 82       	std	Y+1, r1	; 0x01
    298a:	98 01       	movw	r18, r16
    298c:	ab ea       	ldi	r26, 0xAB	; 171
    298e:	ba ea       	ldi	r27, 0xAA	; 170
    2990:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <__umulhisi3>
    2994:	96 95       	lsr	r25
    2996:	87 95       	ror	r24
    2998:	8a 83       	std	Y+2, r24	; 0x02
    299a:	1b 82       	std	Y+3, r1	; 0x03
    299c:	97 01       	movw	r18, r14
    299e:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <__umulhisi3>
    29a2:	96 95       	lsr	r25
    29a4:	87 95       	ror	r24
    29a6:	8c 83       	std	Y+4, r24	; 0x04
    29a8:	64 e0       	ldi	r22, 0x04	; 4
    29aa:	ce 01       	movw	r24, r28
    29ac:	01 96       	adiw	r24, 0x01	; 1
    29ae:	0e 94 63 14 	call	0x28c6	; 0x28c6 <ST7586_data>
    29b2:	8b e2       	ldi	r24, 0x2B	; 43
    29b4:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
    29b8:	19 82       	std	Y+1, r1	; 0x01
    29ba:	da 82       	std	Y+2, r13	; 0x02
    29bc:	1b 82       	std	Y+3, r1	; 0x03
    29be:	cc 82       	std	Y+4, r12	; 0x04
    29c0:	64 e0       	ldi	r22, 0x04	; 4
    29c2:	ce 01       	movw	r24, r28
    29c4:	01 96       	adiw	r24, 0x01	; 1
    29c6:	0e 94 63 14 	call	0x28c6	; 0x28c6 <ST7586_data>
    29ca:	24 96       	adiw	r28, 0x04	; 4
    29cc:	cd bf       	out	0x3d, r28	; 61
    29ce:	de bf       	out	0x3e, r29	; 62
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	1f 91       	pop	r17
    29d6:	0f 91       	pop	r16
    29d8:	ff 90       	pop	r15
    29da:	ef 90       	pop	r14
    29dc:	df 90       	pop	r13
    29de:	cf 90       	pop	r12
    29e0:	08 95       	ret

000029e2 <ST7586_fill>:
    29e2:	1f 93       	push	r17
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
    29ec:	c5 58       	subi	r28, 0x85	; 133
    29ee:	d1 09       	sbc	r29, r1
    29f0:	cd bf       	out	0x3d, r28	; 61
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	0f c0       	rjmp	.+30     	; 0x2a16 <ST7586_fill+0x34>
    29f8:	29 2f       	mov	r18, r25
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	e8 2f       	mov	r30, r24
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	ea 50       	subi	r30, 0x0A	; 10
    2a02:	fc 4d       	sbci	r31, 0xDC	; 220
    2a04:	e4 91       	lpm	r30, Z
    2a06:	a1 e0       	ldi	r26, 0x01	; 1
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	ac 0f       	add	r26, r28
    2a0c:	bd 1f       	adc	r27, r29
    2a0e:	a2 0f       	add	r26, r18
    2a10:	b3 1f       	adc	r27, r19
    2a12:	ec 93       	st	X, r30
    2a14:	9f 5f       	subi	r25, 0xFF	; 255
    2a16:	95 38       	cpi	r25, 0x85	; 133
    2a18:	78 f3       	brcs	.-34     	; 0x29f8 <ST7586_fill+0x16>
    2a1a:	27 ec       	ldi	r18, 0xC7	; 199
    2a1c:	4f e8       	ldi	r20, 0x8F	; 143
    2a1e:	51 e0       	ldi	r21, 0x01	; 1
    2a20:	60 e0       	ldi	r22, 0x00	; 0
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	0e 94 a0 14 	call	0x2940	; 0x2940 <ST7586_setDispPosition>
    2a2a:	8c e2       	ldi	r24, 0x2C	; 44
    2a2c:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
    2a30:	10 e0       	ldi	r17, 0x00	; 0
    2a32:	06 c0       	rjmp	.+12     	; 0x2a40 <ST7586_fill+0x5e>
    2a34:	65 e8       	ldi	r22, 0x85	; 133
    2a36:	ce 01       	movw	r24, r28
    2a38:	01 96       	adiw	r24, 0x01	; 1
    2a3a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <ST7586_data>
    2a3e:	1f 5f       	subi	r17, 0xFF	; 255
    2a40:	18 3c       	cpi	r17, 0xC8	; 200
    2a42:	c0 f3       	brcs	.-16     	; 0x2a34 <ST7586_fill+0x52>
    2a44:	cb 57       	subi	r28, 0x7B	; 123
    2a46:	df 4f       	sbci	r29, 0xFF	; 255
    2a48:	cd bf       	out	0x3d, r28	; 61
    2a4a:	de bf       	out	0x3e, r29	; 62
    2a4c:	df 91       	pop	r29
    2a4e:	cf 91       	pop	r28
    2a50:	1f 91       	pop	r17
    2a52:	08 95       	ret

00002a54 <ST7586_init>:
    2a54:	0f 93       	push	r16
    2a56:	1f 93       	push	r17
    2a58:	cf 93       	push	r28
    2a5a:	df 93       	push	r29
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <ST7586_init+0xa>
    2a5e:	00 d0       	rcall	.+0      	; 0x2a60 <ST7586_init+0xc>
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	18 2f       	mov	r17, r24
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	80 93 ee 40 	sts	0x40EE, r24	; 0x8040ee <dataSerial+0x2>
    2a6c:	e4 e0       	ldi	r30, 0x04	; 4
    2a6e:	f4 e0       	ldi	r31, 0x04	; 4
    2a70:	80 81       	ld	r24, Z
    2a72:	80 68       	ori	r24, 0x80	; 128
    2a74:	80 83       	st	Z, r24
    2a76:	e0 e2       	ldi	r30, 0x20	; 32
    2a78:	f4 e0       	ldi	r31, 0x04	; 4
    2a7a:	84 81       	ldd	r24, Z+4	; 0x04
    2a7c:	80 61       	ori	r24, 0x10	; 16
    2a7e:	84 83       	std	Z+4, r24	; 0x04
    2a80:	e0 e4       	ldi	r30, 0x40	; 64
    2a82:	f4 e0       	ldi	r31, 0x04	; 4
    2a84:	84 81       	ldd	r24, Z+4	; 0x04
    2a86:	80 62       	ori	r24, 0x20	; 32
    2a88:	84 83       	std	Z+4, r24	; 0x04
    2a8a:	8f e2       	ldi	r24, 0x2F	; 47
    2a8c:	95 e7       	ldi	r25, 0x75	; 117
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	f1 f7       	brne	.-4      	; 0x2a8e <ST7586_init+0x3a>
    2a92:	00 c0       	rjmp	.+0      	; 0x2a94 <ST7586_init+0x40>
    2a94:	00 00       	nop
    2a96:	84 81       	ldd	r24, Z+4	; 0x04
    2a98:	8f 7d       	andi	r24, 0xDF	; 223
    2a9a:	84 83       	std	Z+4, r24	; 0x04
    2a9c:	90 ea       	ldi	r25, 0xA0	; 160
    2a9e:	9a 95       	dec	r25
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <ST7586_init+0x4a>
    2aa2:	84 81       	ldd	r24, Z+4	; 0x04
    2aa4:	80 62       	ori	r24, 0x20	; 32
    2aa6:	84 83       	std	Z+4, r24	; 0x04
    2aa8:	2f ef       	ldi	r18, 0xFF	; 255
    2aaa:	89 ec       	ldi	r24, 0xC9	; 201
    2aac:	98 e0       	ldi	r25, 0x08	; 8
    2aae:	21 50       	subi	r18, 0x01	; 1
    2ab0:	80 40       	sbci	r24, 0x00	; 0
    2ab2:	90 40       	sbci	r25, 0x00	; 0
    2ab4:	e1 f7       	brne	.-8      	; 0x2aae <ST7586_init+0x5a>
    2ab6:	00 c0       	rjmp	.+0      	; 0x2ab8 <ST7586_init+0x64>
    2ab8:	00 00       	nop
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
    2ac0:	2f ef       	ldi	r18, 0xFF	; 255
    2ac2:	89 ec       	ldi	r24, 0xC9	; 201
    2ac4:	98 e0       	ldi	r25, 0x08	; 8
    2ac6:	21 50       	subi	r18, 0x01	; 1
    2ac8:	80 40       	sbci	r24, 0x00	; 0
    2aca:	90 40       	sbci	r25, 0x00	; 0
    2acc:	e1 f7       	brne	.-8      	; 0x2ac6 <ST7586_init+0x72>
    2ace:	00 c0       	rjmp	.+0      	; 0x2ad0 <ST7586_init+0x7c>
    2ad0:	00 00       	nop
    2ad2:	81 e1       	ldi	r24, 0x11	; 17
    2ad4:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
    2ad8:	88 e2       	ldi	r24, 0x28	; 40
    2ada:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
    2ade:	80 ec       	ldi	r24, 0xC0	; 192
    2ae0:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
    2ae4:	90 91 07 40 	lds	r25, 0x4007	; 0x804007 <display_vop>
    2ae8:	80 91 08 40 	lds	r24, 0x4008	; 0x804008 <display_vop+0x1>
    2aec:	99 83       	std	Y+1, r25	; 0x01
    2aee:	8a 83       	std	Y+2, r24	; 0x02
    2af0:	62 e0       	ldi	r22, 0x02	; 2
    2af2:	ce 01       	movw	r24, r28
    2af4:	01 96       	adiw	r24, 0x01	; 1
    2af6:	0e 94 63 14 	call	0x28c6	; 0x28c6 <ST7586_data>
    2afa:	83 ec       	ldi	r24, 0xC3	; 195
    2afc:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
    2b00:	05 e0       	ldi	r16, 0x05	; 5
    2b02:	09 83       	std	Y+1, r16	; 0x01
    2b04:	61 e0       	ldi	r22, 0x01	; 1
    2b06:	ce 01       	movw	r24, r28
    2b08:	01 96       	adiw	r24, 0x01	; 1
    2b0a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <ST7586_data>
    2b0e:	84 ec       	ldi	r24, 0xC4	; 196
    2b10:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
    2b14:	09 83       	std	Y+1, r16	; 0x01
    2b16:	61 e0       	ldi	r22, 0x01	; 1
    2b18:	ce 01       	movw	r24, r28
    2b1a:	01 96       	adiw	r24, 0x01	; 1
    2b1c:	0e 94 63 14 	call	0x28c6	; 0x28c6 <ST7586_data>
    2b20:	80 ed       	ldi	r24, 0xD0	; 208
    2b22:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
    2b26:	81 ed       	ldi	r24, 0xD1	; 209
    2b28:	89 83       	std	Y+1, r24	; 0x01
    2b2a:	61 e0       	ldi	r22, 0x01	; 1
    2b2c:	ce 01       	movw	r24, r28
    2b2e:	01 96       	adiw	r24, 0x01	; 1
    2b30:	0e 94 63 14 	call	0x28c6	; 0x28c6 <ST7586_data>
    2b34:	83 eb       	ldi	r24, 0xB3	; 179
    2b36:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
    2b3a:	19 82       	std	Y+1, r1	; 0x01
    2b3c:	61 e0       	ldi	r22, 0x01	; 1
    2b3e:	ce 01       	movw	r24, r28
    2b40:	01 96       	adiw	r24, 0x01	; 1
    2b42:	0e 94 63 14 	call	0x28c6	; 0x28c6 <ST7586_data>
    2b46:	85 eb       	ldi	r24, 0xB5	; 181
    2b48:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
    2b4c:	8b e8       	ldi	r24, 0x8B	; 139
    2b4e:	89 83       	std	Y+1, r24	; 0x01
    2b50:	61 e0       	ldi	r22, 0x01	; 1
    2b52:	ce 01       	movw	r24, r28
    2b54:	01 96       	adiw	r24, 0x01	; 1
    2b56:	0e 94 63 14 	call	0x28c6	; 0x28c6 <ST7586_data>
    2b5a:	81 2f       	mov	r24, r17
    2b5c:	88 63       	ori	r24, 0x38	; 56
    2b5e:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
    2b62:	8a e3       	ldi	r24, 0x3A	; 58
    2b64:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
    2b68:	82 e0       	ldi	r24, 0x02	; 2
    2b6a:	89 83       	std	Y+1, r24	; 0x01
    2b6c:	61 e0       	ldi	r22, 0x01	; 1
    2b6e:	ce 01       	movw	r24, r28
    2b70:	01 96       	adiw	r24, 0x01	; 1
    2b72:	0e 94 63 14 	call	0x28c6	; 0x28c6 <ST7586_data>
    2b76:	86 e3       	ldi	r24, 0x36	; 54
    2b78:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
    2b7c:	19 82       	std	Y+1, r1	; 0x01
    2b7e:	61 e0       	ldi	r22, 0x01	; 1
    2b80:	ce 01       	movw	r24, r28
    2b82:	01 96       	adiw	r24, 0x01	; 1
    2b84:	0e 94 63 14 	call	0x28c6	; 0x28c6 <ST7586_data>
    2b88:	80 eb       	ldi	r24, 0xB0	; 176
    2b8a:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
    2b8e:	8f e9       	ldi	r24, 0x9F	; 159
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	61 e0       	ldi	r22, 0x01	; 1
    2b94:	ce 01       	movw	r24, r28
    2b96:	01 96       	adiw	r24, 0x01	; 1
    2b98:	0e 94 63 14 	call	0x28c6	; 0x28c6 <ST7586_data>
    2b9c:	81 2f       	mov	r24, r17
    2b9e:	80 6f       	ori	r24, 0xF0	; 240
    2ba0:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
    2ba4:	82 e1       	ldi	r24, 0x12	; 18
    2ba6:	89 83       	std	Y+1, r24	; 0x01
    2ba8:	8b 83       	std	Y+3, r24	; 0x03
    2baa:	8c 83       	std	Y+4, r24	; 0x04
    2bac:	8d 83       	std	Y+5, r24	; 0x05
    2bae:	64 e0       	ldi	r22, 0x04	; 4
    2bb0:	ce 01       	movw	r24, r28
    2bb2:	01 96       	adiw	r24, 0x01	; 1
    2bb4:	0e 94 63 14 	call	0x28c6	; 0x28c6 <ST7586_data>
    2bb8:	80 e2       	ldi	r24, 0x20	; 32
    2bba:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
    2bbe:	89 e2       	ldi	r24, 0x29	; 41
    2bc0:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <ST7586_fill>
    2bca:	24 96       	adiw	r28, 0x04	; 4
    2bcc:	cd bf       	out	0x3d, r28	; 61
    2bce:	de bf       	out	0x3e, r29	; 62
    2bd0:	df 91       	pop	r29
    2bd2:	cf 91       	pop	r28
    2bd4:	1f 91       	pop	r17
    2bd6:	0f 91       	pop	r16
    2bd8:	08 95       	ret

00002bda <TCA0_PWM_init>:
void TCA0_PWM_init(void)
{
	//sei();
	/*		FIRST PWM on PA0 PIN		*/
	// Direction set and set output to high
	PORTA.DIR |= (1 << 0);
    2bda:	a0 e0       	ldi	r26, 0x00	; 0
    2bdc:	b4 e0       	ldi	r27, 0x04	; 4
    2bde:	8c 91       	ld	r24, X
    2be0:	81 60       	ori	r24, 0x01	; 1
    2be2:	8c 93       	st	X, r24
	PORTA.PIN0CTRL |= (1 << 3);
    2be4:	50 96       	adiw	r26, 0x10	; 16
    2be6:	8c 91       	ld	r24, X
    2be8:	50 97       	sbiw	r26, 0x10	; 16
    2bea:	88 60       	ori	r24, 0x08	; 8
    2bec:	50 96       	adiw	r26, 0x10	; 16
    2bee:	8c 93       	st	X, r24
    2bf0:	50 97       	sbiw	r26, 0x10	; 16
	
	//PORTA.OUTSET |= (1 << 0);
	TCA0.SINGLE.PER = 3000;     // calculation for 1ms
    2bf2:	e0 e0       	ldi	r30, 0x00	; 0
    2bf4:	fa e0       	ldi	r31, 0x0A	; 10
    2bf6:	88 eb       	ldi	r24, 0xB8	; 184
    2bf8:	9b e0       	ldi	r25, 0x0B	; 11
    2bfa:	86 a3       	std	Z+38, r24	; 0x26
    2bfc:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.CMP0 = dutyCycle1;
    2bfe:	80 91 05 40 	lds	r24, 0x4005	; 0x804005 <dutyCycle1>
    2c02:	90 91 06 40 	lds	r25, 0x4006	; 0x804006 <dutyCycle1+0x1>
    2c06:	80 a7       	std	Z+40, r24	; 0x28
    2c08:	91 a7       	std	Z+41, r25	; 0x29
	TCA0.SINGLE.CNT = 0;
    2c0a:	10 a2       	std	Z+32, r1	; 0x20
    2c0c:	11 a2       	std	Z+33, r1	; 0x21

	
	TCA0.SINGLE.CTRLB |= (1 << 4); // compare 0 enable
    2c0e:	81 81       	ldd	r24, Z+1	; 0x01
    2c10:	80 61       	ori	r24, 0x10	; 16
    2c12:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SINGLE.CTRLB |= (0x3 << 0); // Single slope PWM
    2c14:	81 81       	ldd	r24, Z+1	; 0x01
    2c16:	83 60       	ori	r24, 0x03	; 3
    2c18:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SINGLE.CTRLA |= (1<<0); //fclk_per 1 and  Enable pwm
    2c1a:	80 81       	ld	r24, Z
    2c1c:	81 60       	ori	r24, 0x01	; 1
    2c1e:	80 83       	st	Z, r24
	TCA0.SINGLE.CTRLA |= ((1<<1)|(1<<2)); //fclk_per 8 and  Enable pwm
    2c20:	80 81       	ld	r24, Z
    2c22:	86 60       	ori	r24, 0x06	; 6
    2c24:	80 83       	st	Z, r24
	
	/*		Second PWM on PA1 PIN		*/
	
	PORTA.DIR |= (1 << 1);						// Direction set and set output to high
    2c26:	8c 91       	ld	r24, X
    2c28:	82 60       	ori	r24, 0x02	; 2
    2c2a:	8c 93       	st	X, r24
	PORTA.PIN1CTRL |= (1 << 3);
    2c2c:	51 96       	adiw	r26, 0x11	; 17
    2c2e:	8c 91       	ld	r24, X
    2c30:	51 97       	sbiw	r26, 0x11	; 17
    2c32:	88 60       	ori	r24, 0x08	; 8
    2c34:	51 96       	adiw	r26, 0x11	; 17
    2c36:	8c 93       	st	X, r24
	TCA0.SINGLE.CTRLB |= (1 << 5);				// Enable Compare Pa1
    2c38:	81 81       	ldd	r24, Z+1	; 0x01
    2c3a:	80 62       	ori	r24, 0x20	; 32
    2c3c:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SINGLE.CTRLA |= (1 << 1);				// Enable PWM PA1
    2c3e:	80 81       	ld	r24, Z
    2c40:	82 60       	ori	r24, 0x02	; 2
    2c42:	80 83       	st	Z, r24
	TCA0.SINGLE.CMP1 = dutyCycle2;					// Duty cycle
    2c44:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <dutyCycle2>
    2c48:	90 91 04 40 	lds	r25, 0x4004	; 0x804004 <dutyCycle2+0x1>
    2c4c:	82 a7       	std	Z+42, r24	; 0x2a
    2c4e:	93 a7       	std	Z+43, r25	; 0x2b
    2c50:	08 95       	ret

00002c52 <ST7586_send_data>:
	ST7586_send_data(_data, array_length);
	//	USART1_sendString("set pixel");
}

void ST7586_send_data(uint8_t data[], uint8_t dataSize)
{
    2c52:	0f 93       	push	r16
    2c54:	1f 93       	push	r17
    2c56:	cf 93       	push	r28
    2c58:	df 93       	push	r29
    2c5a:	8c 01       	movw	r16, r24
    2c5c:	d6 2f       	mov	r29, r22
	
	ST7586_CSLOW();
    2c5e:	e4 e0       	ldi	r30, 0x04	; 4
    2c60:	f4 e0       	ldi	r31, 0x04	; 4
    2c62:	80 81       	ld	r24, Z
    2c64:	8f 77       	andi	r24, 0x7F	; 127
    2c66:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < dataSize; i++)
    2c68:	c0 e0       	ldi	r28, 0x00	; 0
    2c6a:	07 c0       	rjmp	.+14     	; 0x2c7a <ST7586_send_data+0x28>
	{
		ST7586_SERIALW(data[i]);
    2c6c:	f8 01       	movw	r30, r16
    2c6e:	ec 0f       	add	r30, r28
    2c70:	f1 1d       	adc	r31, r1
    2c72:	80 81       	ld	r24, Z
    2c74:	0e 94 62 13 	call	0x26c4	; 0x26c4 <SPI_0_send_char>

void ST7586_send_data(uint8_t data[], uint8_t dataSize)
{
	
	ST7586_CSLOW();
	for (uint8_t i = 0; i < dataSize; i++)
    2c78:	cf 5f       	subi	r28, 0xFF	; 255
    2c7a:	cd 17       	cp	r28, r29
    2c7c:	b8 f3       	brcs	.-18     	; 0x2c6c <ST7586_send_data+0x1a>
	{
		ST7586_SERIALW(data[i]);
	}
	ST7586_CSHIGH();
    2c7e:	e4 e0       	ldi	r30, 0x04	; 4
    2c80:	f4 e0       	ldi	r31, 0x04	; 4
    2c82:	80 81       	ld	r24, Z
    2c84:	80 68       	ori	r24, 0x80	; 128
    2c86:	80 83       	st	Z, r24
}
    2c88:	df 91       	pop	r29
    2c8a:	cf 91       	pop	r28
    2c8c:	1f 91       	pop	r17
    2c8e:	0f 91       	pop	r16
    2c90:	08 95       	ret

00002c92 <__set_pixel>:
	TCA0.SINGLE.CMP1 = dutyCycle2;					// Duty cycle

}

void __set_pixel (int x1, int y1, int x2, bool color, uint8_t _data[], int array_length)		// with x2,y2 will not be limited as it is not creating any hindrence
{
    2c92:	af 92       	push	r10
    2c94:	bf 92       	push	r11
    2c96:	cf 92       	push	r12
    2c98:	df 92       	push	r13
    2c9a:	ef 92       	push	r14
    2c9c:	ff 92       	push	r15
    2c9e:	0f 93       	push	r16
    2ca0:	1f 93       	push	r17
    2ca2:	cf 93       	push	r28
    2ca4:	df 93       	push	r29
    2ca6:	00 d0       	rcall	.+0      	; 0x2ca8 <__set_pixel+0x16>
    2ca8:	00 d0       	rcall	.+0      	; 0x2caa <__set_pixel+0x18>
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
    2cae:	5c 01       	movw	r10, r24
    2cb0:	f6 2e       	mov	r15, r22
    2cb2:	6a 01       	movw	r12, r20
	uint8_t tempArgs[4];
	//uint8_t _data[3] = {0xC0, 0xF2, 0xDC};
	ST7586_cmd(SETCOLUMNADDRESS);	// Set Column Address
    2cb4:	8a e2       	ldi	r24, 0x2A	; 42
    2cb6:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
	// Stupid display addressing. Why requiring two bytes, when the max value is 127 for columns / 160 for rows???
	tempArgs[0] = 0;
    2cba:	19 82       	std	Y+1, r1	; 0x01
	tempArgs[1] = x1/3;
    2cbc:	23 e0       	ldi	r18, 0x03	; 3
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	c5 01       	movw	r24, r10
    2cc2:	b9 01       	movw	r22, r18
    2cc4:	0e 94 ae 1c 	call	0x395c	; 0x395c <__divmodhi4>
    2cc8:	6a 83       	std	Y+2, r22	; 0x02
	tempArgs[2] = 0;
    2cca:	1b 82       	std	Y+3, r1	; 0x03
	tempArgs[3] = x2/3;
    2ccc:	c6 01       	movw	r24, r12
    2cce:	b9 01       	movw	r22, r18
    2cd0:	0e 94 ae 1c 	call	0x395c	; 0x395c <__divmodhi4>
    2cd4:	6c 83       	std	Y+4, r22	; 0x04
	ST7586_send_data(tempArgs, 4);
    2cd6:	64 e0       	ldi	r22, 0x04	; 4
    2cd8:	ce 01       	movw	r24, r28
    2cda:	01 96       	adiw	r24, 0x01	; 1
    2cdc:	0e 94 29 16 	call	0x2c52	; 0x2c52 <ST7586_send_data>
	ST7586_cmd(SETROWADDRESS);		// Set Row Address
    2ce0:	8b e2       	ldi	r24, 0x2B	; 43
    2ce2:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
	tempArgs[0] = 0;
    2ce6:	19 82       	std	Y+1, r1	; 0x01
	tempArgs[1] = y1;
    2ce8:	fa 82       	std	Y+2, r15	; 0x02
	tempArgs[2] = 0;
    2cea:	1b 82       	std	Y+3, r1	; 0x03
	tempArgs[3] = 159;
    2cec:	8f e9       	ldi	r24, 0x9F	; 159
    2cee:	8c 83       	std	Y+4, r24	; 0x04
	ST7586_send_data(tempArgs, 4);
    2cf0:	64 e0       	ldi	r22, 0x04	; 4
    2cf2:	ce 01       	movw	r24, r28
    2cf4:	01 96       	adiw	r24, 0x01	; 1
    2cf6:	0e 94 29 16 	call	0x2c52	; 0x2c52 <ST7586_send_data>
	ST7586_cmd(WRITEDISPLAYDATA);
    2cfa:	8c e2       	ldi	r24, 0x2C	; 44
    2cfc:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
	ST7586_send_data(_data, array_length);
    2d00:	6e 2d       	mov	r22, r14
    2d02:	c8 01       	movw	r24, r16
    2d04:	0e 94 29 16 	call	0x2c52	; 0x2c52 <ST7586_send_data>
	//	USART1_sendString("set pixel");
}
    2d08:	24 96       	adiw	r28, 0x04	; 4
    2d0a:	cd bf       	out	0x3d, r28	; 61
    2d0c:	de bf       	out	0x3e, r29	; 62
    2d0e:	df 91       	pop	r29
    2d10:	cf 91       	pop	r28
    2d12:	1f 91       	pop	r17
    2d14:	0f 91       	pop	r16
    2d16:	ff 90       	pop	r15
    2d18:	ef 90       	pop	r14
    2d1a:	df 90       	pop	r13
    2d1c:	cf 90       	pop	r12
    2d1e:	bf 90       	pop	r11
    2d20:	af 90       	pop	r10
    2d22:	08 95       	ret

00002d24 <_print_icon>:
		ST7586_SERIALW(data[i]);
	}
	ST7586_CSHIGH();
}
void _print_icon(int x1, int y1, int x2, uint8_t *font, uint8_t height , uint8_t width)		//function to print array of uint_8 of any no. of elements, by giving x1,y1,x2,y2
{																							//width should be a multiple of 8 and the icon should also be generated with the width as multiple of 8(GLCD fount creator) but this length could be limited my reducing the x2 as the multiple of 3
    2d24:	2f 92       	push	r2
    2d26:	3f 92       	push	r3
    2d28:	4f 92       	push	r4
    2d2a:	5f 92       	push	r5
    2d2c:	6f 92       	push	r6
    2d2e:	7f 92       	push	r7
    2d30:	8f 92       	push	r8
    2d32:	9f 92       	push	r9
    2d34:	af 92       	push	r10
    2d36:	bf 92       	push	r11
    2d38:	cf 92       	push	r12
    2d3a:	df 92       	push	r13
    2d3c:	ef 92       	push	r14
    2d3e:	ff 92       	push	r15
    2d40:	0f 93       	push	r16
    2d42:	1f 93       	push	r17
    2d44:	cf 93       	push	r28
    2d46:	df 93       	push	r29
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
    2d4c:	28 97       	sbiw	r28, 0x08	; 8
    2d4e:	cd bf       	out	0x3d, r28	; 61
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	89 83       	std	Y+1, r24	; 0x01
    2d54:	9a 83       	std	Y+2, r25	; 0x02
    2d56:	4b 83       	std	Y+3, r20	; 0x03
    2d58:	5c 83       	std	Y+4, r21	; 0x04
    2d5a:	39 01       	movw	r6, r18
			}
		}
		__set_pixel(x1, (_length+y1), x2, 1, &_buff[0], buff_length);
		i=0;
	}
}
    2d5c:	8d b7       	in	r24, 0x3d	; 61
    2d5e:	9e b7       	in	r25, 0x3e	; 62
    2d60:	8f 83       	std	Y+7, r24	; 0x07
    2d62:	98 87       	std	Y+8, r25	; 0x08
	}
	ST7586_CSHIGH();
}
void _print_icon(int x1, int y1, int x2, uint8_t *font, uint8_t height , uint8_t width)		//function to print array of uint_8 of any no. of elements, by giving x1,y1,x2,y2
{																							//width should be a multiple of 8 and the icon should also be generated with the width as multiple of 8(GLCD fount creator) but this length could be limited my reducing the x2 as the multiple of 3
	int new_pos = 0, buff_length = (width*3);
    2d64:	8e 2d       	mov	r24, r14
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	2c 01       	movw	r4, r24
    2d6a:	44 0c       	add	r4, r4
    2d6c:	55 1c       	adc	r5, r5
    2d6e:	48 0e       	add	r4, r24
    2d70:	59 1e       	adc	r5, r25
	uint8_t array_data = 0;

	for(int _length = 0; _length < height; _length++)
    2d72:	21 2c       	mov	r2, r1
    2d74:	31 2c       	mov	r3, r1
	}
	ST7586_CSHIGH();
}
void _print_icon(int x1, int y1, int x2, uint8_t *font, uint8_t height , uint8_t width)		//function to print array of uint_8 of any no. of elements, by giving x1,y1,x2,y2
{																							//width should be a multiple of 8 and the icon should also be generated with the width as multiple of 8(GLCD fount creator) but this length could be limited my reducing the x2 as the multiple of 3
	int new_pos = 0, buff_length = (width*3);
    2d76:	c1 2c       	mov	r12, r1
    2d78:	d1 2c       	mov	r13, r1
    2d7a:	6d 83       	std	Y+5, r22	; 0x05
    2d7c:	7e 83       	std	Y+6, r23	; 0x06
    2d7e:	a0 2e       	mov	r10, r16
    2d80:	be 2c       	mov	r11, r14
	uint8_t array_data = 0;

	for(int _length = 0; _length < height; _length++)
    2d82:	5f c0       	rjmp	.+190    	; 0x2e42 <_print_icon+0x11e>
	{
    2d84:	8d b6       	in	r8, 0x3d	; 61
    2d86:	9e b6       	in	r9, 0x3e	; 62
		uint8_t _buff[buff_length];
    2d88:	8d b7       	in	r24, 0x3d	; 61
    2d8a:	9e b7       	in	r25, 0x3e	; 62
    2d8c:	84 19       	sub	r24, r4
    2d8e:	95 09       	sbc	r25, r5
    2d90:	8d bf       	out	0x3d, r24	; 61
    2d92:	9e bf       	out	0x3e, r25	; 62
    2d94:	0d b7       	in	r16, 0x3d	; 61
    2d96:	1e b7       	in	r17, 0x3e	; 62
    2d98:	0f 5f       	subi	r16, 0xFF	; 255
    2d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9c:	98 01       	movw	r18, r16
		for (int i = 0; i < buff_length; i++)			// to make the buff initialize with 0
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	05 c0       	rjmp	.+10     	; 0x2dae <_print_icon+0x8a>
		{
			_buff[i] = 0x00;
    2da4:	f9 01       	movw	r30, r18
    2da6:	e8 0f       	add	r30, r24
    2da8:	f9 1f       	adc	r31, r25
    2daa:	10 82       	st	Z, r1
	uint8_t array_data = 0;

	for(int _length = 0; _length < height; _length++)
	{
		uint8_t _buff[buff_length];
		for (int i = 0; i < buff_length; i++)			// to make the buff initialize with 0
    2dac:	01 96       	adiw	r24, 0x01	; 1
    2dae:	84 15       	cp	r24, r4
    2db0:	95 05       	cpc	r25, r5
    2db2:	c4 f3       	brlt	.-16     	; 0x2da4 <_print_icon+0x80>
    2db4:	40 e0       	ldi	r20, 0x00	; 0
    2db6:	50 e0       	ldi	r21, 0x00	; 0
    2db8:	60 e0       	ldi	r22, 0x00	; 0
    2dba:	70 e0       	ldi	r23, 0x00	; 0
    2dbc:	29 c0       	rjmp	.+82     	; 0x2e10 <_print_icon+0xec>
			_buff[i] = 0x00;
		}
		uint8_t i = 0, k = 0;
		for(int _width = 0; _width < (width/8); _width++)
		{
			array_data = pgm_read_byte(&(font[new_pos]));
    2dbe:	f3 01       	movw	r30, r6
    2dc0:	ec 0d       	add	r30, r12
    2dc2:	fd 1d       	adc	r31, r13
    2dc4:	e4 90       	lpm	r14, Z
			new_pos++;
    2dc6:	9f ef       	ldi	r25, 0xFF	; 255
    2dc8:	c9 1a       	sub	r12, r25
    2dca:	d9 0a       	sbc	r13, r25
			for (int j = 7; j >= 0; j--)
    2dcc:	87 e0       	ldi	r24, 0x07	; 7
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	1b c0       	rjmp	.+54     	; 0x2e08 <_print_icon+0xe4>
			{
				if (array_data & (1<<j))
    2dd2:	ee 2d       	mov	r30, r14
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	08 2e       	mov	r0, r24
    2dd8:	02 c0       	rjmp	.+4      	; 0x2dde <_print_icon+0xba>
    2dda:	f5 95       	asr	r31
    2ddc:	e7 95       	ror	r30
    2dde:	0a 94       	dec	r0
    2de0:	e2 f7       	brpl	.-8      	; 0x2dda <_print_icon+0xb6>
    2de2:	e0 ff       	sbrs	r30, 0
    2de4:	0b c0       	rjmp	.+22     	; 0x2dfc <_print_icon+0xd8>
				{
					_buff[i] = _buff[i] | pre_def[k];
    2de6:	d9 01       	movw	r26, r18
    2de8:	a7 0f       	add	r26, r23
    2dea:	b1 1d       	adc	r27, r1
    2dec:	fc 90       	ld	r15, X
    2dee:	e6 2f       	mov	r30, r22
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	e0 50       	subi	r30, 0x00	; 0
    2df4:	f0 4c       	sbci	r31, 0xC0	; 192
    2df6:	e0 81       	ld	r30, Z
    2df8:	ef 29       	or	r30, r15
    2dfa:	ec 93       	st	X, r30
				}
				if(++k > 2)
    2dfc:	6f 5f       	subi	r22, 0xFF	; 255
    2dfe:	63 30       	cpi	r22, 0x03	; 3
    2e00:	10 f0       	brcs	.+4      	; 0x2e06 <_print_icon+0xe2>
				{
					k = 0;
					i++;
    2e02:	7f 5f       	subi	r23, 0xFF	; 255
				{
					_buff[i] = _buff[i] | pre_def[k];
				}
				if(++k > 2)
				{
					k = 0;
    2e04:	60 e0       	ldi	r22, 0x00	; 0
		uint8_t i = 0, k = 0;
		for(int _width = 0; _width < (width/8); _width++)
		{
			array_data = pgm_read_byte(&(font[new_pos]));
			new_pos++;
			for (int j = 7; j >= 0; j--)
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	99 23       	and	r25, r25
    2e0a:	1c f7       	brge	.-58     	; 0x2dd2 <_print_icon+0xae>
		for (int i = 0; i < buff_length; i++)			// to make the buff initialize with 0
		{
			_buff[i] = 0x00;
		}
		uint8_t i = 0, k = 0;
		for(int _width = 0; _width < (width/8); _width++)
    2e0c:	4f 5f       	subi	r20, 0xFF	; 255
    2e0e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e10:	8b 2d       	mov	r24, r11
    2e12:	86 95       	lsr	r24
    2e14:	86 95       	lsr	r24
    2e16:	86 95       	lsr	r24
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	48 17       	cp	r20, r24
    2e1c:	59 07       	cpc	r21, r25
    2e1e:	7c f2       	brlt	.-98     	; 0x2dbe <_print_icon+0x9a>
					k = 0;
					i++;
				}
			}
		}
		__set_pixel(x1, (_length+y1), x2, 1, &_buff[0], buff_length);
    2e20:	6d 81       	ldd	r22, Y+5	; 0x05
    2e22:	7e 81       	ldd	r23, Y+6	; 0x06
    2e24:	62 0d       	add	r22, r2
    2e26:	73 1d       	adc	r23, r3
    2e28:	72 01       	movw	r14, r4
    2e2a:	21 e0       	ldi	r18, 0x01	; 1
    2e2c:	4b 81       	ldd	r20, Y+3	; 0x03
    2e2e:	5c 81       	ldd	r21, Y+4	; 0x04
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	9a 81       	ldd	r25, Y+2	; 0x02
    2e34:	0e 94 49 16 	call	0x2c92	; 0x2c92 <__set_pixel>
    2e38:	8d be       	out	0x3d, r8	; 61
    2e3a:	9e be       	out	0x3e, r9	; 62
void _print_icon(int x1, int y1, int x2, uint8_t *font, uint8_t height , uint8_t width)		//function to print array of uint_8 of any no. of elements, by giving x1,y1,x2,y2
{																							//width should be a multiple of 8 and the icon should also be generated with the width as multiple of 8(GLCD fount creator) but this length could be limited my reducing the x2 as the multiple of 3
	int new_pos = 0, buff_length = (width*3);
	uint8_t array_data = 0;

	for(int _length = 0; _length < height; _length++)
    2e3c:	8f ef       	ldi	r24, 0xFF	; 255
    2e3e:	28 1a       	sub	r2, r24
    2e40:	38 0a       	sbc	r3, r24
    2e42:	8a 2d       	mov	r24, r10
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	28 16       	cp	r2, r24
    2e48:	39 06       	cpc	r3, r25
    2e4a:	0c f4       	brge	.+2      	; 0x2e4e <_print_icon+0x12a>
    2e4c:	9b cf       	rjmp	.-202    	; 0x2d84 <_print_icon+0x60>
			}
		}
		__set_pixel(x1, (_length+y1), x2, 1, &_buff[0], buff_length);
		i=0;
	}
}
    2e4e:	8f 81       	ldd	r24, Y+7	; 0x07
    2e50:	98 85       	ldd	r25, Y+8	; 0x08
    2e52:	8d bf       	out	0x3d, r24	; 61
    2e54:	9e bf       	out	0x3e, r25	; 62
    2e56:	28 96       	adiw	r28, 0x08	; 8
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	df 91       	pop	r29
    2e5e:	cf 91       	pop	r28
    2e60:	1f 91       	pop	r17
    2e62:	0f 91       	pop	r16
    2e64:	ff 90       	pop	r15
    2e66:	ef 90       	pop	r14
    2e68:	df 90       	pop	r13
    2e6a:	cf 90       	pop	r12
    2e6c:	bf 90       	pop	r11
    2e6e:	af 90       	pop	r10
    2e70:	9f 90       	pop	r9
    2e72:	8f 90       	pop	r8
    2e74:	7f 90       	pop	r7
    2e76:	6f 90       	pop	r6
    2e78:	5f 90       	pop	r5
    2e7a:	4f 90       	pop	r4
    2e7c:	3f 90       	pop	r3
    2e7e:	2f 90       	pop	r2
    2e80:	08 95       	ret

00002e82 <_set_pixel>:
		i=0;
	}

}
void _set_pixel (int x, int y, bool color, uint8_t _data[], int array_length)
{
    2e82:	cf 92       	push	r12
    2e84:	df 92       	push	r13
    2e86:	ef 92       	push	r14
    2e88:	ff 92       	push	r15
    2e8a:	0f 93       	push	r16
    2e8c:	1f 93       	push	r17
    2e8e:	cf 93       	push	r28
    2e90:	df 93       	push	r29
    2e92:	00 d0       	rcall	.+0      	; 0x2e94 <_set_pixel+0x12>
    2e94:	00 d0       	rcall	.+0      	; 0x2e96 <_set_pixel+0x14>
    2e96:	cd b7       	in	r28, 0x3d	; 61
    2e98:	de b7       	in	r29, 0x3e	; 62
    2e9a:	6c 01       	movw	r12, r24
    2e9c:	16 2f       	mov	r17, r22
    2e9e:	79 01       	movw	r14, r18
	uint8_t tempArgs[4];
	//uint8_t _data[3] = {0xC0, 0xF2, 0xDC};
	ST7586_cmd(SETCOLUMNADDRESS);	// Set Column Address
    2ea0:	8a e2       	ldi	r24, 0x2A	; 42
    2ea2:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
	// Stupid display addressing. Why requiring two bytes, when the max value is 127 for columns / 160 for rows???
	tempArgs[0] = 0;
    2ea6:	19 82       	std	Y+1, r1	; 0x01
	tempArgs[1] = x/3;
    2ea8:	c6 01       	movw	r24, r12
    2eaa:	63 e0       	ldi	r22, 0x03	; 3
    2eac:	70 e0       	ldi	r23, 0x00	; 0
    2eae:	0e 94 ae 1c 	call	0x395c	; 0x395c <__divmodhi4>
    2eb2:	6a 83       	std	Y+2, r22	; 0x02
	tempArgs[2] = 0;
    2eb4:	1b 82       	std	Y+3, r1	; 0x03
	tempArgs[3] = 128;
    2eb6:	80 e8       	ldi	r24, 0x80	; 128
    2eb8:	8c 83       	std	Y+4, r24	; 0x04
	ST7586_send_data(tempArgs, 4);
    2eba:	64 e0       	ldi	r22, 0x04	; 4
    2ebc:	ce 01       	movw	r24, r28
    2ebe:	01 96       	adiw	r24, 0x01	; 1
    2ec0:	0e 94 29 16 	call	0x2c52	; 0x2c52 <ST7586_send_data>
	ST7586_cmd(SETROWADDRESS);		// Set Row Address
    2ec4:	8b e2       	ldi	r24, 0x2B	; 43
    2ec6:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
	tempArgs[0] = 0;
    2eca:	19 82       	std	Y+1, r1	; 0x01
	tempArgs[1] = y;
    2ecc:	1a 83       	std	Y+2, r17	; 0x02
	tempArgs[2] = 0;
    2ece:	1b 82       	std	Y+3, r1	; 0x03
	tempArgs[3] = 159;
    2ed0:	8f e9       	ldi	r24, 0x9F	; 159
    2ed2:	8c 83       	std	Y+4, r24	; 0x04
	ST7586_send_data(tempArgs, 4);
    2ed4:	64 e0       	ldi	r22, 0x04	; 4
    2ed6:	ce 01       	movw	r24, r28
    2ed8:	01 96       	adiw	r24, 0x01	; 1
    2eda:	0e 94 29 16 	call	0x2c52	; 0x2c52 <ST7586_send_data>
	ST7586_cmd(WRITEDISPLAYDATA);
    2ede:	8c e2       	ldi	r24, 0x2C	; 44
    2ee0:	0e 94 83 14 	call	0x2906	; 0x2906 <ST7586_cmd>
	ST7586_send_data(_data, array_length);
    2ee4:	60 2f       	mov	r22, r16
    2ee6:	c7 01       	movw	r24, r14
    2ee8:	0e 94 29 16 	call	0x2c52	; 0x2c52 <ST7586_send_data>
	//	USART1_sendString("set pixel");
    2eec:	24 96       	adiw	r28, 0x04	; 4
    2eee:	cd bf       	out	0x3d, r28	; 61
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	1f 91       	pop	r17
    2ef8:	0f 91       	pop	r16
    2efa:	ff 90       	pop	r15
    2efc:	ef 90       	pop	r14
    2efe:	df 90       	pop	r13
    2f00:	cf 90       	pop	r12
    2f02:	08 95       	ret

00002f04 <print_bool>:
	print_bool(x+27, y, digit_b);
	print_bool(x+54, y, digit_c);
	
}
void print_bool(int x, int y, int n)
{
    2f04:	5f 92       	push	r5
    2f06:	6f 92       	push	r6
    2f08:	7f 92       	push	r7
    2f0a:	8f 92       	push	r8
    2f0c:	9f 92       	push	r9
    2f0e:	af 92       	push	r10
    2f10:	bf 92       	push	r11
    2f12:	cf 92       	push	r12
    2f14:	df 92       	push	r13
    2f16:	ef 92       	push	r14
    2f18:	ff 92       	push	r15
    2f1a:	0f 93       	push	r16
    2f1c:	1f 93       	push	r17
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
    2f26:	28 97       	sbiw	r28, 0x08	; 8
    2f28:	cd bf       	out	0x3d, r28	; 61
    2f2a:	de bf       	out	0x3e, r29	; 62
    2f2c:	3c 01       	movw	r6, r24
    2f2e:	4b 01       	movw	r8, r22
    2f30:	6a 01       	movw	r12, r20
	uint8_t height = 36, width = 24;
	int new_pos = 0;
	bool array_data = false;
	uint8_t i = 0, k = 0;

	for(int _length = 0; _length < height; _length++)
    2f32:	a1 2c       	mov	r10, r1
    2f34:	b1 2c       	mov	r11, r1
void print_bool(int x, int y, int n)
{
	uint8_t height = 36, width = 24;
	int new_pos = 0;
	bool array_data = false;
	uint8_t i = 0, k = 0;
    2f36:	51 2c       	mov	r5, r1
	
}
void print_bool(int x, int y, int n)
{
	uint8_t height = 36, width = 24;
	int new_pos = 0;
    2f38:	e1 2c       	mov	r14, r1
    2f3a:	f1 2c       	mov	r15, r1
	bool array_data = false;
	uint8_t i = 0, k = 0;

	for(int _length = 0; _length < height; _length++)
    2f3c:	46 c0       	rjmp	.+140    	; 0x2fca <print_bool+0xc6>
	{
		// 			USART1_sendString("length");
		// 			USART1_sendInt(_length);
		uint8_t _buff[8] = {0};
    2f3e:	fe 01       	movw	r30, r28
    2f40:	31 96       	adiw	r30, 0x01	; 1
    2f42:	88 e0       	ldi	r24, 0x08	; 8
    2f44:	df 01       	movw	r26, r30
    2f46:	1d 92       	st	X+, r1
    2f48:	8a 95       	dec	r24
    2f4a:	e9 f7       	brne	.-6      	; 0x2f46 <print_bool+0x42>
		for(int _width = 0; _width < width; _width++)
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	28 c0       	rjmp	.+80     	; 0x2fa4 <print_bool+0xa0>
			// 				USART1_sendString("width");
			// 				USART1_sendInt(_width);
			// 				USART1_sendString("pos");
			// 				USART1_sendInt(new_pos);
			
			array_data = pgm_read_byte(&(system24x36[n][new_pos]));
    2f54:	40 e6       	ldi	r20, 0x60	; 96
    2f56:	53 e0       	ldi	r21, 0x03	; 3
    2f58:	c4 9e       	mul	r12, r20
    2f5a:	f0 01       	movw	r30, r0
    2f5c:	c5 9e       	mul	r12, r21
    2f5e:	f0 0d       	add	r31, r0
    2f60:	d4 9e       	mul	r13, r20
    2f62:	f0 0d       	add	r31, r0
    2f64:	11 24       	eor	r1, r1
    2f66:	ee 0d       	add	r30, r14
    2f68:	ff 1d       	adc	r31, r15
    2f6a:	ea 5c       	subi	r30, 0xCA	; 202
    2f6c:	fd 4f       	sbci	r31, 0xFD	; 253
    2f6e:	e4 91       	lpm	r30, Z
			new_pos++;
    2f70:	bf ef       	ldi	r27, 0xFF	; 255
    2f72:	eb 1a       	sub	r14, r27
    2f74:	fb 0a       	sbc	r15, r27
			// 				USART1_sendString("data");
			// 				USART1_sendInt(array_data);
			if (array_data)
    2f76:	ee 23       	and	r30, r30
    2f78:	71 f0       	breq	.+28     	; 0x2f96 <print_bool+0x92>
			{
				_buff[i] = _buff[i] | pre_def[k];
    2f7a:	e1 e0       	ldi	r30, 0x01	; 1
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	ec 0f       	add	r30, r28
    2f80:	fd 1f       	adc	r31, r29
    2f82:	e3 0f       	add	r30, r19
    2f84:	f1 1d       	adc	r31, r1
    2f86:	40 81       	ld	r20, Z
    2f88:	a5 2d       	mov	r26, r5
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	a0 50       	subi	r26, 0x00	; 0
    2f8e:	b0 4c       	sbci	r27, 0xC0	; 192
    2f90:	2c 91       	ld	r18, X
    2f92:	24 2b       	or	r18, r20
    2f94:	20 83       	st	Z, r18
				// 					USART1_sendString("buff");
				// 					USART1_sendInt(_buff[i]);
			}
			if(++k > 2)
    2f96:	53 94       	inc	r5
    2f98:	22 e0       	ldi	r18, 0x02	; 2
    2f9a:	25 15       	cp	r18, r5
    2f9c:	10 f4       	brcc	.+4      	; 0x2fa2 <print_bool+0x9e>
			{
				k = 0;
				i++;
    2f9e:	3f 5f       	subi	r19, 0xFF	; 255
				// 					USART1_sendString("buff");
				// 					USART1_sendInt(_buff[i]);
			}
			if(++k > 2)
			{
				k = 0;
    2fa0:	51 2c       	mov	r5, r1
	for(int _length = 0; _length < height; _length++)
	{
		// 			USART1_sendString("length");
		// 			USART1_sendInt(_length);
		uint8_t _buff[8] = {0};
		for(int _width = 0; _width < width; _width++)
    2fa2:	01 96       	adiw	r24, 0x01	; 1
    2fa4:	88 31       	cpi	r24, 0x18	; 24
    2fa6:	91 05       	cpc	r25, r1
    2fa8:	ac f2       	brlt	.-86     	; 0x2f54 <print_bool+0x50>
				i++;
			}

		}
		
		_set_pixel(x, (_length+y) , 1, &_buff[0], 8);
    2faa:	b5 01       	movw	r22, r10
    2fac:	68 0d       	add	r22, r8
    2fae:	79 1d       	adc	r23, r9
    2fb0:	08 e0       	ldi	r16, 0x08	; 8
    2fb2:	10 e0       	ldi	r17, 0x00	; 0
    2fb4:	9e 01       	movw	r18, r28
    2fb6:	2f 5f       	subi	r18, 0xFF	; 255
    2fb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2fba:	41 e0       	ldi	r20, 0x01	; 1
    2fbc:	50 e0       	ldi	r21, 0x00	; 0
    2fbe:	c3 01       	movw	r24, r6
    2fc0:	0e 94 41 17 	call	0x2e82	; 0x2e82 <_set_pixel>
	uint8_t height = 36, width = 24;
	int new_pos = 0;
	bool array_data = false;
	uint8_t i = 0, k = 0;

	for(int _length = 0; _length < height; _length++)
    2fc4:	8f ef       	ldi	r24, 0xFF	; 255
    2fc6:	a8 1a       	sub	r10, r24
    2fc8:	b8 0a       	sbc	r11, r24
    2fca:	a4 e2       	ldi	r26, 0x24	; 36
    2fcc:	aa 16       	cp	r10, r26
    2fce:	b1 04       	cpc	r11, r1
    2fd0:	0c f4       	brge	.+2      	; 0x2fd4 <print_bool+0xd0>
    2fd2:	b5 cf       	rjmp	.-150    	; 0x2f3e <print_bool+0x3a>
		
		_set_pixel(x, (_length+y) , 1, &_buff[0], 8);
		i=0;
	}

}
    2fd4:	28 96       	adiw	r28, 0x08	; 8
    2fd6:	cd bf       	out	0x3d, r28	; 61
    2fd8:	de bf       	out	0x3e, r29	; 62
    2fda:	df 91       	pop	r29
    2fdc:	cf 91       	pop	r28
    2fde:	1f 91       	pop	r17
    2fe0:	0f 91       	pop	r16
    2fe2:	ff 90       	pop	r15
    2fe4:	ef 90       	pop	r14
    2fe6:	df 90       	pop	r13
    2fe8:	cf 90       	pop	r12
    2fea:	bf 90       	pop	r11
    2fec:	af 90       	pop	r10
    2fee:	9f 90       	pop	r9
    2ff0:	8f 90       	pop	r8
    2ff2:	7f 90       	pop	r7
    2ff4:	6f 90       	pop	r6
    2ff6:	5f 90       	pop	r5
    2ff8:	08 95       	ret

00002ffa <show_mmgh_3digit>:
		i=0;
	}
}

void show_mmgh_3digit (int x, int y)
{
    2ffa:	af 92       	push	r10
    2ffc:	bf 92       	push	r11
    2ffe:	cf 92       	push	r12
    3000:	df 92       	push	r13
    3002:	ef 92       	push	r14
    3004:	ff 92       	push	r15
    3006:	0f 93       	push	r16
    3008:	1f 93       	push	r17
    300a:	cf 93       	push	r28
    300c:	df 93       	push	r29
    300e:	8c 01       	movw	r16, r24
    3010:	7b 01       	movw	r14, r22
	int buff =(int)final_pressure;
    3012:	60 91 b6 40 	lds	r22, 0x40B6	; 0x8040b6 <__data_end>
    3016:	70 91 b7 40 	lds	r23, 0x40B7	; 0x8040b7 <__data_end+0x1>
    301a:	80 91 b8 40 	lds	r24, 0x40B8	; 0x8040b8 <__data_end+0x2>
    301e:	90 91 b9 40 	lds	r25, 0x40B9	; 0x8040b9 <__data_end+0x3>
    3022:	0e 94 cf 19 	call	0x339e	; 0x339e <__fixsfsi>
    3026:	eb 01       	movw	r28, r22
	uint8_t digit = 0, digit_a = 0, digit_b = 0, digit_c = 0;
	if (buff > 999)
    3028:	c8 3e       	cpi	r28, 0xE8	; 232
    302a:	83 e0       	ldi	r24, 0x03	; 3
    302c:	d8 07       	cpc	r29, r24
    302e:	64 f0       	brlt	.+24     	; 0x3048 <show_mmgh_3digit+0x4e>
	{
		USART1_sendString("pressure digit overflow!!");
    3030:	8b e9       	ldi	r24, 0x9B	; 155
    3032:	90 e4       	ldi	r25, 0x40	; 64
    3034:	0e 94 18 13 	call	0x2630	; 0x2630 <USART1_sendString>
		final_pressure = 0;
    3038:	10 92 b6 40 	sts	0x40B6, r1	; 0x8040b6 <__data_end>
    303c:	10 92 b7 40 	sts	0x40B7, r1	; 0x8040b7 <__data_end+0x1>
    3040:	10 92 b8 40 	sts	0x40B8, r1	; 0x8040b8 <__data_end+0x2>
    3044:	10 92 b9 40 	sts	0x40B9, r1	; 0x8040b9 <__data_end+0x3>
	}
	digit_c = buff%10;
    3048:	2a e0       	ldi	r18, 0x0A	; 10
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	ce 01       	movw	r24, r28
    304e:	b9 01       	movw	r22, r18
    3050:	0e 94 ae 1c 	call	0x395c	; 0x395c <__divmodhi4>
    3054:	6c 01       	movw	r12, r24
	buff = buff/ 10;
	digit_b = buff%10;
    3056:	cb 01       	movw	r24, r22
    3058:	b9 01       	movw	r22, r18
    305a:	0e 94 ae 1c 	call	0x395c	; 0x395c <__divmodhi4>
    305e:	5c 01       	movw	r10, r24
	digit_a = buff/10;
    3060:	ce 01       	movw	r24, r28
    3062:	64 e6       	ldi	r22, 0x64	; 100
    3064:	70 e0       	ldi	r23, 0x00	; 0
    3066:	0e 94 ae 1c 	call	0x395c	; 0x395c <__divmodhi4>
	buff = 0;
	print_bool(x, y, digit_a);
    306a:	ab 01       	movw	r20, r22
    306c:	55 27       	eor	r21, r21
    306e:	b7 01       	movw	r22, r14
    3070:	c8 01       	movw	r24, r16
    3072:	0e 94 82 17 	call	0x2f04	; 0x2f04 <print_bool>
	print_bool(x+27, y, digit_b);
    3076:	a5 01       	movw	r20, r10
    3078:	55 27       	eor	r21, r21
    307a:	b7 01       	movw	r22, r14
    307c:	c8 01       	movw	r24, r16
    307e:	4b 96       	adiw	r24, 0x1b	; 27
    3080:	0e 94 82 17 	call	0x2f04	; 0x2f04 <print_bool>
	print_bool(x+54, y, digit_c);
    3084:	a6 01       	movw	r20, r12
    3086:	55 27       	eor	r21, r21
    3088:	b7 01       	movw	r22, r14
    308a:	c8 01       	movw	r24, r16
    308c:	c6 96       	adiw	r24, 0x36	; 54
    308e:	0e 94 82 17 	call	0x2f04	; 0x2f04 <print_bool>
	
}
    3092:	df 91       	pop	r29
    3094:	cf 91       	pop	r28
    3096:	1f 91       	pop	r17
    3098:	0f 91       	pop	r16
    309a:	ff 90       	pop	r15
    309c:	ef 90       	pop	r14
    309e:	df 90       	pop	r13
    30a0:	cf 90       	pop	r12
    30a2:	bf 90       	pop	r11
    30a4:	af 90       	pop	r10
    30a6:	08 95       	ret

000030a8 <main>:
void ST7586_send_data(uint8_t data[], uint8_t dataSize);



int main(void)
{   _PROTECTED_WRITE (CLKCTRL.OSCHFCTRLA, ((CLKCTRL_FREQSEL_24M_gc)|(CLKCTRL_AUTOTUNE_bm)));			//To increase clock freq
    30a8:	95 e2       	ldi	r25, 0x25	; 37
    30aa:	88 ed       	ldi	r24, 0xD8	; 216
    30ac:	84 bf       	out	0x34, r24	; 52
    30ae:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PORTB_DIR |= (1<<4);  // data/cmd
    30b2:	e0 e2       	ldi	r30, 0x20	; 32
    30b4:	f4 e0       	ldi	r31, 0x04	; 4
    30b6:	80 81       	ld	r24, Z
    30b8:	80 61       	ori	r24, 0x10	; 16
    30ba:	80 83       	st	Z, r24
	PORTC_DIR |= (1<<5); //Reset pin
    30bc:	e0 e4       	ldi	r30, 0x40	; 64
    30be:	f4 e0       	ldi	r31, 0x04	; 4
    30c0:	80 81       	ld	r24, Z
    30c2:	80 62       	ori	r24, 0x20	; 32
    30c4:	80 83       	st	Z, r24
	TCA0_PWM_init();
    30c6:	0e 94 ed 15 	call	0x2bda	; 0x2bda <TCA0_PWM_init>
	Sensor_init();
    30ca:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Sensor_init>
	USART1_init(9600);
    30ce:	80 e8       	ldi	r24, 0x80	; 128
    30d0:	95 e2       	ldi	r25, 0x25	; 37
    30d2:	0e 94 e6 12 	call	0x25cc	; 0x25cc <USART1_init>
	ADC0_init();
    30d6:	0e 94 49 14 	call	0x2892	; 0x2892 <ADC0_init>
	SPI_0_init();
    30da:	0e 94 43 13 	call	0x2686	; 0x2686 <SPI_0_init>
	ST7586_init(1);
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <ST7586_init>
	_print_icon(80,10,32,battery_SOC4_15x32,15,32);
    30e4:	68 94       	set
    30e6:	ee 24       	eor	r14, r14
    30e8:	e5 f8       	bld	r14, 5
    30ea:	f1 2c       	mov	r15, r1
    30ec:	0f e0       	ldi	r16, 0x0F	; 15
    30ee:	10 e0       	ldi	r17, 0x00	; 0
    30f0:	2a ef       	ldi	r18, 0xFA	; 250
    30f2:	31 e0       	ldi	r19, 0x01	; 1
    30f4:	40 e2       	ldi	r20, 0x20	; 32
    30f6:	50 e0       	ldi	r21, 0x00	; 0
    30f8:	6a e0       	ldi	r22, 0x0A	; 10
    30fa:	70 e0       	ldi	r23, 0x00	; 0
    30fc:	80 e5       	ldi	r24, 0x50	; 80
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	0e 94 92 16 	call	0x2d24	; 0x2d24 <_print_icon>
	_print_icon(230,40,48,mmhg_icon_24x48,24,48);
    3104:	0f 2e       	mov	r0, r31
    3106:	f0 e3       	ldi	r31, 0x30	; 48
    3108:	ef 2e       	mov	r14, r31
    310a:	f1 2c       	mov	r15, r1
    310c:	f0 2d       	mov	r31, r0
    310e:	08 e1       	ldi	r16, 0x18	; 24
    3110:	10 e0       	ldi	r17, 0x00	; 0
    3112:	2a e6       	ldi	r18, 0x6A	; 106
    3114:	31 e0       	ldi	r19, 0x01	; 1
    3116:	40 e3       	ldi	r20, 0x30	; 48
    3118:	50 e0       	ldi	r21, 0x00	; 0
    311a:	68 e2       	ldi	r22, 0x28	; 40
    311c:	70 e0       	ldi	r23, 0x00	; 0
    311e:	86 ee       	ldi	r24, 0xE6	; 230
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	0e 94 92 16 	call	0x2d24	; 0x2d24 <_print_icon>
	//ST7586_fill(ST7586_COLOR_BLACK);
	while (1)
	{   uint8_t i = 200;
		float pressure = 0.0;
    3126:	c1 2c       	mov	r12, r1
    3128:	d1 2c       	mov	r13, r1
    312a:	76 01       	movw	r14, r12
	ST7586_init(1);
	_print_icon(80,10,32,battery_SOC4_15x32,15,32);
	_print_icon(230,40,48,mmhg_icon_24x48,24,48);
	//ST7586_fill(ST7586_COLOR_BLACK);
	while (1)
	{   uint8_t i = 200;
    312c:	c8 ec       	ldi	r28, 0xC8	; 200
		float pressure = 0.0;
		
		while(i)
    312e:	11 c0       	rjmp	.+34     	; 0x3152 <main+0xaa>
		{
			pressure = pressure + pressureRead();
    3130:	0e 94 fd 13 	call	0x27fa	; 0x27fa <pressureRead>
    3134:	9b 01       	movw	r18, r22
    3136:	ac 01       	movw	r20, r24
    3138:	c7 01       	movw	r24, r14
    313a:	b6 01       	movw	r22, r12
    313c:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
    3140:	6b 01       	movw	r12, r22
    3142:	7c 01       	movw	r14, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3144:	8f e6       	ldi	r24, 0x6F	; 111
    3146:	97 e1       	ldi	r25, 0x17	; 23
    3148:	01 97       	sbiw	r24, 0x01	; 1
    314a:	f1 f7       	brne	.-4      	; 0x3148 <main+0xa0>
    314c:	00 c0       	rjmp	.+0      	; 0x314e <main+0xa6>
    314e:	00 00       	nop
			_delay_us(1000);
			i--;
    3150:	c1 50       	subi	r28, 0x01	; 1
	//ST7586_fill(ST7586_COLOR_BLACK);
	while (1)
	{   uint8_t i = 200;
		float pressure = 0.0;
		
		while(i)
    3152:	c1 11       	cpse	r28, r1
    3154:	ed cf       	rjmp	.-38     	; 0x3130 <main+0x88>
		{
			pressure = pressure + pressureRead();
			_delay_us(1000);
			i--;
		}
	final_pressure = ((pressure/200)*51.7149); //final pressure in mmHg
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	48 e4       	ldi	r20, 0x48	; 72
    315c:	53 e4       	ldi	r21, 0x43	; 67
    315e:	c7 01       	movw	r24, r14
    3160:	b6 01       	movw	r22, r12
    3162:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__divsf3>
    3166:	2f e0       	ldi	r18, 0x0F	; 15
    3168:	3c ed       	ldi	r19, 0xDC	; 220
    316a:	4e e4       	ldi	r20, 0x4E	; 78
    316c:	52 e4       	ldi	r21, 0x42	; 66
    316e:	0e 94 bc 1a 	call	0x3578	; 0x3578 <__mulsf3>
    3172:	60 93 b6 40 	sts	0x40B6, r22	; 0x8040b6 <__data_end>
    3176:	70 93 b7 40 	sts	0x40B7, r23	; 0x8040b7 <__data_end+0x1>
    317a:	80 93 b8 40 	sts	0x40B8, r24	; 0x8040b8 <__data_end+0x2>
    317e:	90 93 b9 40 	sts	0x40B9, r25	; 0x8040b9 <__data_end+0x3>
	USART1_sendFloat(final_pressure,2);
    3182:	42 e0       	ldi	r20, 0x02	; 2
    3184:	50 e0       	ldi	r21, 0x00	; 0
    3186:	0e 94 39 13 	call	0x2672	; 0x2672 <USART1_sendFloat>
	
	int count = 0;
	count = ADC0_read(channel_1);
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	0e 94 56 14 	call	0x28ac	; 0x28ac <ADC0_read>
	
	dutyCycle1 = 0.3663004*count + 1500;
    3190:	bc 01       	movw	r22, r24
    3192:	99 0f       	add	r25, r25
    3194:	88 0b       	sbc	r24, r24
    3196:	99 0b       	sbc	r25, r25
    3198:	0e 94 07 1a 	call	0x340e	; 0x340e <__floatsisf>
    319c:	2a eb       	ldi	r18, 0xBA	; 186
    319e:	3b e8       	ldi	r19, 0x8B	; 139
    31a0:	4b eb       	ldi	r20, 0xBB	; 187
    31a2:	5e e3       	ldi	r21, 0x3E	; 62
    31a4:	0e 94 bc 1a 	call	0x3578	; 0x3578 <__mulsf3>
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	30 e8       	ldi	r19, 0x80	; 128
    31ac:	4b eb       	ldi	r20, 0xBB	; 187
    31ae:	54 e4       	ldi	r21, 0x44	; 68
    31b0:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
    31b4:	0e 94 cf 19 	call	0x339e	; 0x339e <__fixsfsi>
    31b8:	60 93 05 40 	sts	0x4005, r22	; 0x804005 <dutyCycle1>
    31bc:	70 93 06 40 	sts	0x4006, r23	; 0x804006 <dutyCycle1+0x1>
	TCA0.SINGLE.CMP0 = dutyCycle1;
    31c0:	60 93 28 0a 	sts	0x0A28, r22	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7e0a28>
    31c4:	70 93 29 0a 	sts	0x0A29, r23	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7e0a29>
	show_mmgh_3digit(150,80);	
    31c8:	60 e5       	ldi	r22, 0x50	; 80
    31ca:	70 e0       	ldi	r23, 0x00	; 0
    31cc:	86 e9       	ldi	r24, 0x96	; 150
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <show_mmgh_3digit>
	}
    31d4:	a8 cf       	rjmp	.-176    	; 0x3126 <main+0x7e>

000031d6 <__subsf3>:
    31d6:	50 58       	subi	r21, 0x80	; 128

000031d8 <__addsf3>:
    31d8:	bb 27       	eor	r27, r27
    31da:	aa 27       	eor	r26, r26
    31dc:	0e 94 03 19 	call	0x3206	; 0x3206 <__addsf3x>
    31e0:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__fp_round>
    31e4:	0e 94 6f 1a 	call	0x34de	; 0x34de <__fp_pscA>
    31e8:	38 f0       	brcs	.+14     	; 0x31f8 <__addsf3+0x20>
    31ea:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__fp_pscB>
    31ee:	20 f0       	brcs	.+8      	; 0x31f8 <__addsf3+0x20>
    31f0:	39 f4       	brne	.+14     	; 0x3200 <__addsf3+0x28>
    31f2:	9f 3f       	cpi	r25, 0xFF	; 255
    31f4:	19 f4       	brne	.+6      	; 0x31fc <__addsf3+0x24>
    31f6:	26 f4       	brtc	.+8      	; 0x3200 <__addsf3+0x28>
    31f8:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__fp_nan>
    31fc:	0e f4       	brtc	.+2      	; 0x3200 <__addsf3+0x28>
    31fe:	e0 95       	com	r30
    3200:	e7 fb       	bst	r30, 7
    3202:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__fp_inf>

00003206 <__addsf3x>:
    3206:	e9 2f       	mov	r30, r25
    3208:	0e 94 8e 1a 	call	0x351c	; 0x351c <__fp_split3>
    320c:	58 f3       	brcs	.-42     	; 0x31e4 <__addsf3+0xc>
    320e:	ba 17       	cp	r27, r26
    3210:	62 07       	cpc	r22, r18
    3212:	73 07       	cpc	r23, r19
    3214:	84 07       	cpc	r24, r20
    3216:	95 07       	cpc	r25, r21
    3218:	20 f0       	brcs	.+8      	; 0x3222 <__addsf3x+0x1c>
    321a:	79 f4       	brne	.+30     	; 0x323a <__addsf3x+0x34>
    321c:	a6 f5       	brtc	.+104    	; 0x3286 <__addsf3x+0x80>
    321e:	0c 94 b0 1a 	jmp	0x3560	; 0x3560 <__fp_zero>
    3222:	0e f4       	brtc	.+2      	; 0x3226 <__addsf3x+0x20>
    3224:	e0 95       	com	r30
    3226:	0b 2e       	mov	r0, r27
    3228:	ba 2f       	mov	r27, r26
    322a:	a0 2d       	mov	r26, r0
    322c:	0b 01       	movw	r0, r22
    322e:	b9 01       	movw	r22, r18
    3230:	90 01       	movw	r18, r0
    3232:	0c 01       	movw	r0, r24
    3234:	ca 01       	movw	r24, r20
    3236:	a0 01       	movw	r20, r0
    3238:	11 24       	eor	r1, r1
    323a:	ff 27       	eor	r31, r31
    323c:	59 1b       	sub	r21, r25
    323e:	99 f0       	breq	.+38     	; 0x3266 <__addsf3x+0x60>
    3240:	59 3f       	cpi	r21, 0xF9	; 249
    3242:	50 f4       	brcc	.+20     	; 0x3258 <__addsf3x+0x52>
    3244:	50 3e       	cpi	r21, 0xE0	; 224
    3246:	68 f1       	brcs	.+90     	; 0x32a2 <__addsf3x+0x9c>
    3248:	1a 16       	cp	r1, r26
    324a:	f0 40       	sbci	r31, 0x00	; 0
    324c:	a2 2f       	mov	r26, r18
    324e:	23 2f       	mov	r18, r19
    3250:	34 2f       	mov	r19, r20
    3252:	44 27       	eor	r20, r20
    3254:	58 5f       	subi	r21, 0xF8	; 248
    3256:	f3 cf       	rjmp	.-26     	; 0x323e <__addsf3x+0x38>
    3258:	46 95       	lsr	r20
    325a:	37 95       	ror	r19
    325c:	27 95       	ror	r18
    325e:	a7 95       	ror	r26
    3260:	f0 40       	sbci	r31, 0x00	; 0
    3262:	53 95       	inc	r21
    3264:	c9 f7       	brne	.-14     	; 0x3258 <__addsf3x+0x52>
    3266:	7e f4       	brtc	.+30     	; 0x3286 <__addsf3x+0x80>
    3268:	1f 16       	cp	r1, r31
    326a:	ba 0b       	sbc	r27, r26
    326c:	62 0b       	sbc	r22, r18
    326e:	73 0b       	sbc	r23, r19
    3270:	84 0b       	sbc	r24, r20
    3272:	ba f0       	brmi	.+46     	; 0x32a2 <__addsf3x+0x9c>
    3274:	91 50       	subi	r25, 0x01	; 1
    3276:	a1 f0       	breq	.+40     	; 0x32a0 <__addsf3x+0x9a>
    3278:	ff 0f       	add	r31, r31
    327a:	bb 1f       	adc	r27, r27
    327c:	66 1f       	adc	r22, r22
    327e:	77 1f       	adc	r23, r23
    3280:	88 1f       	adc	r24, r24
    3282:	c2 f7       	brpl	.-16     	; 0x3274 <__addsf3x+0x6e>
    3284:	0e c0       	rjmp	.+28     	; 0x32a2 <__addsf3x+0x9c>
    3286:	ba 0f       	add	r27, r26
    3288:	62 1f       	adc	r22, r18
    328a:	73 1f       	adc	r23, r19
    328c:	84 1f       	adc	r24, r20
    328e:	48 f4       	brcc	.+18     	; 0x32a2 <__addsf3x+0x9c>
    3290:	87 95       	ror	r24
    3292:	77 95       	ror	r23
    3294:	67 95       	ror	r22
    3296:	b7 95       	ror	r27
    3298:	f7 95       	ror	r31
    329a:	9e 3f       	cpi	r25, 0xFE	; 254
    329c:	08 f0       	brcs	.+2      	; 0x32a0 <__addsf3x+0x9a>
    329e:	b0 cf       	rjmp	.-160    	; 0x3200 <__addsf3+0x28>
    32a0:	93 95       	inc	r25
    32a2:	88 0f       	add	r24, r24
    32a4:	08 f0       	brcs	.+2      	; 0x32a8 <__addsf3x+0xa2>
    32a6:	99 27       	eor	r25, r25
    32a8:	ee 0f       	add	r30, r30
    32aa:	97 95       	ror	r25
    32ac:	87 95       	ror	r24
    32ae:	08 95       	ret

000032b0 <__cmpsf2>:
    32b0:	0e 94 42 1a 	call	0x3484	; 0x3484 <__fp_cmp>
    32b4:	08 f4       	brcc	.+2      	; 0x32b8 <__cmpsf2+0x8>
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	08 95       	ret

000032ba <__divsf3>:
    32ba:	0e 94 71 19 	call	0x32e2	; 0x32e2 <__divsf3x>
    32be:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__fp_round>
    32c2:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__fp_pscB>
    32c6:	58 f0       	brcs	.+22     	; 0x32de <__divsf3+0x24>
    32c8:	0e 94 6f 1a 	call	0x34de	; 0x34de <__fp_pscA>
    32cc:	40 f0       	brcs	.+16     	; 0x32de <__divsf3+0x24>
    32ce:	29 f4       	brne	.+10     	; 0x32da <__divsf3+0x20>
    32d0:	5f 3f       	cpi	r21, 0xFF	; 255
    32d2:	29 f0       	breq	.+10     	; 0x32de <__divsf3+0x24>
    32d4:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__fp_inf>
    32d8:	51 11       	cpse	r21, r1
    32da:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__fp_szero>
    32de:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__fp_nan>

000032e2 <__divsf3x>:
    32e2:	0e 94 8e 1a 	call	0x351c	; 0x351c <__fp_split3>
    32e6:	68 f3       	brcs	.-38     	; 0x32c2 <__divsf3+0x8>

000032e8 <__divsf3_pse>:
    32e8:	99 23       	and	r25, r25
    32ea:	b1 f3       	breq	.-20     	; 0x32d8 <__divsf3+0x1e>
    32ec:	55 23       	and	r21, r21
    32ee:	91 f3       	breq	.-28     	; 0x32d4 <__divsf3+0x1a>
    32f0:	95 1b       	sub	r25, r21
    32f2:	55 0b       	sbc	r21, r21
    32f4:	bb 27       	eor	r27, r27
    32f6:	aa 27       	eor	r26, r26
    32f8:	62 17       	cp	r22, r18
    32fa:	73 07       	cpc	r23, r19
    32fc:	84 07       	cpc	r24, r20
    32fe:	38 f0       	brcs	.+14     	; 0x330e <__divsf3_pse+0x26>
    3300:	9f 5f       	subi	r25, 0xFF	; 255
    3302:	5f 4f       	sbci	r21, 0xFF	; 255
    3304:	22 0f       	add	r18, r18
    3306:	33 1f       	adc	r19, r19
    3308:	44 1f       	adc	r20, r20
    330a:	aa 1f       	adc	r26, r26
    330c:	a9 f3       	breq	.-22     	; 0x32f8 <__divsf3_pse+0x10>
    330e:	35 d0       	rcall	.+106    	; 0x337a <__divsf3_pse+0x92>
    3310:	0e 2e       	mov	r0, r30
    3312:	3a f0       	brmi	.+14     	; 0x3322 <__divsf3_pse+0x3a>
    3314:	e0 e8       	ldi	r30, 0x80	; 128
    3316:	32 d0       	rcall	.+100    	; 0x337c <__divsf3_pse+0x94>
    3318:	91 50       	subi	r25, 0x01	; 1
    331a:	50 40       	sbci	r21, 0x00	; 0
    331c:	e6 95       	lsr	r30
    331e:	00 1c       	adc	r0, r0
    3320:	ca f7       	brpl	.-14     	; 0x3314 <__divsf3_pse+0x2c>
    3322:	2b d0       	rcall	.+86     	; 0x337a <__divsf3_pse+0x92>
    3324:	fe 2f       	mov	r31, r30
    3326:	29 d0       	rcall	.+82     	; 0x337a <__divsf3_pse+0x92>
    3328:	66 0f       	add	r22, r22
    332a:	77 1f       	adc	r23, r23
    332c:	88 1f       	adc	r24, r24
    332e:	bb 1f       	adc	r27, r27
    3330:	26 17       	cp	r18, r22
    3332:	37 07       	cpc	r19, r23
    3334:	48 07       	cpc	r20, r24
    3336:	ab 07       	cpc	r26, r27
    3338:	b0 e8       	ldi	r27, 0x80	; 128
    333a:	09 f0       	breq	.+2      	; 0x333e <__divsf3_pse+0x56>
    333c:	bb 0b       	sbc	r27, r27
    333e:	80 2d       	mov	r24, r0
    3340:	bf 01       	movw	r22, r30
    3342:	ff 27       	eor	r31, r31
    3344:	93 58       	subi	r25, 0x83	; 131
    3346:	5f 4f       	sbci	r21, 0xFF	; 255
    3348:	3a f0       	brmi	.+14     	; 0x3358 <__divsf3_pse+0x70>
    334a:	9e 3f       	cpi	r25, 0xFE	; 254
    334c:	51 05       	cpc	r21, r1
    334e:	78 f0       	brcs	.+30     	; 0x336e <__divsf3_pse+0x86>
    3350:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__fp_inf>
    3354:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__fp_szero>
    3358:	5f 3f       	cpi	r21, 0xFF	; 255
    335a:	e4 f3       	brlt	.-8      	; 0x3354 <__divsf3_pse+0x6c>
    335c:	98 3e       	cpi	r25, 0xE8	; 232
    335e:	d4 f3       	brlt	.-12     	; 0x3354 <__divsf3_pse+0x6c>
    3360:	86 95       	lsr	r24
    3362:	77 95       	ror	r23
    3364:	67 95       	ror	r22
    3366:	b7 95       	ror	r27
    3368:	f7 95       	ror	r31
    336a:	9f 5f       	subi	r25, 0xFF	; 255
    336c:	c9 f7       	brne	.-14     	; 0x3360 <__divsf3_pse+0x78>
    336e:	88 0f       	add	r24, r24
    3370:	91 1d       	adc	r25, r1
    3372:	96 95       	lsr	r25
    3374:	87 95       	ror	r24
    3376:	97 f9       	bld	r25, 7
    3378:	08 95       	ret
    337a:	e1 e0       	ldi	r30, 0x01	; 1
    337c:	66 0f       	add	r22, r22
    337e:	77 1f       	adc	r23, r23
    3380:	88 1f       	adc	r24, r24
    3382:	bb 1f       	adc	r27, r27
    3384:	62 17       	cp	r22, r18
    3386:	73 07       	cpc	r23, r19
    3388:	84 07       	cpc	r24, r20
    338a:	ba 07       	cpc	r27, r26
    338c:	20 f0       	brcs	.+8      	; 0x3396 <__divsf3_pse+0xae>
    338e:	62 1b       	sub	r22, r18
    3390:	73 0b       	sbc	r23, r19
    3392:	84 0b       	sbc	r24, r20
    3394:	ba 0b       	sbc	r27, r26
    3396:	ee 1f       	adc	r30, r30
    3398:	88 f7       	brcc	.-30     	; 0x337c <__divsf3_pse+0x94>
    339a:	e0 95       	com	r30
    339c:	08 95       	ret

0000339e <__fixsfsi>:
    339e:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__fixunssfsi>
    33a2:	68 94       	set
    33a4:	b1 11       	cpse	r27, r1
    33a6:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__fp_szero>
    33aa:	08 95       	ret

000033ac <__fixunssfsi>:
    33ac:	0e 94 96 1a 	call	0x352c	; 0x352c <__fp_splitA>
    33b0:	88 f0       	brcs	.+34     	; 0x33d4 <__fixunssfsi+0x28>
    33b2:	9f 57       	subi	r25, 0x7F	; 127
    33b4:	98 f0       	brcs	.+38     	; 0x33dc <__fixunssfsi+0x30>
    33b6:	b9 2f       	mov	r27, r25
    33b8:	99 27       	eor	r25, r25
    33ba:	b7 51       	subi	r27, 0x17	; 23
    33bc:	b0 f0       	brcs	.+44     	; 0x33ea <__fixunssfsi+0x3e>
    33be:	e1 f0       	breq	.+56     	; 0x33f8 <__fixunssfsi+0x4c>
    33c0:	66 0f       	add	r22, r22
    33c2:	77 1f       	adc	r23, r23
    33c4:	88 1f       	adc	r24, r24
    33c6:	99 1f       	adc	r25, r25
    33c8:	1a f0       	brmi	.+6      	; 0x33d0 <__fixunssfsi+0x24>
    33ca:	ba 95       	dec	r27
    33cc:	c9 f7       	brne	.-14     	; 0x33c0 <__fixunssfsi+0x14>
    33ce:	14 c0       	rjmp	.+40     	; 0x33f8 <__fixunssfsi+0x4c>
    33d0:	b1 30       	cpi	r27, 0x01	; 1
    33d2:	91 f0       	breq	.+36     	; 0x33f8 <__fixunssfsi+0x4c>
    33d4:	0e 94 b0 1a 	call	0x3560	; 0x3560 <__fp_zero>
    33d8:	b1 e0       	ldi	r27, 0x01	; 1
    33da:	08 95       	ret
    33dc:	0c 94 b0 1a 	jmp	0x3560	; 0x3560 <__fp_zero>
    33e0:	67 2f       	mov	r22, r23
    33e2:	78 2f       	mov	r23, r24
    33e4:	88 27       	eor	r24, r24
    33e6:	b8 5f       	subi	r27, 0xF8	; 248
    33e8:	39 f0       	breq	.+14     	; 0x33f8 <__fixunssfsi+0x4c>
    33ea:	b9 3f       	cpi	r27, 0xF9	; 249
    33ec:	cc f3       	brlt	.-14     	; 0x33e0 <__fixunssfsi+0x34>
    33ee:	86 95       	lsr	r24
    33f0:	77 95       	ror	r23
    33f2:	67 95       	ror	r22
    33f4:	b3 95       	inc	r27
    33f6:	d9 f7       	brne	.-10     	; 0x33ee <__fixunssfsi+0x42>
    33f8:	3e f4       	brtc	.+14     	; 0x3408 <__fixunssfsi+0x5c>
    33fa:	90 95       	com	r25
    33fc:	80 95       	com	r24
    33fe:	70 95       	com	r23
    3400:	61 95       	neg	r22
    3402:	7f 4f       	sbci	r23, 0xFF	; 255
    3404:	8f 4f       	sbci	r24, 0xFF	; 255
    3406:	9f 4f       	sbci	r25, 0xFF	; 255
    3408:	08 95       	ret

0000340a <__floatunsisf>:
    340a:	e8 94       	clt
    340c:	09 c0       	rjmp	.+18     	; 0x3420 <__floatsisf+0x12>

0000340e <__floatsisf>:
    340e:	97 fb       	bst	r25, 7
    3410:	3e f4       	brtc	.+14     	; 0x3420 <__floatsisf+0x12>
    3412:	90 95       	com	r25
    3414:	80 95       	com	r24
    3416:	70 95       	com	r23
    3418:	61 95       	neg	r22
    341a:	7f 4f       	sbci	r23, 0xFF	; 255
    341c:	8f 4f       	sbci	r24, 0xFF	; 255
    341e:	9f 4f       	sbci	r25, 0xFF	; 255
    3420:	99 23       	and	r25, r25
    3422:	a9 f0       	breq	.+42     	; 0x344e <__floatsisf+0x40>
    3424:	f9 2f       	mov	r31, r25
    3426:	96 e9       	ldi	r25, 0x96	; 150
    3428:	bb 27       	eor	r27, r27
    342a:	93 95       	inc	r25
    342c:	f6 95       	lsr	r31
    342e:	87 95       	ror	r24
    3430:	77 95       	ror	r23
    3432:	67 95       	ror	r22
    3434:	b7 95       	ror	r27
    3436:	f1 11       	cpse	r31, r1
    3438:	f8 cf       	rjmp	.-16     	; 0x342a <__floatsisf+0x1c>
    343a:	fa f4       	brpl	.+62     	; 0x347a <__floatsisf+0x6c>
    343c:	bb 0f       	add	r27, r27
    343e:	11 f4       	brne	.+4      	; 0x3444 <__floatsisf+0x36>
    3440:	60 ff       	sbrs	r22, 0
    3442:	1b c0       	rjmp	.+54     	; 0x347a <__floatsisf+0x6c>
    3444:	6f 5f       	subi	r22, 0xFF	; 255
    3446:	7f 4f       	sbci	r23, 0xFF	; 255
    3448:	8f 4f       	sbci	r24, 0xFF	; 255
    344a:	9f 4f       	sbci	r25, 0xFF	; 255
    344c:	16 c0       	rjmp	.+44     	; 0x347a <__floatsisf+0x6c>
    344e:	88 23       	and	r24, r24
    3450:	11 f0       	breq	.+4      	; 0x3456 <__floatsisf+0x48>
    3452:	96 e9       	ldi	r25, 0x96	; 150
    3454:	11 c0       	rjmp	.+34     	; 0x3478 <__floatsisf+0x6a>
    3456:	77 23       	and	r23, r23
    3458:	21 f0       	breq	.+8      	; 0x3462 <__floatsisf+0x54>
    345a:	9e e8       	ldi	r25, 0x8E	; 142
    345c:	87 2f       	mov	r24, r23
    345e:	76 2f       	mov	r23, r22
    3460:	05 c0       	rjmp	.+10     	; 0x346c <__floatsisf+0x5e>
    3462:	66 23       	and	r22, r22
    3464:	71 f0       	breq	.+28     	; 0x3482 <__floatsisf+0x74>
    3466:	96 e8       	ldi	r25, 0x86	; 134
    3468:	86 2f       	mov	r24, r22
    346a:	70 e0       	ldi	r23, 0x00	; 0
    346c:	60 e0       	ldi	r22, 0x00	; 0
    346e:	2a f0       	brmi	.+10     	; 0x347a <__floatsisf+0x6c>
    3470:	9a 95       	dec	r25
    3472:	66 0f       	add	r22, r22
    3474:	77 1f       	adc	r23, r23
    3476:	88 1f       	adc	r24, r24
    3478:	da f7       	brpl	.-10     	; 0x3470 <__floatsisf+0x62>
    347a:	88 0f       	add	r24, r24
    347c:	96 95       	lsr	r25
    347e:	87 95       	ror	r24
    3480:	97 f9       	bld	r25, 7
    3482:	08 95       	ret

00003484 <__fp_cmp>:
    3484:	99 0f       	add	r25, r25
    3486:	00 08       	sbc	r0, r0
    3488:	55 0f       	add	r21, r21
    348a:	aa 0b       	sbc	r26, r26
    348c:	e0 e8       	ldi	r30, 0x80	; 128
    348e:	fe ef       	ldi	r31, 0xFE	; 254
    3490:	16 16       	cp	r1, r22
    3492:	17 06       	cpc	r1, r23
    3494:	e8 07       	cpc	r30, r24
    3496:	f9 07       	cpc	r31, r25
    3498:	c0 f0       	brcs	.+48     	; 0x34ca <__fp_cmp+0x46>
    349a:	12 16       	cp	r1, r18
    349c:	13 06       	cpc	r1, r19
    349e:	e4 07       	cpc	r30, r20
    34a0:	f5 07       	cpc	r31, r21
    34a2:	98 f0       	brcs	.+38     	; 0x34ca <__fp_cmp+0x46>
    34a4:	62 1b       	sub	r22, r18
    34a6:	73 0b       	sbc	r23, r19
    34a8:	84 0b       	sbc	r24, r20
    34aa:	95 0b       	sbc	r25, r21
    34ac:	39 f4       	brne	.+14     	; 0x34bc <__fp_cmp+0x38>
    34ae:	0a 26       	eor	r0, r26
    34b0:	61 f0       	breq	.+24     	; 0x34ca <__fp_cmp+0x46>
    34b2:	23 2b       	or	r18, r19
    34b4:	24 2b       	or	r18, r20
    34b6:	25 2b       	or	r18, r21
    34b8:	21 f4       	brne	.+8      	; 0x34c2 <__fp_cmp+0x3e>
    34ba:	08 95       	ret
    34bc:	0a 26       	eor	r0, r26
    34be:	09 f4       	brne	.+2      	; 0x34c2 <__fp_cmp+0x3e>
    34c0:	a1 40       	sbci	r26, 0x01	; 1
    34c2:	a6 95       	lsr	r26
    34c4:	8f ef       	ldi	r24, 0xFF	; 255
    34c6:	81 1d       	adc	r24, r1
    34c8:	81 1d       	adc	r24, r1
    34ca:	08 95       	ret

000034cc <__fp_inf>:
    34cc:	97 f9       	bld	r25, 7
    34ce:	9f 67       	ori	r25, 0x7F	; 127
    34d0:	80 e8       	ldi	r24, 0x80	; 128
    34d2:	70 e0       	ldi	r23, 0x00	; 0
    34d4:	60 e0       	ldi	r22, 0x00	; 0
    34d6:	08 95       	ret

000034d8 <__fp_nan>:
    34d8:	9f ef       	ldi	r25, 0xFF	; 255
    34da:	80 ec       	ldi	r24, 0xC0	; 192
    34dc:	08 95       	ret

000034de <__fp_pscA>:
    34de:	00 24       	eor	r0, r0
    34e0:	0a 94       	dec	r0
    34e2:	16 16       	cp	r1, r22
    34e4:	17 06       	cpc	r1, r23
    34e6:	18 06       	cpc	r1, r24
    34e8:	09 06       	cpc	r0, r25
    34ea:	08 95       	ret

000034ec <__fp_pscB>:
    34ec:	00 24       	eor	r0, r0
    34ee:	0a 94       	dec	r0
    34f0:	12 16       	cp	r1, r18
    34f2:	13 06       	cpc	r1, r19
    34f4:	14 06       	cpc	r1, r20
    34f6:	05 06       	cpc	r0, r21
    34f8:	08 95       	ret

000034fa <__fp_round>:
    34fa:	09 2e       	mov	r0, r25
    34fc:	03 94       	inc	r0
    34fe:	00 0c       	add	r0, r0
    3500:	11 f4       	brne	.+4      	; 0x3506 <__fp_round+0xc>
    3502:	88 23       	and	r24, r24
    3504:	52 f0       	brmi	.+20     	; 0x351a <__fp_round+0x20>
    3506:	bb 0f       	add	r27, r27
    3508:	40 f4       	brcc	.+16     	; 0x351a <__fp_round+0x20>
    350a:	bf 2b       	or	r27, r31
    350c:	11 f4       	brne	.+4      	; 0x3512 <__fp_round+0x18>
    350e:	60 ff       	sbrs	r22, 0
    3510:	04 c0       	rjmp	.+8      	; 0x351a <__fp_round+0x20>
    3512:	6f 5f       	subi	r22, 0xFF	; 255
    3514:	7f 4f       	sbci	r23, 0xFF	; 255
    3516:	8f 4f       	sbci	r24, 0xFF	; 255
    3518:	9f 4f       	sbci	r25, 0xFF	; 255
    351a:	08 95       	ret

0000351c <__fp_split3>:
    351c:	57 fd       	sbrc	r21, 7
    351e:	90 58       	subi	r25, 0x80	; 128
    3520:	44 0f       	add	r20, r20
    3522:	55 1f       	adc	r21, r21
    3524:	59 f0       	breq	.+22     	; 0x353c <__fp_splitA+0x10>
    3526:	5f 3f       	cpi	r21, 0xFF	; 255
    3528:	71 f0       	breq	.+28     	; 0x3546 <__fp_splitA+0x1a>
    352a:	47 95       	ror	r20

0000352c <__fp_splitA>:
    352c:	88 0f       	add	r24, r24
    352e:	97 fb       	bst	r25, 7
    3530:	99 1f       	adc	r25, r25
    3532:	61 f0       	breq	.+24     	; 0x354c <__fp_splitA+0x20>
    3534:	9f 3f       	cpi	r25, 0xFF	; 255
    3536:	79 f0       	breq	.+30     	; 0x3556 <__fp_splitA+0x2a>
    3538:	87 95       	ror	r24
    353a:	08 95       	ret
    353c:	12 16       	cp	r1, r18
    353e:	13 06       	cpc	r1, r19
    3540:	14 06       	cpc	r1, r20
    3542:	55 1f       	adc	r21, r21
    3544:	f2 cf       	rjmp	.-28     	; 0x352a <__fp_split3+0xe>
    3546:	46 95       	lsr	r20
    3548:	f1 df       	rcall	.-30     	; 0x352c <__fp_splitA>
    354a:	08 c0       	rjmp	.+16     	; 0x355c <__fp_splitA+0x30>
    354c:	16 16       	cp	r1, r22
    354e:	17 06       	cpc	r1, r23
    3550:	18 06       	cpc	r1, r24
    3552:	99 1f       	adc	r25, r25
    3554:	f1 cf       	rjmp	.-30     	; 0x3538 <__fp_splitA+0xc>
    3556:	86 95       	lsr	r24
    3558:	71 05       	cpc	r23, r1
    355a:	61 05       	cpc	r22, r1
    355c:	08 94       	sec
    355e:	08 95       	ret

00003560 <__fp_zero>:
    3560:	e8 94       	clt

00003562 <__fp_szero>:
    3562:	bb 27       	eor	r27, r27
    3564:	66 27       	eor	r22, r22
    3566:	77 27       	eor	r23, r23
    3568:	cb 01       	movw	r24, r22
    356a:	97 f9       	bld	r25, 7
    356c:	08 95       	ret

0000356e <__gesf2>:
    356e:	0e 94 42 1a 	call	0x3484	; 0x3484 <__fp_cmp>
    3572:	08 f4       	brcc	.+2      	; 0x3576 <__gesf2+0x8>
    3574:	8f ef       	ldi	r24, 0xFF	; 255
    3576:	08 95       	ret

00003578 <__mulsf3>:
    3578:	0e 94 cf 1a 	call	0x359e	; 0x359e <__mulsf3x>
    357c:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__fp_round>
    3580:	0e 94 6f 1a 	call	0x34de	; 0x34de <__fp_pscA>
    3584:	38 f0       	brcs	.+14     	; 0x3594 <__mulsf3+0x1c>
    3586:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__fp_pscB>
    358a:	20 f0       	brcs	.+8      	; 0x3594 <__mulsf3+0x1c>
    358c:	95 23       	and	r25, r21
    358e:	11 f0       	breq	.+4      	; 0x3594 <__mulsf3+0x1c>
    3590:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__fp_inf>
    3594:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__fp_nan>
    3598:	11 24       	eor	r1, r1
    359a:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__fp_szero>

0000359e <__mulsf3x>:
    359e:	0e 94 8e 1a 	call	0x351c	; 0x351c <__fp_split3>
    35a2:	70 f3       	brcs	.-36     	; 0x3580 <__mulsf3+0x8>

000035a4 <__mulsf3_pse>:
    35a4:	95 9f       	mul	r25, r21
    35a6:	c1 f3       	breq	.-16     	; 0x3598 <__mulsf3+0x20>
    35a8:	95 0f       	add	r25, r21
    35aa:	50 e0       	ldi	r21, 0x00	; 0
    35ac:	55 1f       	adc	r21, r21
    35ae:	62 9f       	mul	r22, r18
    35b0:	f0 01       	movw	r30, r0
    35b2:	72 9f       	mul	r23, r18
    35b4:	bb 27       	eor	r27, r27
    35b6:	f0 0d       	add	r31, r0
    35b8:	b1 1d       	adc	r27, r1
    35ba:	63 9f       	mul	r22, r19
    35bc:	aa 27       	eor	r26, r26
    35be:	f0 0d       	add	r31, r0
    35c0:	b1 1d       	adc	r27, r1
    35c2:	aa 1f       	adc	r26, r26
    35c4:	64 9f       	mul	r22, r20
    35c6:	66 27       	eor	r22, r22
    35c8:	b0 0d       	add	r27, r0
    35ca:	a1 1d       	adc	r26, r1
    35cc:	66 1f       	adc	r22, r22
    35ce:	82 9f       	mul	r24, r18
    35d0:	22 27       	eor	r18, r18
    35d2:	b0 0d       	add	r27, r0
    35d4:	a1 1d       	adc	r26, r1
    35d6:	62 1f       	adc	r22, r18
    35d8:	73 9f       	mul	r23, r19
    35da:	b0 0d       	add	r27, r0
    35dc:	a1 1d       	adc	r26, r1
    35de:	62 1f       	adc	r22, r18
    35e0:	83 9f       	mul	r24, r19
    35e2:	a0 0d       	add	r26, r0
    35e4:	61 1d       	adc	r22, r1
    35e6:	22 1f       	adc	r18, r18
    35e8:	74 9f       	mul	r23, r20
    35ea:	33 27       	eor	r19, r19
    35ec:	a0 0d       	add	r26, r0
    35ee:	61 1d       	adc	r22, r1
    35f0:	23 1f       	adc	r18, r19
    35f2:	84 9f       	mul	r24, r20
    35f4:	60 0d       	add	r22, r0
    35f6:	21 1d       	adc	r18, r1
    35f8:	82 2f       	mov	r24, r18
    35fa:	76 2f       	mov	r23, r22
    35fc:	6a 2f       	mov	r22, r26
    35fe:	11 24       	eor	r1, r1
    3600:	9f 57       	subi	r25, 0x7F	; 127
    3602:	50 40       	sbci	r21, 0x00	; 0
    3604:	9a f0       	brmi	.+38     	; 0x362c <__mulsf3_pse+0x88>
    3606:	f1 f0       	breq	.+60     	; 0x3644 <__mulsf3_pse+0xa0>
    3608:	88 23       	and	r24, r24
    360a:	4a f0       	brmi	.+18     	; 0x361e <__mulsf3_pse+0x7a>
    360c:	ee 0f       	add	r30, r30
    360e:	ff 1f       	adc	r31, r31
    3610:	bb 1f       	adc	r27, r27
    3612:	66 1f       	adc	r22, r22
    3614:	77 1f       	adc	r23, r23
    3616:	88 1f       	adc	r24, r24
    3618:	91 50       	subi	r25, 0x01	; 1
    361a:	50 40       	sbci	r21, 0x00	; 0
    361c:	a9 f7       	brne	.-22     	; 0x3608 <__mulsf3_pse+0x64>
    361e:	9e 3f       	cpi	r25, 0xFE	; 254
    3620:	51 05       	cpc	r21, r1
    3622:	80 f0       	brcs	.+32     	; 0x3644 <__mulsf3_pse+0xa0>
    3624:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__fp_inf>
    3628:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__fp_szero>
    362c:	5f 3f       	cpi	r21, 0xFF	; 255
    362e:	e4 f3       	brlt	.-8      	; 0x3628 <__mulsf3_pse+0x84>
    3630:	98 3e       	cpi	r25, 0xE8	; 232
    3632:	d4 f3       	brlt	.-12     	; 0x3628 <__mulsf3_pse+0x84>
    3634:	86 95       	lsr	r24
    3636:	77 95       	ror	r23
    3638:	67 95       	ror	r22
    363a:	b7 95       	ror	r27
    363c:	f7 95       	ror	r31
    363e:	e7 95       	ror	r30
    3640:	9f 5f       	subi	r25, 0xFF	; 255
    3642:	c1 f7       	brne	.-16     	; 0x3634 <__mulsf3_pse+0x90>
    3644:	fe 2b       	or	r31, r30
    3646:	88 0f       	add	r24, r24
    3648:	91 1d       	adc	r25, r1
    364a:	96 95       	lsr	r25
    364c:	87 95       	ror	r24
    364e:	97 f9       	bld	r25, 7
    3650:	08 95       	ret

00003652 <pow>:
    3652:	fa 01       	movw	r30, r20
    3654:	ee 0f       	add	r30, r30
    3656:	ff 1f       	adc	r31, r31
    3658:	30 96       	adiw	r30, 0x00	; 0
    365a:	21 05       	cpc	r18, r1
    365c:	31 05       	cpc	r19, r1
    365e:	a1 f1       	breq	.+104    	; 0x36c8 <pow+0x76>
    3660:	61 15       	cp	r22, r1
    3662:	71 05       	cpc	r23, r1
    3664:	61 f4       	brne	.+24     	; 0x367e <pow+0x2c>
    3666:	80 38       	cpi	r24, 0x80	; 128
    3668:	bf e3       	ldi	r27, 0x3F	; 63
    366a:	9b 07       	cpc	r25, r27
    366c:	49 f1       	breq	.+82     	; 0x36c0 <pow+0x6e>
    366e:	68 94       	set
    3670:	90 38       	cpi	r25, 0x80	; 128
    3672:	81 05       	cpc	r24, r1
    3674:	61 f0       	breq	.+24     	; 0x368e <pow+0x3c>
    3676:	80 38       	cpi	r24, 0x80	; 128
    3678:	bf ef       	ldi	r27, 0xFF	; 255
    367a:	9b 07       	cpc	r25, r27
    367c:	41 f0       	breq	.+16     	; 0x368e <pow+0x3c>
    367e:	99 23       	and	r25, r25
    3680:	4a f5       	brpl	.+82     	; 0x36d4 <pow+0x82>
    3682:	ff 3f       	cpi	r31, 0xFF	; 255
    3684:	e1 05       	cpc	r30, r1
    3686:	31 05       	cpc	r19, r1
    3688:	21 05       	cpc	r18, r1
    368a:	19 f1       	breq	.+70     	; 0x36d2 <pow+0x80>
    368c:	e8 94       	clt
    368e:	08 94       	sec
    3690:	e7 95       	ror	r30
    3692:	d9 01       	movw	r26, r18
    3694:	aa 23       	and	r26, r26
    3696:	29 f4       	brne	.+10     	; 0x36a2 <pow+0x50>
    3698:	ab 2f       	mov	r26, r27
    369a:	be 2f       	mov	r27, r30
    369c:	f8 5f       	subi	r31, 0xF8	; 248
    369e:	d0 f3       	brcs	.-12     	; 0x3694 <pow+0x42>
    36a0:	10 c0       	rjmp	.+32     	; 0x36c2 <pow+0x70>
    36a2:	ff 5f       	subi	r31, 0xFF	; 255
    36a4:	70 f4       	brcc	.+28     	; 0x36c2 <pow+0x70>
    36a6:	a6 95       	lsr	r26
    36a8:	e0 f7       	brcc	.-8      	; 0x36a2 <pow+0x50>
    36aa:	f7 39       	cpi	r31, 0x97	; 151
    36ac:	50 f0       	brcs	.+20     	; 0x36c2 <pow+0x70>
    36ae:	19 f0       	breq	.+6      	; 0x36b6 <pow+0x64>
    36b0:	ff 3a       	cpi	r31, 0xAF	; 175
    36b2:	38 f4       	brcc	.+14     	; 0x36c2 <pow+0x70>
    36b4:	9f 77       	andi	r25, 0x7F	; 127
    36b6:	9f 93       	push	r25
    36b8:	0d d0       	rcall	.+26     	; 0x36d4 <pow+0x82>
    36ba:	0f 90       	pop	r0
    36bc:	07 fc       	sbrc	r0, 7
    36be:	90 58       	subi	r25, 0x80	; 128
    36c0:	08 95       	ret
    36c2:	46 f0       	brts	.+16     	; 0x36d4 <pow+0x82>
    36c4:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__fp_nan>
    36c8:	60 e0       	ldi	r22, 0x00	; 0
    36ca:	70 e0       	ldi	r23, 0x00	; 0
    36cc:	80 e8       	ldi	r24, 0x80	; 128
    36ce:	9f e3       	ldi	r25, 0x3F	; 63
    36d0:	08 95       	ret
    36d2:	4f e7       	ldi	r20, 0x7F	; 127
    36d4:	9f 77       	andi	r25, 0x7F	; 127
    36d6:	5f 93       	push	r21
    36d8:	4f 93       	push	r20
    36da:	3f 93       	push	r19
    36dc:	2f 93       	push	r18
    36de:	0e 94 24 1c 	call	0x3848	; 0x3848 <log>
    36e2:	2f 91       	pop	r18
    36e4:	3f 91       	pop	r19
    36e6:	4f 91       	pop	r20
    36e8:	5f 91       	pop	r21
    36ea:	0e 94 bc 1a 	call	0x3578	; 0x3578 <__mulsf3>
    36ee:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <exp>
    36f2:	29 f4       	brne	.+10     	; 0x36fe <pow+0xac>
    36f4:	16 f0       	brts	.+4      	; 0x36fa <pow+0xa8>
    36f6:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__fp_inf>
    36fa:	0c 94 b0 1a 	jmp	0x3560	; 0x3560 <__fp_zero>
    36fe:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__fp_nan>

00003702 <exp>:
    3702:	0e 94 96 1a 	call	0x352c	; 0x352c <__fp_splitA>
    3706:	a8 f3       	brcs	.-22     	; 0x36f2 <pow+0xa0>
    3708:	96 38       	cpi	r25, 0x86	; 134
    370a:	a0 f7       	brcc	.-24     	; 0x36f4 <pow+0xa2>
    370c:	07 f8       	bld	r0, 7
    370e:	0f 92       	push	r0
    3710:	e8 94       	clt
    3712:	2b e3       	ldi	r18, 0x3B	; 59
    3714:	3a ea       	ldi	r19, 0xAA	; 170
    3716:	48 eb       	ldi	r20, 0xB8	; 184
    3718:	5f e7       	ldi	r21, 0x7F	; 127
    371a:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <__mulsf3_pse>
    371e:	0f 92       	push	r0
    3720:	0f 92       	push	r0
    3722:	0f 92       	push	r0
    3724:	4d b7       	in	r20, 0x3d	; 61
    3726:	5e b7       	in	r21, 0x3e	; 62
    3728:	0f 92       	push	r0
    372a:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <modf>
    372e:	e8 ee       	ldi	r30, 0xE8	; 232
    3730:	f0 e0       	ldi	r31, 0x00	; 0
    3732:	0e 94 b3 1b 	call	0x3766	; 0x3766 <__fp_powser>
    3736:	4f 91       	pop	r20
    3738:	5f 91       	pop	r21
    373a:	ef 91       	pop	r30
    373c:	ff 91       	pop	r31
    373e:	e5 95       	asr	r30
    3740:	ee 1f       	adc	r30, r30
    3742:	ff 1f       	adc	r31, r31
    3744:	49 f0       	breq	.+18     	; 0x3758 <exp+0x56>
    3746:	fe 57       	subi	r31, 0x7E	; 126
    3748:	e0 68       	ori	r30, 0x80	; 128
    374a:	44 27       	eor	r20, r20
    374c:	ee 0f       	add	r30, r30
    374e:	44 1f       	adc	r20, r20
    3750:	fa 95       	dec	r31
    3752:	e1 f7       	brne	.-8      	; 0x374c <exp+0x4a>
    3754:	41 95       	neg	r20
    3756:	55 0b       	sbc	r21, r21
    3758:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <ldexp>
    375c:	0f 90       	pop	r0
    375e:	07 fe       	sbrs	r0, 7
    3760:	0c 94 da 1b 	jmp	0x37b4	; 0x37b4 <inverse>
    3764:	08 95       	ret

00003766 <__fp_powser>:
    3766:	df 93       	push	r29
    3768:	cf 93       	push	r28
    376a:	1f 93       	push	r17
    376c:	0f 93       	push	r16
    376e:	ff 92       	push	r15
    3770:	ef 92       	push	r14
    3772:	df 92       	push	r13
    3774:	7b 01       	movw	r14, r22
    3776:	8c 01       	movw	r16, r24
    3778:	68 94       	set
    377a:	06 c0       	rjmp	.+12     	; 0x3788 <__fp_powser+0x22>
    377c:	da 2e       	mov	r13, r26
    377e:	ef 01       	movw	r28, r30
    3780:	0e 94 cf 1a 	call	0x359e	; 0x359e <__mulsf3x>
    3784:	fe 01       	movw	r30, r28
    3786:	e8 94       	clt
    3788:	a5 91       	lpm	r26, Z+
    378a:	25 91       	lpm	r18, Z+
    378c:	35 91       	lpm	r19, Z+
    378e:	45 91       	lpm	r20, Z+
    3790:	55 91       	lpm	r21, Z+
    3792:	a6 f3       	brts	.-24     	; 0x377c <__fp_powser+0x16>
    3794:	ef 01       	movw	r28, r30
    3796:	0e 94 03 19 	call	0x3206	; 0x3206 <__addsf3x>
    379a:	fe 01       	movw	r30, r28
    379c:	97 01       	movw	r18, r14
    379e:	a8 01       	movw	r20, r16
    37a0:	da 94       	dec	r13
    37a2:	69 f7       	brne	.-38     	; 0x377e <__fp_powser+0x18>
    37a4:	df 90       	pop	r13
    37a6:	ef 90       	pop	r14
    37a8:	ff 90       	pop	r15
    37aa:	0f 91       	pop	r16
    37ac:	1f 91       	pop	r17
    37ae:	cf 91       	pop	r28
    37b0:	df 91       	pop	r29
    37b2:	08 95       	ret

000037b4 <inverse>:
    37b4:	9b 01       	movw	r18, r22
    37b6:	ac 01       	movw	r20, r24
    37b8:	60 e0       	ldi	r22, 0x00	; 0
    37ba:	70 e0       	ldi	r23, 0x00	; 0
    37bc:	80 e8       	ldi	r24, 0x80	; 128
    37be:	9f e3       	ldi	r25, 0x3F	; 63
    37c0:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__divsf3>
    37c4:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__fp_inf>
    37c8:	0c 94 a0 1c 	jmp	0x3940	; 0x3940 <__fp_mpack>

000037cc <ldexp>:
    37cc:	0e 94 96 1a 	call	0x352c	; 0x352c <__fp_splitA>
    37d0:	d8 f3       	brcs	.-10     	; 0x37c8 <inverse+0x14>
    37d2:	99 23       	and	r25, r25
    37d4:	c9 f3       	breq	.-14     	; 0x37c8 <inverse+0x14>
    37d6:	94 0f       	add	r25, r20
    37d8:	51 1d       	adc	r21, r1
    37da:	a3 f3       	brvs	.-24     	; 0x37c4 <inverse+0x10>
    37dc:	91 50       	subi	r25, 0x01	; 1
    37de:	50 40       	sbci	r21, 0x00	; 0
    37e0:	94 f0       	brlt	.+36     	; 0x3806 <ldexp+0x3a>
    37e2:	59 f0       	breq	.+22     	; 0x37fa <ldexp+0x2e>
    37e4:	88 23       	and	r24, r24
    37e6:	32 f0       	brmi	.+12     	; 0x37f4 <ldexp+0x28>
    37e8:	66 0f       	add	r22, r22
    37ea:	77 1f       	adc	r23, r23
    37ec:	88 1f       	adc	r24, r24
    37ee:	91 50       	subi	r25, 0x01	; 1
    37f0:	50 40       	sbci	r21, 0x00	; 0
    37f2:	c1 f7       	brne	.-16     	; 0x37e4 <ldexp+0x18>
    37f4:	9e 3f       	cpi	r25, 0xFE	; 254
    37f6:	51 05       	cpc	r21, r1
    37f8:	2c f7       	brge	.-54     	; 0x37c4 <inverse+0x10>
    37fa:	88 0f       	add	r24, r24
    37fc:	91 1d       	adc	r25, r1
    37fe:	96 95       	lsr	r25
    3800:	87 95       	ror	r24
    3802:	97 f9       	bld	r25, 7
    3804:	08 95       	ret
    3806:	5f 3f       	cpi	r21, 0xFF	; 255
    3808:	ac f0       	brlt	.+42     	; 0x3834 <ldexp+0x68>
    380a:	98 3e       	cpi	r25, 0xE8	; 232
    380c:	9c f0       	brlt	.+38     	; 0x3834 <ldexp+0x68>
    380e:	bb 27       	eor	r27, r27
    3810:	86 95       	lsr	r24
    3812:	77 95       	ror	r23
    3814:	67 95       	ror	r22
    3816:	b7 95       	ror	r27
    3818:	08 f4       	brcc	.+2      	; 0x381c <ldexp+0x50>
    381a:	b1 60       	ori	r27, 0x01	; 1
    381c:	93 95       	inc	r25
    381e:	c1 f7       	brne	.-16     	; 0x3810 <ldexp+0x44>
    3820:	bb 0f       	add	r27, r27
    3822:	58 f7       	brcc	.-42     	; 0x37fa <ldexp+0x2e>
    3824:	11 f4       	brne	.+4      	; 0x382a <ldexp+0x5e>
    3826:	60 ff       	sbrs	r22, 0
    3828:	e8 cf       	rjmp	.-48     	; 0x37fa <ldexp+0x2e>
    382a:	6f 5f       	subi	r22, 0xFF	; 255
    382c:	7f 4f       	sbci	r23, 0xFF	; 255
    382e:	8f 4f       	sbci	r24, 0xFF	; 255
    3830:	9f 4f       	sbci	r25, 0xFF	; 255
    3832:	e3 cf       	rjmp	.-58     	; 0x37fa <ldexp+0x2e>
    3834:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__fp_szero>
    3838:	16 f0       	brts	.+4      	; 0x383e <ldexp+0x72>
    383a:	0c 94 a0 1c 	jmp	0x3940	; 0x3940 <__fp_mpack>
    383e:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__fp_nan>
    3842:	68 94       	set
    3844:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__fp_inf>

00003848 <log>:
    3848:	0e 94 96 1a 	call	0x352c	; 0x352c <__fp_splitA>
    384c:	a8 f3       	brcs	.-22     	; 0x3838 <ldexp+0x6c>
    384e:	99 23       	and	r25, r25
    3850:	c1 f3       	breq	.-16     	; 0x3842 <ldexp+0x76>
    3852:	ae f3       	brts	.-22     	; 0x383e <ldexp+0x72>
    3854:	df 93       	push	r29
    3856:	cf 93       	push	r28
    3858:	1f 93       	push	r17
    385a:	0f 93       	push	r16
    385c:	ff 92       	push	r15
    385e:	c9 2f       	mov	r28, r25
    3860:	dd 27       	eor	r29, r29
    3862:	88 23       	and	r24, r24
    3864:	2a f0       	brmi	.+10     	; 0x3870 <log+0x28>
    3866:	21 97       	sbiw	r28, 0x01	; 1
    3868:	66 0f       	add	r22, r22
    386a:	77 1f       	adc	r23, r23
    386c:	88 1f       	adc	r24, r24
    386e:	da f7       	brpl	.-10     	; 0x3866 <log+0x1e>
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	40 e8       	ldi	r20, 0x80	; 128
    3876:	5f eb       	ldi	r21, 0xBF	; 191
    3878:	9f e3       	ldi	r25, 0x3F	; 63
    387a:	88 39       	cpi	r24, 0x98	; 152
    387c:	20 f0       	brcs	.+8      	; 0x3886 <log+0x3e>
    387e:	80 3e       	cpi	r24, 0xE0	; 224
    3880:	38 f0       	brcs	.+14     	; 0x3890 <log+0x48>
    3882:	21 96       	adiw	r28, 0x01	; 1
    3884:	8f 77       	andi	r24, 0x7F	; 127
    3886:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
    388a:	e0 e1       	ldi	r30, 0x10	; 16
    388c:	f1 e0       	ldi	r31, 0x01	; 1
    388e:	04 c0       	rjmp	.+8      	; 0x3898 <log+0x50>
    3890:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__addsf3>
    3894:	ed e3       	ldi	r30, 0x3D	; 61
    3896:	f1 e0       	ldi	r31, 0x01	; 1
    3898:	0e 94 b3 1b 	call	0x3766	; 0x3766 <__fp_powser>
    389c:	8b 01       	movw	r16, r22
    389e:	be 01       	movw	r22, r28
    38a0:	ec 01       	movw	r28, r24
    38a2:	fb 2e       	mov	r15, r27
    38a4:	6f 57       	subi	r22, 0x7F	; 127
    38a6:	71 09       	sbc	r23, r1
    38a8:	75 95       	asr	r23
    38aa:	77 1f       	adc	r23, r23
    38ac:	88 0b       	sbc	r24, r24
    38ae:	99 0b       	sbc	r25, r25
    38b0:	0e 94 07 1a 	call	0x340e	; 0x340e <__floatsisf>
    38b4:	28 e1       	ldi	r18, 0x18	; 24
    38b6:	32 e7       	ldi	r19, 0x72	; 114
    38b8:	41 e3       	ldi	r20, 0x31	; 49
    38ba:	5f e3       	ldi	r21, 0x3F	; 63
    38bc:	0e 94 cf 1a 	call	0x359e	; 0x359e <__mulsf3x>
    38c0:	af 2d       	mov	r26, r15
    38c2:	98 01       	movw	r18, r16
    38c4:	ae 01       	movw	r20, r28
    38c6:	ff 90       	pop	r15
    38c8:	0f 91       	pop	r16
    38ca:	1f 91       	pop	r17
    38cc:	cf 91       	pop	r28
    38ce:	df 91       	pop	r29
    38d0:	0e 94 03 19 	call	0x3206	; 0x3206 <__addsf3x>
    38d4:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__fp_round>

000038d8 <modf>:
    38d8:	fa 01       	movw	r30, r20
    38da:	dc 01       	movw	r26, r24
    38dc:	aa 0f       	add	r26, r26
    38de:	bb 1f       	adc	r27, r27
    38e0:	9b 01       	movw	r18, r22
    38e2:	ac 01       	movw	r20, r24
    38e4:	bf 57       	subi	r27, 0x7F	; 127
    38e6:	28 f4       	brcc	.+10     	; 0x38f2 <modf+0x1a>
    38e8:	22 27       	eor	r18, r18
    38ea:	33 27       	eor	r19, r19
    38ec:	44 27       	eor	r20, r20
    38ee:	50 78       	andi	r21, 0x80	; 128
    38f0:	20 c0       	rjmp	.+64     	; 0x3932 <modf+0x5a>
    38f2:	b7 51       	subi	r27, 0x17	; 23
    38f4:	90 f4       	brcc	.+36     	; 0x391a <modf+0x42>
    38f6:	ab 2f       	mov	r26, r27
    38f8:	00 24       	eor	r0, r0
    38fa:	46 95       	lsr	r20
    38fc:	37 95       	ror	r19
    38fe:	27 95       	ror	r18
    3900:	01 1c       	adc	r0, r1
    3902:	a3 95       	inc	r26
    3904:	d2 f3       	brmi	.-12     	; 0x38fa <modf+0x22>
    3906:	00 20       	and	r0, r0
    3908:	71 f0       	breq	.+28     	; 0x3926 <modf+0x4e>
    390a:	22 0f       	add	r18, r18
    390c:	33 1f       	adc	r19, r19
    390e:	44 1f       	adc	r20, r20
    3910:	b3 95       	inc	r27
    3912:	da f3       	brmi	.-10     	; 0x390a <modf+0x32>
    3914:	0e d0       	rcall	.+28     	; 0x3932 <modf+0x5a>
    3916:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <__subsf3>
    391a:	61 30       	cpi	r22, 0x01	; 1
    391c:	71 05       	cpc	r23, r1
    391e:	a0 e8       	ldi	r26, 0x80	; 128
    3920:	8a 07       	cpc	r24, r26
    3922:	b9 46       	sbci	r27, 0x69	; 105
    3924:	30 f4       	brcc	.+12     	; 0x3932 <modf+0x5a>
    3926:	9b 01       	movw	r18, r22
    3928:	ac 01       	movw	r20, r24
    392a:	66 27       	eor	r22, r22
    392c:	77 27       	eor	r23, r23
    392e:	88 27       	eor	r24, r24
    3930:	90 78       	andi	r25, 0x80	; 128
    3932:	30 96       	adiw	r30, 0x00	; 0
    3934:	21 f0       	breq	.+8      	; 0x393e <modf+0x66>
    3936:	20 83       	st	Z, r18
    3938:	31 83       	std	Z+1, r19	; 0x01
    393a:	42 83       	std	Z+2, r20	; 0x02
    393c:	53 83       	std	Z+3, r21	; 0x03
    393e:	08 95       	ret

00003940 <__fp_mpack>:
    3940:	9f 3f       	cpi	r25, 0xFF	; 255
    3942:	31 f0       	breq	.+12     	; 0x3950 <__fp_mpack_finite+0xc>

00003944 <__fp_mpack_finite>:
    3944:	91 50       	subi	r25, 0x01	; 1
    3946:	20 f4       	brcc	.+8      	; 0x3950 <__fp_mpack_finite+0xc>
    3948:	87 95       	ror	r24
    394a:	77 95       	ror	r23
    394c:	67 95       	ror	r22
    394e:	b7 95       	ror	r27
    3950:	88 0f       	add	r24, r24
    3952:	91 1d       	adc	r25, r1
    3954:	96 95       	lsr	r25
    3956:	87 95       	ror	r24
    3958:	97 f9       	bld	r25, 7
    395a:	08 95       	ret

0000395c <__divmodhi4>:
    395c:	97 fb       	bst	r25, 7
    395e:	07 2e       	mov	r0, r23
    3960:	16 f4       	brtc	.+4      	; 0x3966 <__divmodhi4+0xa>
    3962:	00 94       	com	r0
    3964:	07 d0       	rcall	.+14     	; 0x3974 <__divmodhi4_neg1>
    3966:	77 fd       	sbrc	r23, 7
    3968:	09 d0       	rcall	.+18     	; 0x397c <__divmodhi4_neg2>
    396a:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__udivmodhi4>
    396e:	07 fc       	sbrc	r0, 7
    3970:	05 d0       	rcall	.+10     	; 0x397c <__divmodhi4_neg2>
    3972:	3e f4       	brtc	.+14     	; 0x3982 <__divmodhi4_exit>

00003974 <__divmodhi4_neg1>:
    3974:	90 95       	com	r25
    3976:	81 95       	neg	r24
    3978:	9f 4f       	sbci	r25, 0xFF	; 255
    397a:	08 95       	ret

0000397c <__divmodhi4_neg2>:
    397c:	70 95       	com	r23
    397e:	61 95       	neg	r22
    3980:	7f 4f       	sbci	r23, 0xFF	; 255

00003982 <__divmodhi4_exit>:
    3982:	08 95       	ret

00003984 <__divmodsi4>:
    3984:	05 2e       	mov	r0, r21
    3986:	97 fb       	bst	r25, 7
    3988:	1e f4       	brtc	.+6      	; 0x3990 <__divmodsi4+0xc>
    398a:	00 94       	com	r0
    398c:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <__negsi2>
    3990:	57 fd       	sbrc	r21, 7
    3992:	07 d0       	rcall	.+14     	; 0x39a2 <__divmodsi4_neg2>
    3994:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__udivmodsi4>
    3998:	07 fc       	sbrc	r0, 7
    399a:	03 d0       	rcall	.+6      	; 0x39a2 <__divmodsi4_neg2>
    399c:	4e f4       	brtc	.+18     	; 0x39b0 <__divmodsi4_exit>
    399e:	0c 94 d9 1c 	jmp	0x39b2	; 0x39b2 <__negsi2>

000039a2 <__divmodsi4_neg2>:
    39a2:	50 95       	com	r21
    39a4:	40 95       	com	r20
    39a6:	30 95       	com	r19
    39a8:	21 95       	neg	r18
    39aa:	3f 4f       	sbci	r19, 0xFF	; 255
    39ac:	4f 4f       	sbci	r20, 0xFF	; 255
    39ae:	5f 4f       	sbci	r21, 0xFF	; 255

000039b0 <__divmodsi4_exit>:
    39b0:	08 95       	ret

000039b2 <__negsi2>:
    39b2:	90 95       	com	r25
    39b4:	80 95       	com	r24
    39b6:	70 95       	com	r23
    39b8:	61 95       	neg	r22
    39ba:	7f 4f       	sbci	r23, 0xFF	; 255
    39bc:	8f 4f       	sbci	r24, 0xFF	; 255
    39be:	9f 4f       	sbci	r25, 0xFF	; 255
    39c0:	08 95       	ret

000039c2 <__umulhisi3>:
    39c2:	a2 9f       	mul	r26, r18
    39c4:	b0 01       	movw	r22, r0
    39c6:	b3 9f       	mul	r27, r19
    39c8:	c0 01       	movw	r24, r0
    39ca:	a3 9f       	mul	r26, r19
    39cc:	70 0d       	add	r23, r0
    39ce:	81 1d       	adc	r24, r1
    39d0:	11 24       	eor	r1, r1
    39d2:	91 1d       	adc	r25, r1
    39d4:	b2 9f       	mul	r27, r18
    39d6:	70 0d       	add	r23, r0
    39d8:	81 1d       	adc	r24, r1
    39da:	11 24       	eor	r1, r1
    39dc:	91 1d       	adc	r25, r1
    39de:	08 95       	ret

000039e0 <__udivmodhi4>:
    39e0:	aa 1b       	sub	r26, r26
    39e2:	bb 1b       	sub	r27, r27
    39e4:	51 e1       	ldi	r21, 0x11	; 17
    39e6:	07 c0       	rjmp	.+14     	; 0x39f6 <__udivmodhi4_ep>

000039e8 <__udivmodhi4_loop>:
    39e8:	aa 1f       	adc	r26, r26
    39ea:	bb 1f       	adc	r27, r27
    39ec:	a6 17       	cp	r26, r22
    39ee:	b7 07       	cpc	r27, r23
    39f0:	10 f0       	brcs	.+4      	; 0x39f6 <__udivmodhi4_ep>
    39f2:	a6 1b       	sub	r26, r22
    39f4:	b7 0b       	sbc	r27, r23

000039f6 <__udivmodhi4_ep>:
    39f6:	88 1f       	adc	r24, r24
    39f8:	99 1f       	adc	r25, r25
    39fa:	5a 95       	dec	r21
    39fc:	a9 f7       	brne	.-22     	; 0x39e8 <__udivmodhi4_loop>
    39fe:	80 95       	com	r24
    3a00:	90 95       	com	r25
    3a02:	bc 01       	movw	r22, r24
    3a04:	cd 01       	movw	r24, r26
    3a06:	08 95       	ret

00003a08 <__udivmodsi4>:
    3a08:	a1 e2       	ldi	r26, 0x21	; 33
    3a0a:	1a 2e       	mov	r1, r26
    3a0c:	aa 1b       	sub	r26, r26
    3a0e:	bb 1b       	sub	r27, r27
    3a10:	fd 01       	movw	r30, r26
    3a12:	0d c0       	rjmp	.+26     	; 0x3a2e <__udivmodsi4_ep>

00003a14 <__udivmodsi4_loop>:
    3a14:	aa 1f       	adc	r26, r26
    3a16:	bb 1f       	adc	r27, r27
    3a18:	ee 1f       	adc	r30, r30
    3a1a:	ff 1f       	adc	r31, r31
    3a1c:	a2 17       	cp	r26, r18
    3a1e:	b3 07       	cpc	r27, r19
    3a20:	e4 07       	cpc	r30, r20
    3a22:	f5 07       	cpc	r31, r21
    3a24:	20 f0       	brcs	.+8      	; 0x3a2e <__udivmodsi4_ep>
    3a26:	a2 1b       	sub	r26, r18
    3a28:	b3 0b       	sbc	r27, r19
    3a2a:	e4 0b       	sbc	r30, r20
    3a2c:	f5 0b       	sbc	r31, r21

00003a2e <__udivmodsi4_ep>:
    3a2e:	66 1f       	adc	r22, r22
    3a30:	77 1f       	adc	r23, r23
    3a32:	88 1f       	adc	r24, r24
    3a34:	99 1f       	adc	r25, r25
    3a36:	1a 94       	dec	r1
    3a38:	69 f7       	brne	.-38     	; 0x3a14 <__udivmodsi4_loop>
    3a3a:	60 95       	com	r22
    3a3c:	70 95       	com	r23
    3a3e:	80 95       	com	r24
    3a40:	90 95       	com	r25
    3a42:	9b 01       	movw	r18, r22
    3a44:	ac 01       	movw	r20, r24
    3a46:	bd 01       	movw	r22, r26
    3a48:	cf 01       	movw	r24, r30
    3a4a:	08 95       	ret

00003a4c <_exit>:
    3a4c:	f8 94       	cli

00003a4e <__stop_program>:
    3a4e:	ff cf       	rjmp	.-2      	; 0x3a4e <__stop_program>
